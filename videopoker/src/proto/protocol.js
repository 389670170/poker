/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.CVP = (function() {

    /**
     * Namespace CVP.
     * @exports CVP
     * @namespace
     */
    var CVP = {};

    /**
     * LuckyWheelType enum.
     * @name CVP.LuckyWheelType
     * @enum {string}
     * @property {number} SMALL=1 SMALL value
     * @property {number} BIG=2 BIG value
     */
    CVP.LuckyWheelType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "SMALL"] = 1;
        values[valuesById[2] = "BIG"] = 2;
        return values;
    })();

    /**
     * RequestPoint enum.
     * @name CVP.RequestPoint
     * @enum {string}
     * @property {number} AD=1 AD value
     * @property {number} BONUS=2 BONUS value
     */
    CVP.RequestPoint = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "AD"] = 1;
        values[valuesById[2] = "BONUS"] = 2;
        return values;
    })();

    CVP.RequestLuckyWheel = (function() {

        /**
         * Properties of a RequestLuckyWheel.
         * @memberof CVP
         * @interface IRequestLuckyWheel
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestLuckyWheel commonParams
         */

        /**
         * Constructs a new RequestLuckyWheel.
         * @memberof CVP
         * @classdesc Represents a RequestLuckyWheel.
         * @implements IRequestLuckyWheel
         * @constructor
         * @param {CVP.IRequestLuckyWheel=} [properties] Properties to set
         */
        function RequestLuckyWheel(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestLuckyWheel commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestLuckyWheel
         * @instance
         */
        RequestLuckyWheel.prototype.commonParams = null;

        /**
         * Creates a new RequestLuckyWheel instance using the specified properties.
         * @function create
         * @memberof CVP.RequestLuckyWheel
         * @static
         * @param {CVP.IRequestLuckyWheel=} [properties] Properties to set
         * @returns {CVP.RequestLuckyWheel} RequestLuckyWheel instance
         */
        RequestLuckyWheel.create = function create(properties) {
            return new RequestLuckyWheel(properties);
        };

        /**
         * Encodes the specified RequestLuckyWheel message. Does not implicitly {@link CVP.RequestLuckyWheel.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestLuckyWheel
         * @static
         * @param {CVP.IRequestLuckyWheel} message RequestLuckyWheel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLuckyWheel.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestLuckyWheel message, length delimited. Does not implicitly {@link CVP.RequestLuckyWheel.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestLuckyWheel
         * @static
         * @param {CVP.IRequestLuckyWheel} message RequestLuckyWheel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLuckyWheel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestLuckyWheel message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestLuckyWheel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestLuckyWheel} RequestLuckyWheel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLuckyWheel.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestLuckyWheel();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestLuckyWheel message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestLuckyWheel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestLuckyWheel} RequestLuckyWheel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLuckyWheel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestLuckyWheel message.
         * @function verify
         * @memberof CVP.RequestLuckyWheel
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestLuckyWheel.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestLuckyWheel message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestLuckyWheel
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestLuckyWheel} RequestLuckyWheel
         */
        RequestLuckyWheel.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestLuckyWheel)
                return object;
            var message = new $root.CVP.RequestLuckyWheel();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestLuckyWheel.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestLuckyWheel message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestLuckyWheel
         * @static
         * @param {CVP.RequestLuckyWheel} message RequestLuckyWheel
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestLuckyWheel.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestLuckyWheel to JSON.
         * @function toJSON
         * @memberof CVP.RequestLuckyWheel
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestLuckyWheel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLuckyWheel;
    })();

    CVP.RequestLuckyWheelResult = (function() {

        /**
         * Properties of a RequestLuckyWheelResult.
         * @memberof CVP
         * @interface IRequestLuckyWheelResult
         * @property {Array.<number>|null} [coins] RequestLuckyWheelResult coins
         * @property {CVP.LuckyWheelType|null} [luckyWheelType] RequestLuckyWheelResult luckyWheelType
         */

        /**
         * Constructs a new RequestLuckyWheelResult.
         * @memberof CVP
         * @classdesc Represents a RequestLuckyWheelResult.
         * @implements IRequestLuckyWheelResult
         * @constructor
         * @param {CVP.IRequestLuckyWheelResult=} [properties] Properties to set
         */
        function RequestLuckyWheelResult(properties) {
            this.coins = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestLuckyWheelResult coins.
         * @member {Array.<number>} coins
         * @memberof CVP.RequestLuckyWheelResult
         * @instance
         */
        RequestLuckyWheelResult.prototype.coins = $util.emptyArray;

        /**
         * RequestLuckyWheelResult luckyWheelType.
         * @member {CVP.LuckyWheelType} luckyWheelType
         * @memberof CVP.RequestLuckyWheelResult
         * @instance
         */
        RequestLuckyWheelResult.prototype.luckyWheelType = 1;

        /**
         * Creates a new RequestLuckyWheelResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestLuckyWheelResult
         * @static
         * @param {CVP.IRequestLuckyWheelResult=} [properties] Properties to set
         * @returns {CVP.RequestLuckyWheelResult} RequestLuckyWheelResult instance
         */
        RequestLuckyWheelResult.create = function create(properties) {
            return new RequestLuckyWheelResult(properties);
        };

        /**
         * Encodes the specified RequestLuckyWheelResult message. Does not implicitly {@link CVP.RequestLuckyWheelResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestLuckyWheelResult
         * @static
         * @param {CVP.IRequestLuckyWheelResult} message RequestLuckyWheelResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLuckyWheelResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.coins.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (var i = 0; i < message.coins.length; ++i)
                    writer.double(message.coins[i]);
                writer.ldelim();
            }
            if (message.luckyWheelType != null && message.hasOwnProperty("luckyWheelType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.luckyWheelType);
            return writer;
        };

        /**
         * Encodes the specified RequestLuckyWheelResult message, length delimited. Does not implicitly {@link CVP.RequestLuckyWheelResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestLuckyWheelResult
         * @static
         * @param {CVP.IRequestLuckyWheelResult} message RequestLuckyWheelResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLuckyWheelResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestLuckyWheelResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestLuckyWheelResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestLuckyWheelResult} RequestLuckyWheelResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLuckyWheelResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestLuckyWheelResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.coins && message.coins.length))
                        message.coins = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.coins.push(reader.double());
                    } else
                        message.coins.push(reader.double());
                    break;
                case 2:
                    message.luckyWheelType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestLuckyWheelResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestLuckyWheelResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestLuckyWheelResult} RequestLuckyWheelResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLuckyWheelResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestLuckyWheelResult message.
         * @function verify
         * @memberof CVP.RequestLuckyWheelResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestLuckyWheelResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins")) {
                if (!Array.isArray(message.coins))
                    return "coins: array expected";
                for (var i = 0; i < message.coins.length; ++i)
                    if (typeof message.coins[i] !== "number")
                        return "coins: number[] expected";
            }
            if (message.luckyWheelType != null && message.hasOwnProperty("luckyWheelType"))
                switch (message.luckyWheelType) {
                default:
                    return "luckyWheelType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestLuckyWheelResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestLuckyWheelResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestLuckyWheelResult} RequestLuckyWheelResult
         */
        RequestLuckyWheelResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestLuckyWheelResult)
                return object;
            var message = new $root.CVP.RequestLuckyWheelResult();
            if (object.coins) {
                if (!Array.isArray(object.coins))
                    throw TypeError(".CVP.RequestLuckyWheelResult.coins: array expected");
                message.coins = [];
                for (var i = 0; i < object.coins.length; ++i)
                    message.coins[i] = Number(object.coins[i]);
            }
            switch (object.luckyWheelType) {
            case "SMALL":
            case 1:
                message.luckyWheelType = 1;
                break;
            case "BIG":
            case 2:
                message.luckyWheelType = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestLuckyWheelResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestLuckyWheelResult
         * @static
         * @param {CVP.RequestLuckyWheelResult} message RequestLuckyWheelResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestLuckyWheelResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.coins = [];
            if (options.defaults)
                object.luckyWheelType = options.enums === String ? "SMALL" : 1;
            if (message.coins && message.coins.length) {
                object.coins = [];
                for (var j = 0; j < message.coins.length; ++j)
                    object.coins[j] = options.json && !isFinite(message.coins[j]) ? String(message.coins[j]) : message.coins[j];
            }
            if (message.luckyWheelType != null && message.hasOwnProperty("luckyWheelType"))
                object.luckyWheelType = options.enums === String ? $root.CVP.LuckyWheelType[message.luckyWheelType] : message.luckyWheelType;
            return object;
        };

        /**
         * Converts this RequestLuckyWheelResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestLuckyWheelResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestLuckyWheelResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLuckyWheelResult;
    })();

    CVP.RequestLuckyWheelSpin = (function() {

        /**
         * Properties of a RequestLuckyWheelSpin.
         * @memberof CVP
         * @interface IRequestLuckyWheelSpin
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestLuckyWheelSpin commonParams
         */

        /**
         * Constructs a new RequestLuckyWheelSpin.
         * @memberof CVP
         * @classdesc Represents a RequestLuckyWheelSpin.
         * @implements IRequestLuckyWheelSpin
         * @constructor
         * @param {CVP.IRequestLuckyWheelSpin=} [properties] Properties to set
         */
        function RequestLuckyWheelSpin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestLuckyWheelSpin commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestLuckyWheelSpin
         * @instance
         */
        RequestLuckyWheelSpin.prototype.commonParams = null;

        /**
         * Creates a new RequestLuckyWheelSpin instance using the specified properties.
         * @function create
         * @memberof CVP.RequestLuckyWheelSpin
         * @static
         * @param {CVP.IRequestLuckyWheelSpin=} [properties] Properties to set
         * @returns {CVP.RequestLuckyWheelSpin} RequestLuckyWheelSpin instance
         */
        RequestLuckyWheelSpin.create = function create(properties) {
            return new RequestLuckyWheelSpin(properties);
        };

        /**
         * Encodes the specified RequestLuckyWheelSpin message. Does not implicitly {@link CVP.RequestLuckyWheelSpin.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestLuckyWheelSpin
         * @static
         * @param {CVP.IRequestLuckyWheelSpin} message RequestLuckyWheelSpin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLuckyWheelSpin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestLuckyWheelSpin message, length delimited. Does not implicitly {@link CVP.RequestLuckyWheelSpin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestLuckyWheelSpin
         * @static
         * @param {CVP.IRequestLuckyWheelSpin} message RequestLuckyWheelSpin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLuckyWheelSpin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestLuckyWheelSpin message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestLuckyWheelSpin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestLuckyWheelSpin} RequestLuckyWheelSpin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLuckyWheelSpin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestLuckyWheelSpin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestLuckyWheelSpin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestLuckyWheelSpin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestLuckyWheelSpin} RequestLuckyWheelSpin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLuckyWheelSpin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestLuckyWheelSpin message.
         * @function verify
         * @memberof CVP.RequestLuckyWheelSpin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestLuckyWheelSpin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestLuckyWheelSpin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestLuckyWheelSpin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestLuckyWheelSpin} RequestLuckyWheelSpin
         */
        RequestLuckyWheelSpin.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestLuckyWheelSpin)
                return object;
            var message = new $root.CVP.RequestLuckyWheelSpin();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestLuckyWheelSpin.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestLuckyWheelSpin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestLuckyWheelSpin
         * @static
         * @param {CVP.RequestLuckyWheelSpin} message RequestLuckyWheelSpin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestLuckyWheelSpin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestLuckyWheelSpin to JSON.
         * @function toJSON
         * @memberof CVP.RequestLuckyWheelSpin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestLuckyWheelSpin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLuckyWheelSpin;
    })();

    CVP.RequestLuckyWheelSpinResult = (function() {

        /**
         * Properties of a RequestLuckyWheelSpinResult.
         * @memberof CVP
         * @interface IRequestLuckyWheelSpinResult
         * @property {number|null} [coins] RequestLuckyWheelSpinResult coins
         * @property {number|null} [level] RequestLuckyWheelSpinResult level
         */

        /**
         * Constructs a new RequestLuckyWheelSpinResult.
         * @memberof CVP
         * @classdesc Represents a RequestLuckyWheelSpinResult.
         * @implements IRequestLuckyWheelSpinResult
         * @constructor
         * @param {CVP.IRequestLuckyWheelSpinResult=} [properties] Properties to set
         */
        function RequestLuckyWheelSpinResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestLuckyWheelSpinResult coins.
         * @member {number} coins
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @instance
         */
        RequestLuckyWheelSpinResult.prototype.coins = 0;

        /**
         * RequestLuckyWheelSpinResult level.
         * @member {number} level
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @instance
         */
        RequestLuckyWheelSpinResult.prototype.level = 0;

        /**
         * Creates a new RequestLuckyWheelSpinResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @static
         * @param {CVP.IRequestLuckyWheelSpinResult=} [properties] Properties to set
         * @returns {CVP.RequestLuckyWheelSpinResult} RequestLuckyWheelSpinResult instance
         */
        RequestLuckyWheelSpinResult.create = function create(properties) {
            return new RequestLuckyWheelSpinResult(properties);
        };

        /**
         * Encodes the specified RequestLuckyWheelSpinResult message. Does not implicitly {@link CVP.RequestLuckyWheelSpinResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @static
         * @param {CVP.IRequestLuckyWheelSpinResult} message RequestLuckyWheelSpinResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLuckyWheelSpinResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.level);
            return writer;
        };

        /**
         * Encodes the specified RequestLuckyWheelSpinResult message, length delimited. Does not implicitly {@link CVP.RequestLuckyWheelSpinResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @static
         * @param {CVP.IRequestLuckyWheelSpinResult} message RequestLuckyWheelSpinResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLuckyWheelSpinResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestLuckyWheelSpinResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestLuckyWheelSpinResult} RequestLuckyWheelSpinResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLuckyWheelSpinResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestLuckyWheelSpinResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                case 2:
                    message.level = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestLuckyWheelSpinResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestLuckyWheelSpinResult} RequestLuckyWheelSpinResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLuckyWheelSpinResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestLuckyWheelSpinResult message.
         * @function verify
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestLuckyWheelSpinResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            return null;
        };

        /**
         * Creates a RequestLuckyWheelSpinResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestLuckyWheelSpinResult} RequestLuckyWheelSpinResult
         */
        RequestLuckyWheelSpinResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestLuckyWheelSpinResult)
                return object;
            var message = new $root.CVP.RequestLuckyWheelSpinResult();
            if (object.coins != null)
                message.coins = Number(object.coins);
            if (object.level != null)
                message.level = object.level | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestLuckyWheelSpinResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @static
         * @param {CVP.RequestLuckyWheelSpinResult} message RequestLuckyWheelSpinResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestLuckyWheelSpinResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.coins = 0;
                object.level = 0;
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            return object;
        };

        /**
         * Converts this RequestLuckyWheelSpinResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestLuckyWheelSpinResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestLuckyWheelSpinResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLuckyWheelSpinResult;
    })();

    CVP.BonusInfo = (function() {

        /**
         * Properties of a BonusInfo.
         * @memberof CVP
         * @interface IBonusInfo
         * @property {number|null} [residueTime] BonusInfo residueTime
         * @property {number|null} [getCoinsTime] BonusInfo getCoinsTime
         * @property {number|null} [getWheelTime] BonusInfo getWheelTime
         * @property {number|null} [baseTime] BonusInfo baseTime
         * @property {number|null} [reduceTime] BonusInfo reduceTime
         */

        /**
         * Constructs a new BonusInfo.
         * @memberof CVP
         * @classdesc Represents a BonusInfo.
         * @implements IBonusInfo
         * @constructor
         * @param {CVP.IBonusInfo=} [properties] Properties to set
         */
        function BonusInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BonusInfo residueTime.
         * @member {number} residueTime
         * @memberof CVP.BonusInfo
         * @instance
         */
        BonusInfo.prototype.residueTime = 0;

        /**
         * BonusInfo getCoinsTime.
         * @member {number} getCoinsTime
         * @memberof CVP.BonusInfo
         * @instance
         */
        BonusInfo.prototype.getCoinsTime = 0;

        /**
         * BonusInfo getWheelTime.
         * @member {number} getWheelTime
         * @memberof CVP.BonusInfo
         * @instance
         */
        BonusInfo.prototype.getWheelTime = 0;

        /**
         * BonusInfo baseTime.
         * @member {number} baseTime
         * @memberof CVP.BonusInfo
         * @instance
         */
        BonusInfo.prototype.baseTime = 0;

        /**
         * BonusInfo reduceTime.
         * @member {number} reduceTime
         * @memberof CVP.BonusInfo
         * @instance
         */
        BonusInfo.prototype.reduceTime = 0;

        /**
         * Creates a new BonusInfo instance using the specified properties.
         * @function create
         * @memberof CVP.BonusInfo
         * @static
         * @param {CVP.IBonusInfo=} [properties] Properties to set
         * @returns {CVP.BonusInfo} BonusInfo instance
         */
        BonusInfo.create = function create(properties) {
            return new BonusInfo(properties);
        };

        /**
         * Encodes the specified BonusInfo message. Does not implicitly {@link CVP.BonusInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.BonusInfo
         * @static
         * @param {CVP.IBonusInfo} message BonusInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BonusInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.residueTime != null && message.hasOwnProperty("residueTime"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.residueTime);
            if (message.getCoinsTime != null && message.hasOwnProperty("getCoinsTime"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.getCoinsTime);
            if (message.getWheelTime != null && message.hasOwnProperty("getWheelTime"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.getWheelTime);
            if (message.baseTime != null && message.hasOwnProperty("baseTime"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.baseTime);
            if (message.reduceTime != null && message.hasOwnProperty("reduceTime"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.reduceTime);
            return writer;
        };

        /**
         * Encodes the specified BonusInfo message, length delimited. Does not implicitly {@link CVP.BonusInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.BonusInfo
         * @static
         * @param {CVP.IBonusInfo} message BonusInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BonusInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BonusInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.BonusInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.BonusInfo} BonusInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BonusInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.BonusInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.residueTime = reader.int32();
                    break;
                case 2:
                    message.getCoinsTime = reader.int32();
                    break;
                case 3:
                    message.getWheelTime = reader.int32();
                    break;
                case 4:
                    message.baseTime = reader.int32();
                    break;
                case 5:
                    message.reduceTime = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BonusInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.BonusInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.BonusInfo} BonusInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BonusInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BonusInfo message.
         * @function verify
         * @memberof CVP.BonusInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BonusInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.residueTime != null && message.hasOwnProperty("residueTime"))
                if (!$util.isInteger(message.residueTime))
                    return "residueTime: integer expected";
            if (message.getCoinsTime != null && message.hasOwnProperty("getCoinsTime"))
                if (!$util.isInteger(message.getCoinsTime))
                    return "getCoinsTime: integer expected";
            if (message.getWheelTime != null && message.hasOwnProperty("getWheelTime"))
                if (!$util.isInteger(message.getWheelTime))
                    return "getWheelTime: integer expected";
            if (message.baseTime != null && message.hasOwnProperty("baseTime"))
                if (!$util.isInteger(message.baseTime))
                    return "baseTime: integer expected";
            if (message.reduceTime != null && message.hasOwnProperty("reduceTime"))
                if (!$util.isInteger(message.reduceTime))
                    return "reduceTime: integer expected";
            return null;
        };

        /**
         * Creates a BonusInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.BonusInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.BonusInfo} BonusInfo
         */
        BonusInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.BonusInfo)
                return object;
            var message = new $root.CVP.BonusInfo();
            if (object.residueTime != null)
                message.residueTime = object.residueTime | 0;
            if (object.getCoinsTime != null)
                message.getCoinsTime = object.getCoinsTime | 0;
            if (object.getWheelTime != null)
                message.getWheelTime = object.getWheelTime | 0;
            if (object.baseTime != null)
                message.baseTime = object.baseTime | 0;
            if (object.reduceTime != null)
                message.reduceTime = object.reduceTime | 0;
            return message;
        };

        /**
         * Creates a plain object from a BonusInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.BonusInfo
         * @static
         * @param {CVP.BonusInfo} message BonusInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BonusInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.residueTime = 0;
                object.getCoinsTime = 0;
                object.getWheelTime = 0;
                object.baseTime = 0;
                object.reduceTime = 0;
            }
            if (message.residueTime != null && message.hasOwnProperty("residueTime"))
                object.residueTime = message.residueTime;
            if (message.getCoinsTime != null && message.hasOwnProperty("getCoinsTime"))
                object.getCoinsTime = message.getCoinsTime;
            if (message.getWheelTime != null && message.hasOwnProperty("getWheelTime"))
                object.getWheelTime = message.getWheelTime;
            if (message.baseTime != null && message.hasOwnProperty("baseTime"))
                object.baseTime = message.baseTime;
            if (message.reduceTime != null && message.hasOwnProperty("reduceTime"))
                object.reduceTime = message.reduceTime;
            return object;
        };

        /**
         * Converts this BonusInfo to JSON.
         * @function toJSON
         * @memberof CVP.BonusInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BonusInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BonusInfo;
    })();

    CVP.RequestBonus = (function() {

        /**
         * Properties of a RequestBonus.
         * @memberof CVP
         * @interface IRequestBonus
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestBonus commonParams
         * @property {CVP.RequestPoint|null} [requestPoint] RequestBonus requestPoint
         */

        /**
         * Constructs a new RequestBonus.
         * @memberof CVP
         * @classdesc Represents a RequestBonus.
         * @implements IRequestBonus
         * @constructor
         * @param {CVP.IRequestBonus=} [properties] Properties to set
         */
        function RequestBonus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestBonus commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestBonus
         * @instance
         */
        RequestBonus.prototype.commonParams = null;

        /**
         * RequestBonus requestPoint.
         * @member {CVP.RequestPoint} requestPoint
         * @memberof CVP.RequestBonus
         * @instance
         */
        RequestBonus.prototype.requestPoint = 1;

        /**
         * Creates a new RequestBonus instance using the specified properties.
         * @function create
         * @memberof CVP.RequestBonus
         * @static
         * @param {CVP.IRequestBonus=} [properties] Properties to set
         * @returns {CVP.RequestBonus} RequestBonus instance
         */
        RequestBonus.create = function create(properties) {
            return new RequestBonus(properties);
        };

        /**
         * Encodes the specified RequestBonus message. Does not implicitly {@link CVP.RequestBonus.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestBonus
         * @static
         * @param {CVP.IRequestBonus} message RequestBonus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBonus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.requestPoint != null && message.hasOwnProperty("requestPoint"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.requestPoint);
            return writer;
        };

        /**
         * Encodes the specified RequestBonus message, length delimited. Does not implicitly {@link CVP.RequestBonus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestBonus
         * @static
         * @param {CVP.IRequestBonus} message RequestBonus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBonus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestBonus message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestBonus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestBonus} RequestBonus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBonus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestBonus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.requestPoint = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestBonus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestBonus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestBonus} RequestBonus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBonus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestBonus message.
         * @function verify
         * @memberof CVP.RequestBonus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestBonus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.requestPoint != null && message.hasOwnProperty("requestPoint"))
                switch (message.requestPoint) {
                default:
                    return "requestPoint: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestBonus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestBonus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestBonus} RequestBonus
         */
        RequestBonus.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestBonus)
                return object;
            var message = new $root.CVP.RequestBonus();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestBonus.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            switch (object.requestPoint) {
            case "AD":
            case 1:
                message.requestPoint = 1;
                break;
            case "BONUS":
            case 2:
                message.requestPoint = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestBonus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestBonus
         * @static
         * @param {CVP.RequestBonus} message RequestBonus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestBonus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.requestPoint = options.enums === String ? "AD" : 1;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.requestPoint != null && message.hasOwnProperty("requestPoint"))
                object.requestPoint = options.enums === String ? $root.CVP.RequestPoint[message.requestPoint] : message.requestPoint;
            return object;
        };

        /**
         * Converts this RequestBonus to JSON.
         * @function toJSON
         * @memberof CVP.RequestBonus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestBonus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestBonus;
    })();

    CVP.RequestBonusResult = (function() {

        /**
         * Properties of a RequestBonusResult.
         * @memberof CVP
         * @interface IRequestBonusResult
         * @property {number|null} [coins] RequestBonusResult coins
         * @property {number|null} [nextCoins] RequestBonusResult nextCoins
         * @property {CVP.RequestPoint|null} [requestPoint] RequestBonusResult requestPoint
         */

        /**
         * Constructs a new RequestBonusResult.
         * @memberof CVP
         * @classdesc Represents a RequestBonusResult.
         * @implements IRequestBonusResult
         * @constructor
         * @param {CVP.IRequestBonusResult=} [properties] Properties to set
         */
        function RequestBonusResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestBonusResult coins.
         * @member {number} coins
         * @memberof CVP.RequestBonusResult
         * @instance
         */
        RequestBonusResult.prototype.coins = 0;

        /**
         * RequestBonusResult nextCoins.
         * @member {number} nextCoins
         * @memberof CVP.RequestBonusResult
         * @instance
         */
        RequestBonusResult.prototype.nextCoins = 0;

        /**
         * RequestBonusResult requestPoint.
         * @member {CVP.RequestPoint} requestPoint
         * @memberof CVP.RequestBonusResult
         * @instance
         */
        RequestBonusResult.prototype.requestPoint = 1;

        /**
         * Creates a new RequestBonusResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestBonusResult
         * @static
         * @param {CVP.IRequestBonusResult=} [properties] Properties to set
         * @returns {CVP.RequestBonusResult} RequestBonusResult instance
         */
        RequestBonusResult.create = function create(properties) {
            return new RequestBonusResult(properties);
        };

        /**
         * Encodes the specified RequestBonusResult message. Does not implicitly {@link CVP.RequestBonusResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestBonusResult
         * @static
         * @param {CVP.IRequestBonusResult} message RequestBonusResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBonusResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            if (message.nextCoins != null && message.hasOwnProperty("nextCoins"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.nextCoins);
            if (message.requestPoint != null && message.hasOwnProperty("requestPoint"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.requestPoint);
            return writer;
        };

        /**
         * Encodes the specified RequestBonusResult message, length delimited. Does not implicitly {@link CVP.RequestBonusResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestBonusResult
         * @static
         * @param {CVP.IRequestBonusResult} message RequestBonusResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBonusResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestBonusResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestBonusResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestBonusResult} RequestBonusResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBonusResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestBonusResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                case 2:
                    message.nextCoins = reader.double();
                    break;
                case 3:
                    message.requestPoint = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestBonusResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestBonusResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestBonusResult} RequestBonusResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBonusResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestBonusResult message.
         * @function verify
         * @memberof CVP.RequestBonusResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestBonusResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            if (message.nextCoins != null && message.hasOwnProperty("nextCoins"))
                if (typeof message.nextCoins !== "number")
                    return "nextCoins: number expected";
            if (message.requestPoint != null && message.hasOwnProperty("requestPoint"))
                switch (message.requestPoint) {
                default:
                    return "requestPoint: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestBonusResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestBonusResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestBonusResult} RequestBonusResult
         */
        RequestBonusResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestBonusResult)
                return object;
            var message = new $root.CVP.RequestBonusResult();
            if (object.coins != null)
                message.coins = Number(object.coins);
            if (object.nextCoins != null)
                message.nextCoins = Number(object.nextCoins);
            switch (object.requestPoint) {
            case "AD":
            case 1:
                message.requestPoint = 1;
                break;
            case "BONUS":
            case 2:
                message.requestPoint = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestBonusResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestBonusResult
         * @static
         * @param {CVP.RequestBonusResult} message RequestBonusResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestBonusResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.coins = 0;
                object.nextCoins = 0;
                object.requestPoint = options.enums === String ? "AD" : 1;
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            if (message.nextCoins != null && message.hasOwnProperty("nextCoins"))
                object.nextCoins = options.json && !isFinite(message.nextCoins) ? String(message.nextCoins) : message.nextCoins;
            if (message.requestPoint != null && message.hasOwnProperty("requestPoint"))
                object.requestPoint = options.enums === String ? $root.CVP.RequestPoint[message.requestPoint] : message.requestPoint;
            return object;
        };

        /**
         * Converts this RequestBonusResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestBonusResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestBonusResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestBonusResult;
    })();

    CVP.RequestGoldenWheel = (function() {

        /**
         * Properties of a RequestGoldenWheel.
         * @memberof CVP
         * @interface IRequestGoldenWheel
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestGoldenWheel commonParams
         */

        /**
         * Constructs a new RequestGoldenWheel.
         * @memberof CVP
         * @classdesc Represents a RequestGoldenWheel.
         * @implements IRequestGoldenWheel
         * @constructor
         * @param {CVP.IRequestGoldenWheel=} [properties] Properties to set
         */
        function RequestGoldenWheel(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGoldenWheel commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestGoldenWheel
         * @instance
         */
        RequestGoldenWheel.prototype.commonParams = null;

        /**
         * Creates a new RequestGoldenWheel instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGoldenWheel
         * @static
         * @param {CVP.IRequestGoldenWheel=} [properties] Properties to set
         * @returns {CVP.RequestGoldenWheel} RequestGoldenWheel instance
         */
        RequestGoldenWheel.create = function create(properties) {
            return new RequestGoldenWheel(properties);
        };

        /**
         * Encodes the specified RequestGoldenWheel message. Does not implicitly {@link CVP.RequestGoldenWheel.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGoldenWheel
         * @static
         * @param {CVP.IRequestGoldenWheel} message RequestGoldenWheel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGoldenWheel.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestGoldenWheel message, length delimited. Does not implicitly {@link CVP.RequestGoldenWheel.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGoldenWheel
         * @static
         * @param {CVP.IRequestGoldenWheel} message RequestGoldenWheel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGoldenWheel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGoldenWheel message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGoldenWheel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGoldenWheel} RequestGoldenWheel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGoldenWheel.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGoldenWheel();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGoldenWheel message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGoldenWheel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGoldenWheel} RequestGoldenWheel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGoldenWheel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGoldenWheel message.
         * @function verify
         * @memberof CVP.RequestGoldenWheel
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGoldenWheel.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestGoldenWheel message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGoldenWheel
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGoldenWheel} RequestGoldenWheel
         */
        RequestGoldenWheel.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGoldenWheel)
                return object;
            var message = new $root.CVP.RequestGoldenWheel();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestGoldenWheel.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestGoldenWheel message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGoldenWheel
         * @static
         * @param {CVP.RequestGoldenWheel} message RequestGoldenWheel
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGoldenWheel.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestGoldenWheel to JSON.
         * @function toJSON
         * @memberof CVP.RequestGoldenWheel
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGoldenWheel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGoldenWheel;
    })();

    CVP.RequestGoldenWheelResult = (function() {

        /**
         * Properties of a RequestGoldenWheelResult.
         * @memberof CVP
         * @interface IRequestGoldenWheelResult
         * @property {CVP.IGoldenWheelItem|null} [goldenwheelitem] RequestGoldenWheelResult goldenwheelitem
         * @property {Array.<number>|null} [rewardList] RequestGoldenWheelResult rewardList
         * @property {number|null} [addition] RequestGoldenWheelResult addition
         */

        /**
         * Constructs a new RequestGoldenWheelResult.
         * @memberof CVP
         * @classdesc Represents a RequestGoldenWheelResult.
         * @implements IRequestGoldenWheelResult
         * @constructor
         * @param {CVP.IRequestGoldenWheelResult=} [properties] Properties to set
         */
        function RequestGoldenWheelResult(properties) {
            this.rewardList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGoldenWheelResult goldenwheelitem.
         * @member {CVP.IGoldenWheelItem|null|undefined} goldenwheelitem
         * @memberof CVP.RequestGoldenWheelResult
         * @instance
         */
        RequestGoldenWheelResult.prototype.goldenwheelitem = null;

        /**
         * RequestGoldenWheelResult rewardList.
         * @member {Array.<number>} rewardList
         * @memberof CVP.RequestGoldenWheelResult
         * @instance
         */
        RequestGoldenWheelResult.prototype.rewardList = $util.emptyArray;

        /**
         * RequestGoldenWheelResult addition.
         * @member {number} addition
         * @memberof CVP.RequestGoldenWheelResult
         * @instance
         */
        RequestGoldenWheelResult.prototype.addition = 0;

        /**
         * Creates a new RequestGoldenWheelResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGoldenWheelResult
         * @static
         * @param {CVP.IRequestGoldenWheelResult=} [properties] Properties to set
         * @returns {CVP.RequestGoldenWheelResult} RequestGoldenWheelResult instance
         */
        RequestGoldenWheelResult.create = function create(properties) {
            return new RequestGoldenWheelResult(properties);
        };

        /**
         * Encodes the specified RequestGoldenWheelResult message. Does not implicitly {@link CVP.RequestGoldenWheelResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGoldenWheelResult
         * @static
         * @param {CVP.IRequestGoldenWheelResult} message RequestGoldenWheelResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGoldenWheelResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.goldenwheelitem != null && message.hasOwnProperty("goldenwheelitem"))
                $root.CVP.GoldenWheelItem.encode(message.goldenwheelitem, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.rewardList != null && message.rewardList.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.rewardList.length; ++i)
                    writer.double(message.rewardList[i]);
                writer.ldelim();
            }
            if (message.addition != null && message.hasOwnProperty("addition"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.addition);
            return writer;
        };

        /**
         * Encodes the specified RequestGoldenWheelResult message, length delimited. Does not implicitly {@link CVP.RequestGoldenWheelResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGoldenWheelResult
         * @static
         * @param {CVP.IRequestGoldenWheelResult} message RequestGoldenWheelResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGoldenWheelResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGoldenWheelResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGoldenWheelResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGoldenWheelResult} RequestGoldenWheelResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGoldenWheelResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGoldenWheelResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.goldenwheelitem = $root.CVP.GoldenWheelItem.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.rewardList && message.rewardList.length))
                        message.rewardList = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.rewardList.push(reader.double());
                    } else
                        message.rewardList.push(reader.double());
                    break;
                case 3:
                    message.addition = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGoldenWheelResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGoldenWheelResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGoldenWheelResult} RequestGoldenWheelResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGoldenWheelResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGoldenWheelResult message.
         * @function verify
         * @memberof CVP.RequestGoldenWheelResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGoldenWheelResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.goldenwheelitem != null && message.hasOwnProperty("goldenwheelitem")) {
                var error = $root.CVP.GoldenWheelItem.verify(message.goldenwheelitem);
                if (error)
                    return "goldenwheelitem." + error;
            }
            if (message.rewardList != null && message.hasOwnProperty("rewardList")) {
                if (!Array.isArray(message.rewardList))
                    return "rewardList: array expected";
                for (var i = 0; i < message.rewardList.length; ++i)
                    if (typeof message.rewardList[i] !== "number")
                        return "rewardList: number[] expected";
            }
            if (message.addition != null && message.hasOwnProperty("addition"))
                if (!$util.isInteger(message.addition))
                    return "addition: integer expected";
            return null;
        };

        /**
         * Creates a RequestGoldenWheelResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGoldenWheelResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGoldenWheelResult} RequestGoldenWheelResult
         */
        RequestGoldenWheelResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGoldenWheelResult)
                return object;
            var message = new $root.CVP.RequestGoldenWheelResult();
            if (object.goldenwheelitem != null) {
                if (typeof object.goldenwheelitem !== "object")
                    throw TypeError(".CVP.RequestGoldenWheelResult.goldenwheelitem: object expected");
                message.goldenwheelitem = $root.CVP.GoldenWheelItem.fromObject(object.goldenwheelitem);
            }
            if (object.rewardList) {
                if (!Array.isArray(object.rewardList))
                    throw TypeError(".CVP.RequestGoldenWheelResult.rewardList: array expected");
                message.rewardList = [];
                for (var i = 0; i < object.rewardList.length; ++i)
                    message.rewardList[i] = Number(object.rewardList[i]);
            }
            if (object.addition != null)
                message.addition = object.addition | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestGoldenWheelResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGoldenWheelResult
         * @static
         * @param {CVP.RequestGoldenWheelResult} message RequestGoldenWheelResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGoldenWheelResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.rewardList = [];
            if (options.defaults) {
                object.goldenwheelitem = null;
                object.addition = 0;
            }
            if (message.goldenwheelitem != null && message.hasOwnProperty("goldenwheelitem"))
                object.goldenwheelitem = $root.CVP.GoldenWheelItem.toObject(message.goldenwheelitem, options);
            if (message.rewardList && message.rewardList.length) {
                object.rewardList = [];
                for (var j = 0; j < message.rewardList.length; ++j)
                    object.rewardList[j] = options.json && !isFinite(message.rewardList[j]) ? String(message.rewardList[j]) : message.rewardList[j];
            }
            if (message.addition != null && message.hasOwnProperty("addition"))
                object.addition = message.addition;
            return object;
        };

        /**
         * Converts this RequestGoldenWheelResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestGoldenWheelResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGoldenWheelResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGoldenWheelResult;
    })();

    CVP.RequestGoldenWheelSpin = (function() {

        /**
         * Properties of a RequestGoldenWheelSpin.
         * @memberof CVP
         * @interface IRequestGoldenWheelSpin
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestGoldenWheelSpin commonParams
         */

        /**
         * Constructs a new RequestGoldenWheelSpin.
         * @memberof CVP
         * @classdesc Represents a RequestGoldenWheelSpin.
         * @implements IRequestGoldenWheelSpin
         * @constructor
         * @param {CVP.IRequestGoldenWheelSpin=} [properties] Properties to set
         */
        function RequestGoldenWheelSpin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGoldenWheelSpin commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestGoldenWheelSpin
         * @instance
         */
        RequestGoldenWheelSpin.prototype.commonParams = null;

        /**
         * Creates a new RequestGoldenWheelSpin instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGoldenWheelSpin
         * @static
         * @param {CVP.IRequestGoldenWheelSpin=} [properties] Properties to set
         * @returns {CVP.RequestGoldenWheelSpin} RequestGoldenWheelSpin instance
         */
        RequestGoldenWheelSpin.create = function create(properties) {
            return new RequestGoldenWheelSpin(properties);
        };

        /**
         * Encodes the specified RequestGoldenWheelSpin message. Does not implicitly {@link CVP.RequestGoldenWheelSpin.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGoldenWheelSpin
         * @static
         * @param {CVP.IRequestGoldenWheelSpin} message RequestGoldenWheelSpin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGoldenWheelSpin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestGoldenWheelSpin message, length delimited. Does not implicitly {@link CVP.RequestGoldenWheelSpin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGoldenWheelSpin
         * @static
         * @param {CVP.IRequestGoldenWheelSpin} message RequestGoldenWheelSpin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGoldenWheelSpin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGoldenWheelSpin message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGoldenWheelSpin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGoldenWheelSpin} RequestGoldenWheelSpin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGoldenWheelSpin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGoldenWheelSpin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGoldenWheelSpin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGoldenWheelSpin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGoldenWheelSpin} RequestGoldenWheelSpin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGoldenWheelSpin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGoldenWheelSpin message.
         * @function verify
         * @memberof CVP.RequestGoldenWheelSpin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGoldenWheelSpin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestGoldenWheelSpin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGoldenWheelSpin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGoldenWheelSpin} RequestGoldenWheelSpin
         */
        RequestGoldenWheelSpin.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGoldenWheelSpin)
                return object;
            var message = new $root.CVP.RequestGoldenWheelSpin();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestGoldenWheelSpin.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestGoldenWheelSpin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGoldenWheelSpin
         * @static
         * @param {CVP.RequestGoldenWheelSpin} message RequestGoldenWheelSpin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGoldenWheelSpin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestGoldenWheelSpin to JSON.
         * @function toJSON
         * @memberof CVP.RequestGoldenWheelSpin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGoldenWheelSpin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGoldenWheelSpin;
    })();

    CVP.RequestGoldenWheelSpinResult = (function() {

        /**
         * Properties of a RequestGoldenWheelSpinResult.
         * @memberof CVP
         * @interface IRequestGoldenWheelSpinResult
         * @property {number|null} [coins] RequestGoldenWheelSpinResult coins
         * @property {number|null} [level] RequestGoldenWheelSpinResult level
         */

        /**
         * Constructs a new RequestGoldenWheelSpinResult.
         * @memberof CVP
         * @classdesc Represents a RequestGoldenWheelSpinResult.
         * @implements IRequestGoldenWheelSpinResult
         * @constructor
         * @param {CVP.IRequestGoldenWheelSpinResult=} [properties] Properties to set
         */
        function RequestGoldenWheelSpinResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGoldenWheelSpinResult coins.
         * @member {number} coins
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @instance
         */
        RequestGoldenWheelSpinResult.prototype.coins = 0;

        /**
         * RequestGoldenWheelSpinResult level.
         * @member {number} level
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @instance
         */
        RequestGoldenWheelSpinResult.prototype.level = 0;

        /**
         * Creates a new RequestGoldenWheelSpinResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @static
         * @param {CVP.IRequestGoldenWheelSpinResult=} [properties] Properties to set
         * @returns {CVP.RequestGoldenWheelSpinResult} RequestGoldenWheelSpinResult instance
         */
        RequestGoldenWheelSpinResult.create = function create(properties) {
            return new RequestGoldenWheelSpinResult(properties);
        };

        /**
         * Encodes the specified RequestGoldenWheelSpinResult message. Does not implicitly {@link CVP.RequestGoldenWheelSpinResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @static
         * @param {CVP.IRequestGoldenWheelSpinResult} message RequestGoldenWheelSpinResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGoldenWheelSpinResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.level);
            return writer;
        };

        /**
         * Encodes the specified RequestGoldenWheelSpinResult message, length delimited. Does not implicitly {@link CVP.RequestGoldenWheelSpinResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @static
         * @param {CVP.IRequestGoldenWheelSpinResult} message RequestGoldenWheelSpinResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGoldenWheelSpinResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGoldenWheelSpinResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGoldenWheelSpinResult} RequestGoldenWheelSpinResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGoldenWheelSpinResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGoldenWheelSpinResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                case 2:
                    message.level = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGoldenWheelSpinResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGoldenWheelSpinResult} RequestGoldenWheelSpinResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGoldenWheelSpinResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGoldenWheelSpinResult message.
         * @function verify
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGoldenWheelSpinResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            return null;
        };

        /**
         * Creates a RequestGoldenWheelSpinResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGoldenWheelSpinResult} RequestGoldenWheelSpinResult
         */
        RequestGoldenWheelSpinResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGoldenWheelSpinResult)
                return object;
            var message = new $root.CVP.RequestGoldenWheelSpinResult();
            if (object.coins != null)
                message.coins = Number(object.coins);
            if (object.level != null)
                message.level = object.level | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestGoldenWheelSpinResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @static
         * @param {CVP.RequestGoldenWheelSpinResult} message RequestGoldenWheelSpinResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGoldenWheelSpinResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.coins = 0;
                object.level = 0;
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            return object;
        };

        /**
         * Converts this RequestGoldenWheelSpinResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestGoldenWheelSpinResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGoldenWheelSpinResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGoldenWheelSpinResult;
    })();

    CVP.MsgCommonParams = (function() {

        /**
         * Properties of a MsgCommonParams.
         * @memberof CVP
         * @interface IMsgCommonParams
         * @property {number|Long} sequentialId MsgCommonParams sequentialId
         */

        /**
         * Constructs a new MsgCommonParams.
         * @memberof CVP
         * @classdesc Represents a MsgCommonParams.
         * @implements IMsgCommonParams
         * @constructor
         * @param {CVP.IMsgCommonParams=} [properties] Properties to set
         */
        function MsgCommonParams(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MsgCommonParams sequentialId.
         * @member {number|Long} sequentialId
         * @memberof CVP.MsgCommonParams
         * @instance
         */
        MsgCommonParams.prototype.sequentialId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new MsgCommonParams instance using the specified properties.
         * @function create
         * @memberof CVP.MsgCommonParams
         * @static
         * @param {CVP.IMsgCommonParams=} [properties] Properties to set
         * @returns {CVP.MsgCommonParams} MsgCommonParams instance
         */
        MsgCommonParams.create = function create(properties) {
            return new MsgCommonParams(properties);
        };

        /**
         * Encodes the specified MsgCommonParams message. Does not implicitly {@link CVP.MsgCommonParams.verify|verify} messages.
         * @function encode
         * @memberof CVP.MsgCommonParams
         * @static
         * @param {CVP.IMsgCommonParams} message MsgCommonParams message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MsgCommonParams.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.sequentialId);
            return writer;
        };

        /**
         * Encodes the specified MsgCommonParams message, length delimited. Does not implicitly {@link CVP.MsgCommonParams.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.MsgCommonParams
         * @static
         * @param {CVP.IMsgCommonParams} message MsgCommonParams message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MsgCommonParams.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MsgCommonParams message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.MsgCommonParams
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.MsgCommonParams} MsgCommonParams
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MsgCommonParams.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.MsgCommonParams();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sequentialId = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("sequentialId"))
                throw $util.ProtocolError("missing required 'sequentialId'", { instance: message });
            return message;
        };

        /**
         * Decodes a MsgCommonParams message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.MsgCommonParams
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.MsgCommonParams} MsgCommonParams
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MsgCommonParams.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MsgCommonParams message.
         * @function verify
         * @memberof CVP.MsgCommonParams
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MsgCommonParams.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.sequentialId) && !(message.sequentialId && $util.isInteger(message.sequentialId.low) && $util.isInteger(message.sequentialId.high)))
                return "sequentialId: integer|Long expected";
            return null;
        };

        /**
         * Creates a MsgCommonParams message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.MsgCommonParams
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.MsgCommonParams} MsgCommonParams
         */
        MsgCommonParams.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.MsgCommonParams)
                return object;
            var message = new $root.CVP.MsgCommonParams();
            if (object.sequentialId != null)
                if ($util.Long)
                    (message.sequentialId = $util.Long.fromValue(object.sequentialId)).unsigned = false;
                else if (typeof object.sequentialId === "string")
                    message.sequentialId = parseInt(object.sequentialId, 10);
                else if (typeof object.sequentialId === "number")
                    message.sequentialId = object.sequentialId;
                else if (typeof object.sequentialId === "object")
                    message.sequentialId = new $util.LongBits(object.sequentialId.low >>> 0, object.sequentialId.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a MsgCommonParams message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.MsgCommonParams
         * @static
         * @param {CVP.MsgCommonParams} message MsgCommonParams
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MsgCommonParams.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.sequentialId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.sequentialId = options.longs === String ? "0" : 0;
            if (message.sequentialId != null && message.hasOwnProperty("sequentialId"))
                if (typeof message.sequentialId === "number")
                    object.sequentialId = options.longs === String ? String(message.sequentialId) : message.sequentialId;
                else
                    object.sequentialId = options.longs === String ? $util.Long.prototype.toString.call(message.sequentialId) : options.longs === Number ? new $util.LongBits(message.sequentialId.low >>> 0, message.sequentialId.high >>> 0).toNumber() : message.sequentialId;
            return object;
        };

        /**
         * Converts this MsgCommonParams to JSON.
         * @function toJSON
         * @memberof CVP.MsgCommonParams
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MsgCommonParams.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MsgCommonParams;
    })();

    /**
     * ItemType enum.
     * @name CVP.ItemType
     * @enum {string}
     * @property {number} SHOP_COIN_PACKAGE=1 SHOP_COIN_PACKAGE value
     * @property {number} PIG_SILVER=2 PIG_SILVER value
     * @property {number} PIG_GOLD=3 PIG_GOLD value
     * @property {number} PIG_DIAMOND=4 PIG_DIAMOND value
     * @property {number} SCRATCH_CARD_PACKAGE=5 SCRATCH_CARD_PACKAGE value
     * @property {number} DEAL_COIN_PACKAGE=6 DEAL_COIN_PACKAGE value
     * @property {number} AVATAR=7 AVATAR value
     * @property {number} VAULT_KEY_PACKAGE=8 VAULT_KEY_PACKAGE value
     * @property {number} DOUBLE_GAME=9 DOUBLE_GAME value
     * @property {number} WHEEL=10 WHEEL value
     * @property {number} MASTER_CLUB=11 MASTER_CLUB value
     * @property {number} REMOVE_AD=12 REMOVE_AD value
     */
    CVP.ItemType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "SHOP_COIN_PACKAGE"] = 1;
        values[valuesById[2] = "PIG_SILVER"] = 2;
        values[valuesById[3] = "PIG_GOLD"] = 3;
        values[valuesById[4] = "PIG_DIAMOND"] = 4;
        values[valuesById[5] = "SCRATCH_CARD_PACKAGE"] = 5;
        values[valuesById[6] = "DEAL_COIN_PACKAGE"] = 6;
        values[valuesById[7] = "AVATAR"] = 7;
        values[valuesById[8] = "VAULT_KEY_PACKAGE"] = 8;
        values[valuesById[9] = "DOUBLE_GAME"] = 9;
        values[valuesById[10] = "WHEEL"] = 10;
        values[valuesById[11] = "MASTER_CLUB"] = 11;
        values[valuesById[12] = "REMOVE_AD"] = 12;
        return values;
    })();

    /**
     * ValueType enum.
     * @name CVP.ValueType
     * @enum {string}
     * @property {number} COIN=0 COIN value
     * @property {number} DIAMOND=1 DIAMOND value
     * @property {number} VAULT_KEY=2 VAULT_KEY value
     * @property {number} SCRATCH_CARD=3 SCRATCH_CARD value
     * @property {number} MOMENTS=4 MOMENTS value
     * @property {number} VIP_EXP=5 VIP_EXP value
     * @property {number} MASTER_LICENCE=6 MASTER_LICENCE value
     */
    CVP.ValueType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "COIN"] = 0;
        values[valuesById[1] = "DIAMOND"] = 1;
        values[valuesById[2] = "VAULT_KEY"] = 2;
        values[valuesById[3] = "SCRATCH_CARD"] = 3;
        values[valuesById[4] = "MOMENTS"] = 4;
        values[valuesById[5] = "VIP_EXP"] = 5;
        values[valuesById[6] = "MASTER_LICENCE"] = 6;
        return values;
    })();

    CVP.ItemValueInfo = (function() {

        /**
         * Properties of an ItemValueInfo.
         * @memberof CVP
         * @interface IItemValueInfo
         * @property {CVP.ValueType|null} [valueType] ItemValueInfo valueType
         * @property {number|null} [finalValue] ItemValueInfo finalValue
         * @property {number|null} [originValue] ItemValueInfo originValue
         */

        /**
         * Constructs a new ItemValueInfo.
         * @memberof CVP
         * @classdesc Represents an ItemValueInfo.
         * @implements IItemValueInfo
         * @constructor
         * @param {CVP.IItemValueInfo=} [properties] Properties to set
         */
        function ItemValueInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemValueInfo valueType.
         * @member {CVP.ValueType} valueType
         * @memberof CVP.ItemValueInfo
         * @instance
         */
        ItemValueInfo.prototype.valueType = 0;

        /**
         * ItemValueInfo finalValue.
         * @member {number} finalValue
         * @memberof CVP.ItemValueInfo
         * @instance
         */
        ItemValueInfo.prototype.finalValue = 0;

        /**
         * ItemValueInfo originValue.
         * @member {number} originValue
         * @memberof CVP.ItemValueInfo
         * @instance
         */
        ItemValueInfo.prototype.originValue = 0;

        /**
         * Creates a new ItemValueInfo instance using the specified properties.
         * @function create
         * @memberof CVP.ItemValueInfo
         * @static
         * @param {CVP.IItemValueInfo=} [properties] Properties to set
         * @returns {CVP.ItemValueInfo} ItemValueInfo instance
         */
        ItemValueInfo.create = function create(properties) {
            return new ItemValueInfo(properties);
        };

        /**
         * Encodes the specified ItemValueInfo message. Does not implicitly {@link CVP.ItemValueInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.ItemValueInfo
         * @static
         * @param {CVP.IItemValueInfo} message ItemValueInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemValueInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.valueType != null && message.hasOwnProperty("valueType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.valueType);
            if (message.finalValue != null && message.hasOwnProperty("finalValue"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.finalValue);
            if (message.originValue != null && message.hasOwnProperty("originValue"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.originValue);
            return writer;
        };

        /**
         * Encodes the specified ItemValueInfo message, length delimited. Does not implicitly {@link CVP.ItemValueInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.ItemValueInfo
         * @static
         * @param {CVP.IItemValueInfo} message ItemValueInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemValueInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemValueInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.ItemValueInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.ItemValueInfo} ItemValueInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemValueInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.ItemValueInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.valueType = reader.int32();
                    break;
                case 2:
                    message.finalValue = reader.double();
                    break;
                case 3:
                    message.originValue = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemValueInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.ItemValueInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.ItemValueInfo} ItemValueInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemValueInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemValueInfo message.
         * @function verify
         * @memberof CVP.ItemValueInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemValueInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.valueType != null && message.hasOwnProperty("valueType"))
                switch (message.valueType) {
                default:
                    return "valueType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.finalValue != null && message.hasOwnProperty("finalValue"))
                if (typeof message.finalValue !== "number")
                    return "finalValue: number expected";
            if (message.originValue != null && message.hasOwnProperty("originValue"))
                if (typeof message.originValue !== "number")
                    return "originValue: number expected";
            return null;
        };

        /**
         * Creates an ItemValueInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.ItemValueInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.ItemValueInfo} ItemValueInfo
         */
        ItemValueInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.ItemValueInfo)
                return object;
            var message = new $root.CVP.ItemValueInfo();
            switch (object.valueType) {
            case "COIN":
            case 0:
                message.valueType = 0;
                break;
            case "DIAMOND":
            case 1:
                message.valueType = 1;
                break;
            case "VAULT_KEY":
            case 2:
                message.valueType = 2;
                break;
            case "SCRATCH_CARD":
            case 3:
                message.valueType = 3;
                break;
            case "MOMENTS":
            case 4:
                message.valueType = 4;
                break;
            case "VIP_EXP":
            case 5:
                message.valueType = 5;
                break;
            case "MASTER_LICENCE":
            case 6:
                message.valueType = 6;
                break;
            }
            if (object.finalValue != null)
                message.finalValue = Number(object.finalValue);
            if (object.originValue != null)
                message.originValue = Number(object.originValue);
            return message;
        };

        /**
         * Creates a plain object from an ItemValueInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.ItemValueInfo
         * @static
         * @param {CVP.ItemValueInfo} message ItemValueInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemValueInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.valueType = options.enums === String ? "COIN" : 0;
                object.finalValue = 0;
                object.originValue = 0;
            }
            if (message.valueType != null && message.hasOwnProperty("valueType"))
                object.valueType = options.enums === String ? $root.CVP.ValueType[message.valueType] : message.valueType;
            if (message.finalValue != null && message.hasOwnProperty("finalValue"))
                object.finalValue = options.json && !isFinite(message.finalValue) ? String(message.finalValue) : message.finalValue;
            if (message.originValue != null && message.hasOwnProperty("originValue"))
                object.originValue = options.json && !isFinite(message.originValue) ? String(message.originValue) : message.originValue;
            return object;
        };

        /**
         * Converts this ItemValueInfo to JSON.
         * @function toJSON
         * @memberof CVP.ItemValueInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemValueInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemValueInfo;
    })();

    CVP.ItemInfo = (function() {

        /**
         * Properties of an ItemInfo.
         * @memberof CVP
         * @interface IItemInfo
         * @property {CVP.ItemType|null} [itemType] ItemInfo itemType
         * @property {Array.<CVP.IItemValueInfo>|null} [valueInfoList] ItemInfo valueInfoList
         * @property {string|null} [itemId] ItemInfo itemId
         * @property {string|null} [finalSku] ItemInfo finalSku
         * @property {string|null} [originSku] ItemInfo originSku
         */

        /**
         * Constructs a new ItemInfo.
         * @memberof CVP
         * @classdesc Represents an ItemInfo.
         * @implements IItemInfo
         * @constructor
         * @param {CVP.IItemInfo=} [properties] Properties to set
         */
        function ItemInfo(properties) {
            this.valueInfoList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ItemInfo itemType.
         * @member {CVP.ItemType} itemType
         * @memberof CVP.ItemInfo
         * @instance
         */
        ItemInfo.prototype.itemType = 1;

        /**
         * ItemInfo valueInfoList.
         * @member {Array.<CVP.IItemValueInfo>} valueInfoList
         * @memberof CVP.ItemInfo
         * @instance
         */
        ItemInfo.prototype.valueInfoList = $util.emptyArray;

        /**
         * ItemInfo itemId.
         * @member {string} itemId
         * @memberof CVP.ItemInfo
         * @instance
         */
        ItemInfo.prototype.itemId = "";

        /**
         * ItemInfo finalSku.
         * @member {string} finalSku
         * @memberof CVP.ItemInfo
         * @instance
         */
        ItemInfo.prototype.finalSku = "";

        /**
         * ItemInfo originSku.
         * @member {string} originSku
         * @memberof CVP.ItemInfo
         * @instance
         */
        ItemInfo.prototype.originSku = "";

        /**
         * Creates a new ItemInfo instance using the specified properties.
         * @function create
         * @memberof CVP.ItemInfo
         * @static
         * @param {CVP.IItemInfo=} [properties] Properties to set
         * @returns {CVP.ItemInfo} ItemInfo instance
         */
        ItemInfo.create = function create(properties) {
            return new ItemInfo(properties);
        };

        /**
         * Encodes the specified ItemInfo message. Does not implicitly {@link CVP.ItemInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.ItemInfo
         * @static
         * @param {CVP.IItemInfo} message ItemInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemType != null && message.hasOwnProperty("itemType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.itemType);
            if (message.valueInfoList != null && message.valueInfoList.length)
                for (var i = 0; i < message.valueInfoList.length; ++i)
                    $root.CVP.ItemValueInfo.encode(message.valueInfoList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.itemId);
            if (message.finalSku != null && message.hasOwnProperty("finalSku"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.finalSku);
            if (message.originSku != null && message.hasOwnProperty("originSku"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.originSku);
            return writer;
        };

        /**
         * Encodes the specified ItemInfo message, length delimited. Does not implicitly {@link CVP.ItemInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.ItemInfo
         * @static
         * @param {CVP.IItemInfo} message ItemInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ItemInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ItemInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.ItemInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.ItemInfo} ItemInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.ItemInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemType = reader.int32();
                    break;
                case 2:
                    if (!(message.valueInfoList && message.valueInfoList.length))
                        message.valueInfoList = [];
                    message.valueInfoList.push($root.CVP.ItemValueInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.itemId = reader.string();
                    break;
                case 4:
                    message.finalSku = reader.string();
                    break;
                case 5:
                    message.originSku = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ItemInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.ItemInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.ItemInfo} ItemInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ItemInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ItemInfo message.
         * @function verify
         * @memberof CVP.ItemInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ItemInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemType != null && message.hasOwnProperty("itemType"))
                switch (message.itemType) {
                default:
                    return "itemType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    break;
                }
            if (message.valueInfoList != null && message.hasOwnProperty("valueInfoList")) {
                if (!Array.isArray(message.valueInfoList))
                    return "valueInfoList: array expected";
                for (var i = 0; i < message.valueInfoList.length; ++i) {
                    var error = $root.CVP.ItemValueInfo.verify(message.valueInfoList[i]);
                    if (error)
                        return "valueInfoList." + error;
                }
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isString(message.itemId))
                    return "itemId: string expected";
            if (message.finalSku != null && message.hasOwnProperty("finalSku"))
                if (!$util.isString(message.finalSku))
                    return "finalSku: string expected";
            if (message.originSku != null && message.hasOwnProperty("originSku"))
                if (!$util.isString(message.originSku))
                    return "originSku: string expected";
            return null;
        };

        /**
         * Creates an ItemInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.ItemInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.ItemInfo} ItemInfo
         */
        ItemInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.ItemInfo)
                return object;
            var message = new $root.CVP.ItemInfo();
            switch (object.itemType) {
            case "SHOP_COIN_PACKAGE":
            case 1:
                message.itemType = 1;
                break;
            case "PIG_SILVER":
            case 2:
                message.itemType = 2;
                break;
            case "PIG_GOLD":
            case 3:
                message.itemType = 3;
                break;
            case "PIG_DIAMOND":
            case 4:
                message.itemType = 4;
                break;
            case "SCRATCH_CARD_PACKAGE":
            case 5:
                message.itemType = 5;
                break;
            case "DEAL_COIN_PACKAGE":
            case 6:
                message.itemType = 6;
                break;
            case "AVATAR":
            case 7:
                message.itemType = 7;
                break;
            case "VAULT_KEY_PACKAGE":
            case 8:
                message.itemType = 8;
                break;
            case "DOUBLE_GAME":
            case 9:
                message.itemType = 9;
                break;
            case "WHEEL":
            case 10:
                message.itemType = 10;
                break;
            case "MASTER_CLUB":
            case 11:
                message.itemType = 11;
                break;
            case "REMOVE_AD":
            case 12:
                message.itemType = 12;
                break;
            }
            if (object.valueInfoList) {
                if (!Array.isArray(object.valueInfoList))
                    throw TypeError(".CVP.ItemInfo.valueInfoList: array expected");
                message.valueInfoList = [];
                for (var i = 0; i < object.valueInfoList.length; ++i) {
                    if (typeof object.valueInfoList[i] !== "object")
                        throw TypeError(".CVP.ItemInfo.valueInfoList: object expected");
                    message.valueInfoList[i] = $root.CVP.ItemValueInfo.fromObject(object.valueInfoList[i]);
                }
            }
            if (object.itemId != null)
                message.itemId = String(object.itemId);
            if (object.finalSku != null)
                message.finalSku = String(object.finalSku);
            if (object.originSku != null)
                message.originSku = String(object.originSku);
            return message;
        };

        /**
         * Creates a plain object from an ItemInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.ItemInfo
         * @static
         * @param {CVP.ItemInfo} message ItemInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ItemInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.valueInfoList = [];
            if (options.defaults) {
                object.itemType = options.enums === String ? "SHOP_COIN_PACKAGE" : 1;
                object.itemId = "";
                object.finalSku = "";
                object.originSku = "";
            }
            if (message.itemType != null && message.hasOwnProperty("itemType"))
                object.itemType = options.enums === String ? $root.CVP.ItemType[message.itemType] : message.itemType;
            if (message.valueInfoList && message.valueInfoList.length) {
                object.valueInfoList = [];
                for (var j = 0; j < message.valueInfoList.length; ++j)
                    object.valueInfoList[j] = $root.CVP.ItemValueInfo.toObject(message.valueInfoList[j], options);
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            if (message.finalSku != null && message.hasOwnProperty("finalSku"))
                object.finalSku = message.finalSku;
            if (message.originSku != null && message.hasOwnProperty("originSku"))
                object.originSku = message.originSku;
            return object;
        };

        /**
         * Converts this ItemInfo to JSON.
         * @function toJSON
         * @memberof CVP.ItemInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ItemInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ItemInfo;
    })();

    CVP.ShopItem = (function() {

        /**
         * Properties of a ShopItem.
         * @memberof CVP
         * @interface IShopItem
         * @property {CVP.IItemInfo|null} [itemInfo] ShopItem itemInfo
         * @property {boolean|null} [isBestValue] ShopItem isBestValue
         * @property {boolean|null} [isMostPopular] ShopItem isMostPopular
         * @property {number|null} [freePercent] ShopItem freePercent
         * @property {boolean|null} [isFirstPay] ShopItem isFirstPay
         * @property {string|null} [leftTime] ShopItem leftTime
         * @property {CVP.IItemInfo|null} [firstItemInfo] ShopItem firstItemInfo
         */

        /**
         * Constructs a new ShopItem.
         * @memberof CVP
         * @classdesc Represents a ShopItem.
         * @implements IShopItem
         * @constructor
         * @param {CVP.IShopItem=} [properties] Properties to set
         */
        function ShopItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShopItem itemInfo.
         * @member {CVP.IItemInfo|null|undefined} itemInfo
         * @memberof CVP.ShopItem
         * @instance
         */
        ShopItem.prototype.itemInfo = null;

        /**
         * ShopItem isBestValue.
         * @member {boolean} isBestValue
         * @memberof CVP.ShopItem
         * @instance
         */
        ShopItem.prototype.isBestValue = false;

        /**
         * ShopItem isMostPopular.
         * @member {boolean} isMostPopular
         * @memberof CVP.ShopItem
         * @instance
         */
        ShopItem.prototype.isMostPopular = false;

        /**
         * ShopItem freePercent.
         * @member {number} freePercent
         * @memberof CVP.ShopItem
         * @instance
         */
        ShopItem.prototype.freePercent = 0;

        /**
         * ShopItem isFirstPay.
         * @member {boolean} isFirstPay
         * @memberof CVP.ShopItem
         * @instance
         */
        ShopItem.prototype.isFirstPay = false;

        /**
         * ShopItem leftTime.
         * @member {string} leftTime
         * @memberof CVP.ShopItem
         * @instance
         */
        ShopItem.prototype.leftTime = "";

        /**
         * ShopItem firstItemInfo.
         * @member {CVP.IItemInfo|null|undefined} firstItemInfo
         * @memberof CVP.ShopItem
         * @instance
         */
        ShopItem.prototype.firstItemInfo = null;

        /**
         * Creates a new ShopItem instance using the specified properties.
         * @function create
         * @memberof CVP.ShopItem
         * @static
         * @param {CVP.IShopItem=} [properties] Properties to set
         * @returns {CVP.ShopItem} ShopItem instance
         */
        ShopItem.create = function create(properties) {
            return new ShopItem(properties);
        };

        /**
         * Encodes the specified ShopItem message. Does not implicitly {@link CVP.ShopItem.verify|verify} messages.
         * @function encode
         * @memberof CVP.ShopItem
         * @static
         * @param {CVP.IShopItem} message ShopItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShopItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo"))
                $root.CVP.ItemInfo.encode(message.itemInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.isBestValue != null && message.hasOwnProperty("isBestValue"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isBestValue);
            if (message.isMostPopular != null && message.hasOwnProperty("isMostPopular"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isMostPopular);
            if (message.freePercent != null && message.hasOwnProperty("freePercent"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.freePercent);
            if (message.isFirstPay != null && message.hasOwnProperty("isFirstPay"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isFirstPay);
            if (message.leftTime != null && message.hasOwnProperty("leftTime"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leftTime);
            if (message.firstItemInfo != null && message.hasOwnProperty("firstItemInfo"))
                $root.CVP.ItemInfo.encode(message.firstItemInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShopItem message, length delimited. Does not implicitly {@link CVP.ShopItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.ShopItem
         * @static
         * @param {CVP.IShopItem} message ShopItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShopItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShopItem message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.ShopItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.ShopItem} ShopItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShopItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.ShopItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemInfo = $root.CVP.ItemInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.isBestValue = reader.bool();
                    break;
                case 3:
                    message.isMostPopular = reader.bool();
                    break;
                case 4:
                    message.freePercent = reader.int32();
                    break;
                case 5:
                    message.isFirstPay = reader.bool();
                    break;
                case 6:
                    message.leftTime = reader.string();
                    break;
                case 7:
                    message.firstItemInfo = $root.CVP.ItemInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShopItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.ShopItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.ShopItem} ShopItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShopItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShopItem message.
         * @function verify
         * @memberof CVP.ShopItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShopItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo")) {
                var error = $root.CVP.ItemInfo.verify(message.itemInfo);
                if (error)
                    return "itemInfo." + error;
            }
            if (message.isBestValue != null && message.hasOwnProperty("isBestValue"))
                if (typeof message.isBestValue !== "boolean")
                    return "isBestValue: boolean expected";
            if (message.isMostPopular != null && message.hasOwnProperty("isMostPopular"))
                if (typeof message.isMostPopular !== "boolean")
                    return "isMostPopular: boolean expected";
            if (message.freePercent != null && message.hasOwnProperty("freePercent"))
                if (!$util.isInteger(message.freePercent))
                    return "freePercent: integer expected";
            if (message.isFirstPay != null && message.hasOwnProperty("isFirstPay"))
                if (typeof message.isFirstPay !== "boolean")
                    return "isFirstPay: boolean expected";
            if (message.leftTime != null && message.hasOwnProperty("leftTime"))
                if (!$util.isString(message.leftTime))
                    return "leftTime: string expected";
            if (message.firstItemInfo != null && message.hasOwnProperty("firstItemInfo")) {
                var error = $root.CVP.ItemInfo.verify(message.firstItemInfo);
                if (error)
                    return "firstItemInfo." + error;
            }
            return null;
        };

        /**
         * Creates a ShopItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.ShopItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.ShopItem} ShopItem
         */
        ShopItem.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.ShopItem)
                return object;
            var message = new $root.CVP.ShopItem();
            if (object.itemInfo != null) {
                if (typeof object.itemInfo !== "object")
                    throw TypeError(".CVP.ShopItem.itemInfo: object expected");
                message.itemInfo = $root.CVP.ItemInfo.fromObject(object.itemInfo);
            }
            if (object.isBestValue != null)
                message.isBestValue = Boolean(object.isBestValue);
            if (object.isMostPopular != null)
                message.isMostPopular = Boolean(object.isMostPopular);
            if (object.freePercent != null)
                message.freePercent = object.freePercent | 0;
            if (object.isFirstPay != null)
                message.isFirstPay = Boolean(object.isFirstPay);
            if (object.leftTime != null)
                message.leftTime = String(object.leftTime);
            if (object.firstItemInfo != null) {
                if (typeof object.firstItemInfo !== "object")
                    throw TypeError(".CVP.ShopItem.firstItemInfo: object expected");
                message.firstItemInfo = $root.CVP.ItemInfo.fromObject(object.firstItemInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShopItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.ShopItem
         * @static
         * @param {CVP.ShopItem} message ShopItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShopItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemInfo = null;
                object.isBestValue = false;
                object.isMostPopular = false;
                object.freePercent = 0;
                object.isFirstPay = false;
                object.leftTime = "";
                object.firstItemInfo = null;
            }
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo"))
                object.itemInfo = $root.CVP.ItemInfo.toObject(message.itemInfo, options);
            if (message.isBestValue != null && message.hasOwnProperty("isBestValue"))
                object.isBestValue = message.isBestValue;
            if (message.isMostPopular != null && message.hasOwnProperty("isMostPopular"))
                object.isMostPopular = message.isMostPopular;
            if (message.freePercent != null && message.hasOwnProperty("freePercent"))
                object.freePercent = message.freePercent;
            if (message.isFirstPay != null && message.hasOwnProperty("isFirstPay"))
                object.isFirstPay = message.isFirstPay;
            if (message.leftTime != null && message.hasOwnProperty("leftTime"))
                object.leftTime = message.leftTime;
            if (message.firstItemInfo != null && message.hasOwnProperty("firstItemInfo"))
                object.firstItemInfo = $root.CVP.ItemInfo.toObject(message.firstItemInfo, options);
            return object;
        };

        /**
         * Converts this ShopItem to JSON.
         * @function toJSON
         * @memberof CVP.ShopItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShopItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShopItem;
    })();

    CVP.PigItem = (function() {

        /**
         * Properties of a PigItem.
         * @memberof CVP
         * @interface IPigItem
         * @property {CVP.IItemInfo|null} [itemInfo] PigItem itemInfo
         * @property {boolean|null} [isFull] PigItem isFull
         */

        /**
         * Constructs a new PigItem.
         * @memberof CVP
         * @classdesc Represents a PigItem.
         * @implements IPigItem
         * @constructor
         * @param {CVP.IPigItem=} [properties] Properties to set
         */
        function PigItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PigItem itemInfo.
         * @member {CVP.IItemInfo|null|undefined} itemInfo
         * @memberof CVP.PigItem
         * @instance
         */
        PigItem.prototype.itemInfo = null;

        /**
         * PigItem isFull.
         * @member {boolean} isFull
         * @memberof CVP.PigItem
         * @instance
         */
        PigItem.prototype.isFull = false;

        /**
         * Creates a new PigItem instance using the specified properties.
         * @function create
         * @memberof CVP.PigItem
         * @static
         * @param {CVP.IPigItem=} [properties] Properties to set
         * @returns {CVP.PigItem} PigItem instance
         */
        PigItem.create = function create(properties) {
            return new PigItem(properties);
        };

        /**
         * Encodes the specified PigItem message. Does not implicitly {@link CVP.PigItem.verify|verify} messages.
         * @function encode
         * @memberof CVP.PigItem
         * @static
         * @param {CVP.IPigItem} message PigItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PigItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo"))
                $root.CVP.ItemInfo.encode(message.itemInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.isFull != null && message.hasOwnProperty("isFull"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isFull);
            return writer;
        };

        /**
         * Encodes the specified PigItem message, length delimited. Does not implicitly {@link CVP.PigItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.PigItem
         * @static
         * @param {CVP.IPigItem} message PigItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PigItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PigItem message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.PigItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.PigItem} PigItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PigItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.PigItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemInfo = $root.CVP.ItemInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.isFull = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PigItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.PigItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.PigItem} PigItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PigItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PigItem message.
         * @function verify
         * @memberof CVP.PigItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PigItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo")) {
                var error = $root.CVP.ItemInfo.verify(message.itemInfo);
                if (error)
                    return "itemInfo." + error;
            }
            if (message.isFull != null && message.hasOwnProperty("isFull"))
                if (typeof message.isFull !== "boolean")
                    return "isFull: boolean expected";
            return null;
        };

        /**
         * Creates a PigItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.PigItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.PigItem} PigItem
         */
        PigItem.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.PigItem)
                return object;
            var message = new $root.CVP.PigItem();
            if (object.itemInfo != null) {
                if (typeof object.itemInfo !== "object")
                    throw TypeError(".CVP.PigItem.itemInfo: object expected");
                message.itemInfo = $root.CVP.ItemInfo.fromObject(object.itemInfo);
            }
            if (object.isFull != null)
                message.isFull = Boolean(object.isFull);
            return message;
        };

        /**
         * Creates a plain object from a PigItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.PigItem
         * @static
         * @param {CVP.PigItem} message PigItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PigItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.itemInfo = null;
                object.isFull = false;
            }
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo"))
                object.itemInfo = $root.CVP.ItemInfo.toObject(message.itemInfo, options);
            if (message.isFull != null && message.hasOwnProperty("isFull"))
                object.isFull = message.isFull;
            return object;
        };

        /**
         * Converts this PigItem to JSON.
         * @function toJSON
         * @memberof CVP.PigItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PigItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PigItem;
    })();

    CVP.KeyItem = (function() {

        /**
         * Properties of a KeyItem.
         * @memberof CVP
         * @interface IKeyItem
         * @property {CVP.IItemInfo|null} [itemInfo] KeyItem itemInfo
         */

        /**
         * Constructs a new KeyItem.
         * @memberof CVP
         * @classdesc Represents a KeyItem.
         * @implements IKeyItem
         * @constructor
         * @param {CVP.IKeyItem=} [properties] Properties to set
         */
        function KeyItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * KeyItem itemInfo.
         * @member {CVP.IItemInfo|null|undefined} itemInfo
         * @memberof CVP.KeyItem
         * @instance
         */
        KeyItem.prototype.itemInfo = null;

        /**
         * Creates a new KeyItem instance using the specified properties.
         * @function create
         * @memberof CVP.KeyItem
         * @static
         * @param {CVP.IKeyItem=} [properties] Properties to set
         * @returns {CVP.KeyItem} KeyItem instance
         */
        KeyItem.create = function create(properties) {
            return new KeyItem(properties);
        };

        /**
         * Encodes the specified KeyItem message. Does not implicitly {@link CVP.KeyItem.verify|verify} messages.
         * @function encode
         * @memberof CVP.KeyItem
         * @static
         * @param {CVP.IKeyItem} message KeyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KeyItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo"))
                $root.CVP.ItemInfo.encode(message.itemInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified KeyItem message, length delimited. Does not implicitly {@link CVP.KeyItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.KeyItem
         * @static
         * @param {CVP.IKeyItem} message KeyItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KeyItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a KeyItem message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.KeyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.KeyItem} KeyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KeyItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.KeyItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemInfo = $root.CVP.ItemInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a KeyItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.KeyItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.KeyItem} KeyItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KeyItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a KeyItem message.
         * @function verify
         * @memberof CVP.KeyItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        KeyItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo")) {
                var error = $root.CVP.ItemInfo.verify(message.itemInfo);
                if (error)
                    return "itemInfo." + error;
            }
            return null;
        };

        /**
         * Creates a KeyItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.KeyItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.KeyItem} KeyItem
         */
        KeyItem.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.KeyItem)
                return object;
            var message = new $root.CVP.KeyItem();
            if (object.itemInfo != null) {
                if (typeof object.itemInfo !== "object")
                    throw TypeError(".CVP.KeyItem.itemInfo: object expected");
                message.itemInfo = $root.CVP.ItemInfo.fromObject(object.itemInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a KeyItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.KeyItem
         * @static
         * @param {CVP.KeyItem} message KeyItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        KeyItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.itemInfo = null;
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo"))
                object.itemInfo = $root.CVP.ItemInfo.toObject(message.itemInfo, options);
            return object;
        };

        /**
         * Converts this KeyItem to JSON.
         * @function toJSON
         * @memberof CVP.KeyItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        KeyItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return KeyItem;
    })();

    CVP.GoldenWheelItem = (function() {

        /**
         * Properties of a GoldenWheelItem.
         * @memberof CVP
         * @interface IGoldenWheelItem
         * @property {number|null} [vipLevel] GoldenWheelItem vipLevel
         * @property {CVP.IItemInfo|null} [itemInfo] GoldenWheelItem itemInfo
         */

        /**
         * Constructs a new GoldenWheelItem.
         * @memberof CVP
         * @classdesc Represents a GoldenWheelItem.
         * @implements IGoldenWheelItem
         * @constructor
         * @param {CVP.IGoldenWheelItem=} [properties] Properties to set
         */
        function GoldenWheelItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GoldenWheelItem vipLevel.
         * @member {number} vipLevel
         * @memberof CVP.GoldenWheelItem
         * @instance
         */
        GoldenWheelItem.prototype.vipLevel = 0;

        /**
         * GoldenWheelItem itemInfo.
         * @member {CVP.IItemInfo|null|undefined} itemInfo
         * @memberof CVP.GoldenWheelItem
         * @instance
         */
        GoldenWheelItem.prototype.itemInfo = null;

        /**
         * Creates a new GoldenWheelItem instance using the specified properties.
         * @function create
         * @memberof CVP.GoldenWheelItem
         * @static
         * @param {CVP.IGoldenWheelItem=} [properties] Properties to set
         * @returns {CVP.GoldenWheelItem} GoldenWheelItem instance
         */
        GoldenWheelItem.create = function create(properties) {
            return new GoldenWheelItem(properties);
        };

        /**
         * Encodes the specified GoldenWheelItem message. Does not implicitly {@link CVP.GoldenWheelItem.verify|verify} messages.
         * @function encode
         * @memberof CVP.GoldenWheelItem
         * @static
         * @param {CVP.IGoldenWheelItem} message GoldenWheelItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GoldenWheelItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.vipLevel);
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo"))
                $root.CVP.ItemInfo.encode(message.itemInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GoldenWheelItem message, length delimited. Does not implicitly {@link CVP.GoldenWheelItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.GoldenWheelItem
         * @static
         * @param {CVP.IGoldenWheelItem} message GoldenWheelItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GoldenWheelItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GoldenWheelItem message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.GoldenWheelItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.GoldenWheelItem} GoldenWheelItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GoldenWheelItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.GoldenWheelItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.vipLevel = reader.int32();
                    break;
                case 2:
                    message.itemInfo = $root.CVP.ItemInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GoldenWheelItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.GoldenWheelItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.GoldenWheelItem} GoldenWheelItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GoldenWheelItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GoldenWheelItem message.
         * @function verify
         * @memberof CVP.GoldenWheelItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GoldenWheelItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                if (!$util.isInteger(message.vipLevel))
                    return "vipLevel: integer expected";
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo")) {
                var error = $root.CVP.ItemInfo.verify(message.itemInfo);
                if (error)
                    return "itemInfo." + error;
            }
            return null;
        };

        /**
         * Creates a GoldenWheelItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.GoldenWheelItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.GoldenWheelItem} GoldenWheelItem
         */
        GoldenWheelItem.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.GoldenWheelItem)
                return object;
            var message = new $root.CVP.GoldenWheelItem();
            if (object.vipLevel != null)
                message.vipLevel = object.vipLevel | 0;
            if (object.itemInfo != null) {
                if (typeof object.itemInfo !== "object")
                    throw TypeError(".CVP.GoldenWheelItem.itemInfo: object expected");
                message.itemInfo = $root.CVP.ItemInfo.fromObject(object.itemInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a GoldenWheelItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.GoldenWheelItem
         * @static
         * @param {CVP.GoldenWheelItem} message GoldenWheelItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GoldenWheelItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.vipLevel = 0;
                object.itemInfo = null;
            }
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                object.vipLevel = message.vipLevel;
            if (message.itemInfo != null && message.hasOwnProperty("itemInfo"))
                object.itemInfo = $root.CVP.ItemInfo.toObject(message.itemInfo, options);
            return object;
        };

        /**
         * Converts this GoldenWheelItem to JSON.
         * @function toJSON
         * @memberof CVP.GoldenWheelItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GoldenWheelItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GoldenWheelItem;
    })();

    /**
     * RewardType enum.
     * @name CVP.RewardType
     * @enum {string}
     * @property {number} COINS=1 COINS value
     * @property {number} CARD=2 CARD value
     */
    CVP.RewardType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "COINS"] = 1;
        values[valuesById[2] = "CARD"] = 2;
        return values;
    })();

    CVP.RequestAchievement = (function() {

        /**
         * Properties of a RequestAchievement.
         * @memberof CVP
         * @interface IRequestAchievement
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestAchievement commonParams
         */

        /**
         * Constructs a new RequestAchievement.
         * @memberof CVP
         * @classdesc Represents a RequestAchievement.
         * @implements IRequestAchievement
         * @constructor
         * @param {CVP.IRequestAchievement=} [properties] Properties to set
         */
        function RequestAchievement(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestAchievement commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestAchievement
         * @instance
         */
        RequestAchievement.prototype.commonParams = null;

        /**
         * Creates a new RequestAchievement instance using the specified properties.
         * @function create
         * @memberof CVP.RequestAchievement
         * @static
         * @param {CVP.IRequestAchievement=} [properties] Properties to set
         * @returns {CVP.RequestAchievement} RequestAchievement instance
         */
        RequestAchievement.create = function create(properties) {
            return new RequestAchievement(properties);
        };

        /**
         * Encodes the specified RequestAchievement message. Does not implicitly {@link CVP.RequestAchievement.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestAchievement
         * @static
         * @param {CVP.IRequestAchievement} message RequestAchievement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAchievement.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestAchievement message, length delimited. Does not implicitly {@link CVP.RequestAchievement.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestAchievement
         * @static
         * @param {CVP.IRequestAchievement} message RequestAchievement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAchievement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestAchievement message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestAchievement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestAchievement} RequestAchievement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAchievement.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestAchievement();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestAchievement message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestAchievement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestAchievement} RequestAchievement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAchievement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestAchievement message.
         * @function verify
         * @memberof CVP.RequestAchievement
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestAchievement.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestAchievement message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestAchievement
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestAchievement} RequestAchievement
         */
        RequestAchievement.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestAchievement)
                return object;
            var message = new $root.CVP.RequestAchievement();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestAchievement.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestAchievement message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestAchievement
         * @static
         * @param {CVP.RequestAchievement} message RequestAchievement
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestAchievement.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestAchievement to JSON.
         * @function toJSON
         * @memberof CVP.RequestAchievement
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestAchievement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestAchievement;
    })();

    CVP.RequestAchievementResult = (function() {

        /**
         * Properties of a RequestAchievementResult.
         * @memberof CVP
         * @interface IRequestAchievementResult
         * @property {number|null} [AchievementPoints] RequestAchievementResult AchievementPoints
         * @property {Array.<CVP.IAchievementInfo>|null} [AchievementList] RequestAchievementResult AchievementList
         */

        /**
         * Constructs a new RequestAchievementResult.
         * @memberof CVP
         * @classdesc Represents a RequestAchievementResult.
         * @implements IRequestAchievementResult
         * @constructor
         * @param {CVP.IRequestAchievementResult=} [properties] Properties to set
         */
        function RequestAchievementResult(properties) {
            this.AchievementList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestAchievementResult AchievementPoints.
         * @member {number} AchievementPoints
         * @memberof CVP.RequestAchievementResult
         * @instance
         */
        RequestAchievementResult.prototype.AchievementPoints = 0;

        /**
         * RequestAchievementResult AchievementList.
         * @member {Array.<CVP.IAchievementInfo>} AchievementList
         * @memberof CVP.RequestAchievementResult
         * @instance
         */
        RequestAchievementResult.prototype.AchievementList = $util.emptyArray;

        /**
         * Creates a new RequestAchievementResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestAchievementResult
         * @static
         * @param {CVP.IRequestAchievementResult=} [properties] Properties to set
         * @returns {CVP.RequestAchievementResult} RequestAchievementResult instance
         */
        RequestAchievementResult.create = function create(properties) {
            return new RequestAchievementResult(properties);
        };

        /**
         * Encodes the specified RequestAchievementResult message. Does not implicitly {@link CVP.RequestAchievementResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestAchievementResult
         * @static
         * @param {CVP.IRequestAchievementResult} message RequestAchievementResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAchievementResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.AchievementPoints != null && message.hasOwnProperty("AchievementPoints"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.AchievementPoints);
            if (message.AchievementList != null && message.AchievementList.length)
                for (var i = 0; i < message.AchievementList.length; ++i)
                    $root.CVP.AchievementInfo.encode(message.AchievementList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestAchievementResult message, length delimited. Does not implicitly {@link CVP.RequestAchievementResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestAchievementResult
         * @static
         * @param {CVP.IRequestAchievementResult} message RequestAchievementResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAchievementResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestAchievementResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestAchievementResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestAchievementResult} RequestAchievementResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAchievementResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestAchievementResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.AchievementPoints = reader.int32();
                    break;
                case 2:
                    if (!(message.AchievementList && message.AchievementList.length))
                        message.AchievementList = [];
                    message.AchievementList.push($root.CVP.AchievementInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestAchievementResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestAchievementResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestAchievementResult} RequestAchievementResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAchievementResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestAchievementResult message.
         * @function verify
         * @memberof CVP.RequestAchievementResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestAchievementResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.AchievementPoints != null && message.hasOwnProperty("AchievementPoints"))
                if (!$util.isInteger(message.AchievementPoints))
                    return "AchievementPoints: integer expected";
            if (message.AchievementList != null && message.hasOwnProperty("AchievementList")) {
                if (!Array.isArray(message.AchievementList))
                    return "AchievementList: array expected";
                for (var i = 0; i < message.AchievementList.length; ++i) {
                    var error = $root.CVP.AchievementInfo.verify(message.AchievementList[i]);
                    if (error)
                        return "AchievementList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestAchievementResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestAchievementResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestAchievementResult} RequestAchievementResult
         */
        RequestAchievementResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestAchievementResult)
                return object;
            var message = new $root.CVP.RequestAchievementResult();
            if (object.AchievementPoints != null)
                message.AchievementPoints = object.AchievementPoints | 0;
            if (object.AchievementList) {
                if (!Array.isArray(object.AchievementList))
                    throw TypeError(".CVP.RequestAchievementResult.AchievementList: array expected");
                message.AchievementList = [];
                for (var i = 0; i < object.AchievementList.length; ++i) {
                    if (typeof object.AchievementList[i] !== "object")
                        throw TypeError(".CVP.RequestAchievementResult.AchievementList: object expected");
                    message.AchievementList[i] = $root.CVP.AchievementInfo.fromObject(object.AchievementList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestAchievementResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestAchievementResult
         * @static
         * @param {CVP.RequestAchievementResult} message RequestAchievementResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestAchievementResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.AchievementList = [];
            if (options.defaults)
                object.AchievementPoints = 0;
            if (message.AchievementPoints != null && message.hasOwnProperty("AchievementPoints"))
                object.AchievementPoints = message.AchievementPoints;
            if (message.AchievementList && message.AchievementList.length) {
                object.AchievementList = [];
                for (var j = 0; j < message.AchievementList.length; ++j)
                    object.AchievementList[j] = $root.CVP.AchievementInfo.toObject(message.AchievementList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestAchievementResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestAchievementResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestAchievementResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestAchievementResult;
    })();

    CVP.AchievementInfo = (function() {

        /**
         * Properties of an AchievementInfo.
         * @memberof CVP
         * @interface IAchievementInfo
         * @property {number|null} [achievementId] AchievementInfo achievementId
         * @property {string|null} [title] AchievementInfo title
         * @property {string|null} [description] AchievementInfo description
         * @property {number|null} [achievementPoints] AchievementInfo achievementPoints
         * @property {CVP.IAchievementReward|null} [achievementReward] AchievementInfo achievementReward
         * @property {number|null} [nowProgress] AchievementInfo nowProgress
         * @property {number|null} [progress] AchievementInfo progress
         */

        /**
         * Constructs a new AchievementInfo.
         * @memberof CVP
         * @classdesc Represents an AchievementInfo.
         * @implements IAchievementInfo
         * @constructor
         * @param {CVP.IAchievementInfo=} [properties] Properties to set
         */
        function AchievementInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AchievementInfo achievementId.
         * @member {number} achievementId
         * @memberof CVP.AchievementInfo
         * @instance
         */
        AchievementInfo.prototype.achievementId = 0;

        /**
         * AchievementInfo title.
         * @member {string} title
         * @memberof CVP.AchievementInfo
         * @instance
         */
        AchievementInfo.prototype.title = "";

        /**
         * AchievementInfo description.
         * @member {string} description
         * @memberof CVP.AchievementInfo
         * @instance
         */
        AchievementInfo.prototype.description = "";

        /**
         * AchievementInfo achievementPoints.
         * @member {number} achievementPoints
         * @memberof CVP.AchievementInfo
         * @instance
         */
        AchievementInfo.prototype.achievementPoints = 0;

        /**
         * AchievementInfo achievementReward.
         * @member {CVP.IAchievementReward|null|undefined} achievementReward
         * @memberof CVP.AchievementInfo
         * @instance
         */
        AchievementInfo.prototype.achievementReward = null;

        /**
         * AchievementInfo nowProgress.
         * @member {number} nowProgress
         * @memberof CVP.AchievementInfo
         * @instance
         */
        AchievementInfo.prototype.nowProgress = 0;

        /**
         * AchievementInfo progress.
         * @member {number} progress
         * @memberof CVP.AchievementInfo
         * @instance
         */
        AchievementInfo.prototype.progress = 0;

        /**
         * Creates a new AchievementInfo instance using the specified properties.
         * @function create
         * @memberof CVP.AchievementInfo
         * @static
         * @param {CVP.IAchievementInfo=} [properties] Properties to set
         * @returns {CVP.AchievementInfo} AchievementInfo instance
         */
        AchievementInfo.create = function create(properties) {
            return new AchievementInfo(properties);
        };

        /**
         * Encodes the specified AchievementInfo message. Does not implicitly {@link CVP.AchievementInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.AchievementInfo
         * @static
         * @param {CVP.IAchievementInfo} message AchievementInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AchievementInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.achievementId != null && message.hasOwnProperty("achievementId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.achievementId);
            if (message.title != null && message.hasOwnProperty("title"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.title);
            if (message.description != null && message.hasOwnProperty("description"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
            if (message.achievementPoints != null && message.hasOwnProperty("achievementPoints"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.achievementPoints);
            if (message.achievementReward != null && message.hasOwnProperty("achievementReward"))
                $root.CVP.AchievementReward.encode(message.achievementReward, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.nowProgress != null && message.hasOwnProperty("nowProgress"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.nowProgress);
            if (message.progress != null && message.hasOwnProperty("progress"))
                writer.uint32(/* id 7, wireType 1 =*/57).double(message.progress);
            return writer;
        };

        /**
         * Encodes the specified AchievementInfo message, length delimited. Does not implicitly {@link CVP.AchievementInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.AchievementInfo
         * @static
         * @param {CVP.IAchievementInfo} message AchievementInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AchievementInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AchievementInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.AchievementInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.AchievementInfo} AchievementInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AchievementInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.AchievementInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.achievementId = reader.int32();
                    break;
                case 2:
                    message.title = reader.string();
                    break;
                case 3:
                    message.description = reader.string();
                    break;
                case 4:
                    message.achievementPoints = reader.int32();
                    break;
                case 5:
                    message.achievementReward = $root.CVP.AchievementReward.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.nowProgress = reader.double();
                    break;
                case 7:
                    message.progress = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AchievementInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.AchievementInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.AchievementInfo} AchievementInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AchievementInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AchievementInfo message.
         * @function verify
         * @memberof CVP.AchievementInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AchievementInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.achievementId != null && message.hasOwnProperty("achievementId"))
                if (!$util.isInteger(message.achievementId))
                    return "achievementId: integer expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.description != null && message.hasOwnProperty("description"))
                if (!$util.isString(message.description))
                    return "description: string expected";
            if (message.achievementPoints != null && message.hasOwnProperty("achievementPoints"))
                if (!$util.isInteger(message.achievementPoints))
                    return "achievementPoints: integer expected";
            if (message.achievementReward != null && message.hasOwnProperty("achievementReward")) {
                var error = $root.CVP.AchievementReward.verify(message.achievementReward);
                if (error)
                    return "achievementReward." + error;
            }
            if (message.nowProgress != null && message.hasOwnProperty("nowProgress"))
                if (typeof message.nowProgress !== "number")
                    return "nowProgress: number expected";
            if (message.progress != null && message.hasOwnProperty("progress"))
                if (typeof message.progress !== "number")
                    return "progress: number expected";
            return null;
        };

        /**
         * Creates an AchievementInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.AchievementInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.AchievementInfo} AchievementInfo
         */
        AchievementInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.AchievementInfo)
                return object;
            var message = new $root.CVP.AchievementInfo();
            if (object.achievementId != null)
                message.achievementId = object.achievementId | 0;
            if (object.title != null)
                message.title = String(object.title);
            if (object.description != null)
                message.description = String(object.description);
            if (object.achievementPoints != null)
                message.achievementPoints = object.achievementPoints | 0;
            if (object.achievementReward != null) {
                if (typeof object.achievementReward !== "object")
                    throw TypeError(".CVP.AchievementInfo.achievementReward: object expected");
                message.achievementReward = $root.CVP.AchievementReward.fromObject(object.achievementReward);
            }
            if (object.nowProgress != null)
                message.nowProgress = Number(object.nowProgress);
            if (object.progress != null)
                message.progress = Number(object.progress);
            return message;
        };

        /**
         * Creates a plain object from an AchievementInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.AchievementInfo
         * @static
         * @param {CVP.AchievementInfo} message AchievementInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AchievementInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.achievementId = 0;
                object.title = "";
                object.description = "";
                object.achievementPoints = 0;
                object.achievementReward = null;
                object.nowProgress = 0;
                object.progress = 0;
            }
            if (message.achievementId != null && message.hasOwnProperty("achievementId"))
                object.achievementId = message.achievementId;
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.description != null && message.hasOwnProperty("description"))
                object.description = message.description;
            if (message.achievementPoints != null && message.hasOwnProperty("achievementPoints"))
                object.achievementPoints = message.achievementPoints;
            if (message.achievementReward != null && message.hasOwnProperty("achievementReward"))
                object.achievementReward = $root.CVP.AchievementReward.toObject(message.achievementReward, options);
            if (message.nowProgress != null && message.hasOwnProperty("nowProgress"))
                object.nowProgress = options.json && !isFinite(message.nowProgress) ? String(message.nowProgress) : message.nowProgress;
            if (message.progress != null && message.hasOwnProperty("progress"))
                object.progress = options.json && !isFinite(message.progress) ? String(message.progress) : message.progress;
            return object;
        };

        /**
         * Converts this AchievementInfo to JSON.
         * @function toJSON
         * @memberof CVP.AchievementInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AchievementInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AchievementInfo;
    })();

    CVP.RequestFinishAchievement = (function() {

        /**
         * Properties of a RequestFinishAchievement.
         * @memberof CVP
         * @interface IRequestFinishAchievement
         * @property {number|null} [achievementId] RequestFinishAchievement achievementId
         */

        /**
         * Constructs a new RequestFinishAchievement.
         * @memberof CVP
         * @classdesc Represents a RequestFinishAchievement.
         * @implements IRequestFinishAchievement
         * @constructor
         * @param {CVP.IRequestFinishAchievement=} [properties] Properties to set
         */
        function RequestFinishAchievement(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestFinishAchievement achievementId.
         * @member {number} achievementId
         * @memberof CVP.RequestFinishAchievement
         * @instance
         */
        RequestFinishAchievement.prototype.achievementId = 0;

        /**
         * Creates a new RequestFinishAchievement instance using the specified properties.
         * @function create
         * @memberof CVP.RequestFinishAchievement
         * @static
         * @param {CVP.IRequestFinishAchievement=} [properties] Properties to set
         * @returns {CVP.RequestFinishAchievement} RequestFinishAchievement instance
         */
        RequestFinishAchievement.create = function create(properties) {
            return new RequestFinishAchievement(properties);
        };

        /**
         * Encodes the specified RequestFinishAchievement message. Does not implicitly {@link CVP.RequestFinishAchievement.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestFinishAchievement
         * @static
         * @param {CVP.IRequestFinishAchievement} message RequestFinishAchievement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFinishAchievement.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.achievementId != null && message.hasOwnProperty("achievementId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.achievementId);
            return writer;
        };

        /**
         * Encodes the specified RequestFinishAchievement message, length delimited. Does not implicitly {@link CVP.RequestFinishAchievement.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestFinishAchievement
         * @static
         * @param {CVP.IRequestFinishAchievement} message RequestFinishAchievement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFinishAchievement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestFinishAchievement message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestFinishAchievement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestFinishAchievement} RequestFinishAchievement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFinishAchievement.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestFinishAchievement();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.achievementId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestFinishAchievement message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestFinishAchievement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestFinishAchievement} RequestFinishAchievement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFinishAchievement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestFinishAchievement message.
         * @function verify
         * @memberof CVP.RequestFinishAchievement
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestFinishAchievement.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.achievementId != null && message.hasOwnProperty("achievementId"))
                if (!$util.isInteger(message.achievementId))
                    return "achievementId: integer expected";
            return null;
        };

        /**
         * Creates a RequestFinishAchievement message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestFinishAchievement
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestFinishAchievement} RequestFinishAchievement
         */
        RequestFinishAchievement.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestFinishAchievement)
                return object;
            var message = new $root.CVP.RequestFinishAchievement();
            if (object.achievementId != null)
                message.achievementId = object.achievementId | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestFinishAchievement message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestFinishAchievement
         * @static
         * @param {CVP.RequestFinishAchievement} message RequestFinishAchievement
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestFinishAchievement.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.achievementId = 0;
            if (message.achievementId != null && message.hasOwnProperty("achievementId"))
                object.achievementId = message.achievementId;
            return object;
        };

        /**
         * Converts this RequestFinishAchievement to JSON.
         * @function toJSON
         * @memberof CVP.RequestFinishAchievement
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestFinishAchievement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestFinishAchievement;
    })();

    CVP.RequestFinishAchievementResult = (function() {

        /**
         * Properties of a RequestFinishAchievementResult.
         * @memberof CVP
         * @interface IRequestFinishAchievementResult
         * @property {CVP.IAchievementInfo|null} [achievement] RequestFinishAchievementResult achievement
         * @property {CVP.IAchievementReward|null} [achievementReward] RequestFinishAchievementResult achievementReward
         * @property {number|null} [finishAchievementNumber] RequestFinishAchievementResult finishAchievementNumber
         */

        /**
         * Constructs a new RequestFinishAchievementResult.
         * @memberof CVP
         * @classdesc Represents a RequestFinishAchievementResult.
         * @implements IRequestFinishAchievementResult
         * @constructor
         * @param {CVP.IRequestFinishAchievementResult=} [properties] Properties to set
         */
        function RequestFinishAchievementResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestFinishAchievementResult achievement.
         * @member {CVP.IAchievementInfo|null|undefined} achievement
         * @memberof CVP.RequestFinishAchievementResult
         * @instance
         */
        RequestFinishAchievementResult.prototype.achievement = null;

        /**
         * RequestFinishAchievementResult achievementReward.
         * @member {CVP.IAchievementReward|null|undefined} achievementReward
         * @memberof CVP.RequestFinishAchievementResult
         * @instance
         */
        RequestFinishAchievementResult.prototype.achievementReward = null;

        /**
         * RequestFinishAchievementResult finishAchievementNumber.
         * @member {number} finishAchievementNumber
         * @memberof CVP.RequestFinishAchievementResult
         * @instance
         */
        RequestFinishAchievementResult.prototype.finishAchievementNumber = 0;

        /**
         * Creates a new RequestFinishAchievementResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestFinishAchievementResult
         * @static
         * @param {CVP.IRequestFinishAchievementResult=} [properties] Properties to set
         * @returns {CVP.RequestFinishAchievementResult} RequestFinishAchievementResult instance
         */
        RequestFinishAchievementResult.create = function create(properties) {
            return new RequestFinishAchievementResult(properties);
        };

        /**
         * Encodes the specified RequestFinishAchievementResult message. Does not implicitly {@link CVP.RequestFinishAchievementResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestFinishAchievementResult
         * @static
         * @param {CVP.IRequestFinishAchievementResult} message RequestFinishAchievementResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFinishAchievementResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.achievement != null && message.hasOwnProperty("achievement"))
                $root.CVP.AchievementInfo.encode(message.achievement, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.achievementReward != null && message.hasOwnProperty("achievementReward"))
                $root.CVP.AchievementReward.encode(message.achievementReward, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.finishAchievementNumber != null && message.hasOwnProperty("finishAchievementNumber"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.finishAchievementNumber);
            return writer;
        };

        /**
         * Encodes the specified RequestFinishAchievementResult message, length delimited. Does not implicitly {@link CVP.RequestFinishAchievementResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestFinishAchievementResult
         * @static
         * @param {CVP.IRequestFinishAchievementResult} message RequestFinishAchievementResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFinishAchievementResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestFinishAchievementResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestFinishAchievementResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestFinishAchievementResult} RequestFinishAchievementResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFinishAchievementResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestFinishAchievementResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.achievement = $root.CVP.AchievementInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.achievementReward = $root.CVP.AchievementReward.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.finishAchievementNumber = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestFinishAchievementResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestFinishAchievementResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestFinishAchievementResult} RequestFinishAchievementResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFinishAchievementResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestFinishAchievementResult message.
         * @function verify
         * @memberof CVP.RequestFinishAchievementResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestFinishAchievementResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.achievement != null && message.hasOwnProperty("achievement")) {
                var error = $root.CVP.AchievementInfo.verify(message.achievement);
                if (error)
                    return "achievement." + error;
            }
            if (message.achievementReward != null && message.hasOwnProperty("achievementReward")) {
                var error = $root.CVP.AchievementReward.verify(message.achievementReward);
                if (error)
                    return "achievementReward." + error;
            }
            if (message.finishAchievementNumber != null && message.hasOwnProperty("finishAchievementNumber"))
                if (!$util.isInteger(message.finishAchievementNumber))
                    return "finishAchievementNumber: integer expected";
            return null;
        };

        /**
         * Creates a RequestFinishAchievementResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestFinishAchievementResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestFinishAchievementResult} RequestFinishAchievementResult
         */
        RequestFinishAchievementResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestFinishAchievementResult)
                return object;
            var message = new $root.CVP.RequestFinishAchievementResult();
            if (object.achievement != null) {
                if (typeof object.achievement !== "object")
                    throw TypeError(".CVP.RequestFinishAchievementResult.achievement: object expected");
                message.achievement = $root.CVP.AchievementInfo.fromObject(object.achievement);
            }
            if (object.achievementReward != null) {
                if (typeof object.achievementReward !== "object")
                    throw TypeError(".CVP.RequestFinishAchievementResult.achievementReward: object expected");
                message.achievementReward = $root.CVP.AchievementReward.fromObject(object.achievementReward);
            }
            if (object.finishAchievementNumber != null)
                message.finishAchievementNumber = object.finishAchievementNumber | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestFinishAchievementResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestFinishAchievementResult
         * @static
         * @param {CVP.RequestFinishAchievementResult} message RequestFinishAchievementResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestFinishAchievementResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.achievement = null;
                object.achievementReward = null;
                object.finishAchievementNumber = 0;
            }
            if (message.achievement != null && message.hasOwnProperty("achievement"))
                object.achievement = $root.CVP.AchievementInfo.toObject(message.achievement, options);
            if (message.achievementReward != null && message.hasOwnProperty("achievementReward"))
                object.achievementReward = $root.CVP.AchievementReward.toObject(message.achievementReward, options);
            if (message.finishAchievementNumber != null && message.hasOwnProperty("finishAchievementNumber"))
                object.finishAchievementNumber = message.finishAchievementNumber;
            return object;
        };

        /**
         * Converts this RequestFinishAchievementResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestFinishAchievementResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestFinishAchievementResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestFinishAchievementResult;
    })();

    CVP.AchievementReward = (function() {

        /**
         * Properties of an AchievementReward.
         * @memberof CVP
         * @interface IAchievementReward
         * @property {CVP.RewardType|null} [rewardType] AchievementReward rewardType
         * @property {number|null} [rewardNum] AchievementReward rewardNum
         * @property {number|null} [achievementPoints] AchievementReward achievementPoints
         */

        /**
         * Constructs a new AchievementReward.
         * @memberof CVP
         * @classdesc Represents an AchievementReward.
         * @implements IAchievementReward
         * @constructor
         * @param {CVP.IAchievementReward=} [properties] Properties to set
         */
        function AchievementReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AchievementReward rewardType.
         * @member {CVP.RewardType} rewardType
         * @memberof CVP.AchievementReward
         * @instance
         */
        AchievementReward.prototype.rewardType = 1;

        /**
         * AchievementReward rewardNum.
         * @member {number} rewardNum
         * @memberof CVP.AchievementReward
         * @instance
         */
        AchievementReward.prototype.rewardNum = 0;

        /**
         * AchievementReward achievementPoints.
         * @member {number} achievementPoints
         * @memberof CVP.AchievementReward
         * @instance
         */
        AchievementReward.prototype.achievementPoints = 0;

        /**
         * Creates a new AchievementReward instance using the specified properties.
         * @function create
         * @memberof CVP.AchievementReward
         * @static
         * @param {CVP.IAchievementReward=} [properties] Properties to set
         * @returns {CVP.AchievementReward} AchievementReward instance
         */
        AchievementReward.create = function create(properties) {
            return new AchievementReward(properties);
        };

        /**
         * Encodes the specified AchievementReward message. Does not implicitly {@link CVP.AchievementReward.verify|verify} messages.
         * @function encode
         * @memberof CVP.AchievementReward
         * @static
         * @param {CVP.IAchievementReward} message AchievementReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AchievementReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rewardType);
            if (message.rewardNum != null && message.hasOwnProperty("rewardNum"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.rewardNum);
            if (message.achievementPoints != null && message.hasOwnProperty("achievementPoints"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.achievementPoints);
            return writer;
        };

        /**
         * Encodes the specified AchievementReward message, length delimited. Does not implicitly {@link CVP.AchievementReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.AchievementReward
         * @static
         * @param {CVP.IAchievementReward} message AchievementReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AchievementReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AchievementReward message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.AchievementReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.AchievementReward} AchievementReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AchievementReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.AchievementReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rewardType = reader.int32();
                    break;
                case 2:
                    message.rewardNum = reader.double();
                    break;
                case 3:
                    message.achievementPoints = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AchievementReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.AchievementReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.AchievementReward} AchievementReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AchievementReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AchievementReward message.
         * @function verify
         * @memberof CVP.AchievementReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AchievementReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                switch (message.rewardType) {
                default:
                    return "rewardType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.rewardNum != null && message.hasOwnProperty("rewardNum"))
                if (typeof message.rewardNum !== "number")
                    return "rewardNum: number expected";
            if (message.achievementPoints != null && message.hasOwnProperty("achievementPoints"))
                if (!$util.isInteger(message.achievementPoints))
                    return "achievementPoints: integer expected";
            return null;
        };

        /**
         * Creates an AchievementReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.AchievementReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.AchievementReward} AchievementReward
         */
        AchievementReward.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.AchievementReward)
                return object;
            var message = new $root.CVP.AchievementReward();
            switch (object.rewardType) {
            case "COINS":
            case 1:
                message.rewardType = 1;
                break;
            case "CARD":
            case 2:
                message.rewardType = 2;
                break;
            }
            if (object.rewardNum != null)
                message.rewardNum = Number(object.rewardNum);
            if (object.achievementPoints != null)
                message.achievementPoints = object.achievementPoints | 0;
            return message;
        };

        /**
         * Creates a plain object from an AchievementReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.AchievementReward
         * @static
         * @param {CVP.AchievementReward} message AchievementReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AchievementReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.rewardType = options.enums === String ? "COINS" : 1;
                object.rewardNum = 0;
                object.achievementPoints = 0;
            }
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                object.rewardType = options.enums === String ? $root.CVP.RewardType[message.rewardType] : message.rewardType;
            if (message.rewardNum != null && message.hasOwnProperty("rewardNum"))
                object.rewardNum = options.json && !isFinite(message.rewardNum) ? String(message.rewardNum) : message.rewardNum;
            if (message.achievementPoints != null && message.hasOwnProperty("achievementPoints"))
                object.achievementPoints = message.achievementPoints;
            return object;
        };

        /**
         * Converts this AchievementReward to JSON.
         * @function toJSON
         * @memberof CVP.AchievementReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AchievementReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AchievementReward;
    })();

    CVP.RequestMission = (function() {

        /**
         * Properties of a RequestMission.
         * @memberof CVP
         * @interface IRequestMission
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestMission commonParams
         */

        /**
         * Constructs a new RequestMission.
         * @memberof CVP
         * @classdesc Represents a RequestMission.
         * @implements IRequestMission
         * @constructor
         * @param {CVP.IRequestMission=} [properties] Properties to set
         */
        function RequestMission(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestMission commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestMission
         * @instance
         */
        RequestMission.prototype.commonParams = null;

        /**
         * Creates a new RequestMission instance using the specified properties.
         * @function create
         * @memberof CVP.RequestMission
         * @static
         * @param {CVP.IRequestMission=} [properties] Properties to set
         * @returns {CVP.RequestMission} RequestMission instance
         */
        RequestMission.create = function create(properties) {
            return new RequestMission(properties);
        };

        /**
         * Encodes the specified RequestMission message. Does not implicitly {@link CVP.RequestMission.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestMission
         * @static
         * @param {CVP.IRequestMission} message RequestMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestMission.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestMission message, length delimited. Does not implicitly {@link CVP.RequestMission.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestMission
         * @static
         * @param {CVP.IRequestMission} message RequestMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestMission.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestMission message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestMission} RequestMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestMission.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestMission();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestMission message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestMission} RequestMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestMission.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestMission message.
         * @function verify
         * @memberof CVP.RequestMission
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestMission.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestMission message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestMission
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestMission} RequestMission
         */
        RequestMission.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestMission)
                return object;
            var message = new $root.CVP.RequestMission();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestMission.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestMission message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestMission
         * @static
         * @param {CVP.RequestMission} message RequestMission
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestMission.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestMission to JSON.
         * @function toJSON
         * @memberof CVP.RequestMission
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestMission.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestMission;
    })();

    CVP.RequestMissionResult = (function() {

        /**
         * Properties of a RequestMissionResult.
         * @memberof CVP
         * @interface IRequestMissionResult
         * @property {Array.<CVP.IMissionInfo>|null} [missionList] RequestMissionResult missionList
         * @property {Array.<CVP.IMissionWaitInfo>|null} [missionWaitInfo] RequestMissionResult missionWaitInfo
         * @property {boolean|null} [freeChance] RequestMissionResult freeChance
         */

        /**
         * Constructs a new RequestMissionResult.
         * @memberof CVP
         * @classdesc Represents a RequestMissionResult.
         * @implements IRequestMissionResult
         * @constructor
         * @param {CVP.IRequestMissionResult=} [properties] Properties to set
         */
        function RequestMissionResult(properties) {
            this.missionList = [];
            this.missionWaitInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestMissionResult missionList.
         * @member {Array.<CVP.IMissionInfo>} missionList
         * @memberof CVP.RequestMissionResult
         * @instance
         */
        RequestMissionResult.prototype.missionList = $util.emptyArray;

        /**
         * RequestMissionResult missionWaitInfo.
         * @member {Array.<CVP.IMissionWaitInfo>} missionWaitInfo
         * @memberof CVP.RequestMissionResult
         * @instance
         */
        RequestMissionResult.prototype.missionWaitInfo = $util.emptyArray;

        /**
         * RequestMissionResult freeChance.
         * @member {boolean} freeChance
         * @memberof CVP.RequestMissionResult
         * @instance
         */
        RequestMissionResult.prototype.freeChance = false;

        /**
         * Creates a new RequestMissionResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestMissionResult
         * @static
         * @param {CVP.IRequestMissionResult=} [properties] Properties to set
         * @returns {CVP.RequestMissionResult} RequestMissionResult instance
         */
        RequestMissionResult.create = function create(properties) {
            return new RequestMissionResult(properties);
        };

        /**
         * Encodes the specified RequestMissionResult message. Does not implicitly {@link CVP.RequestMissionResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestMissionResult
         * @static
         * @param {CVP.IRequestMissionResult} message RequestMissionResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestMissionResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.missionList != null && message.missionList.length)
                for (var i = 0; i < message.missionList.length; ++i)
                    $root.CVP.MissionInfo.encode(message.missionList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.missionWaitInfo != null && message.missionWaitInfo.length)
                for (var i = 0; i < message.missionWaitInfo.length; ++i)
                    $root.CVP.MissionWaitInfo.encode(message.missionWaitInfo[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.freeChance != null && message.hasOwnProperty("freeChance"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.freeChance);
            return writer;
        };

        /**
         * Encodes the specified RequestMissionResult message, length delimited. Does not implicitly {@link CVP.RequestMissionResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestMissionResult
         * @static
         * @param {CVP.IRequestMissionResult} message RequestMissionResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestMissionResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestMissionResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestMissionResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestMissionResult} RequestMissionResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestMissionResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestMissionResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.missionList && message.missionList.length))
                        message.missionList = [];
                    message.missionList.push($root.CVP.MissionInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.missionWaitInfo && message.missionWaitInfo.length))
                        message.missionWaitInfo = [];
                    message.missionWaitInfo.push($root.CVP.MissionWaitInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.freeChance = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestMissionResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestMissionResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestMissionResult} RequestMissionResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestMissionResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestMissionResult message.
         * @function verify
         * @memberof CVP.RequestMissionResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestMissionResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.missionList != null && message.hasOwnProperty("missionList")) {
                if (!Array.isArray(message.missionList))
                    return "missionList: array expected";
                for (var i = 0; i < message.missionList.length; ++i) {
                    var error = $root.CVP.MissionInfo.verify(message.missionList[i]);
                    if (error)
                        return "missionList." + error;
                }
            }
            if (message.missionWaitInfo != null && message.hasOwnProperty("missionWaitInfo")) {
                if (!Array.isArray(message.missionWaitInfo))
                    return "missionWaitInfo: array expected";
                for (var i = 0; i < message.missionWaitInfo.length; ++i) {
                    var error = $root.CVP.MissionWaitInfo.verify(message.missionWaitInfo[i]);
                    if (error)
                        return "missionWaitInfo." + error;
                }
            }
            if (message.freeChance != null && message.hasOwnProperty("freeChance"))
                if (typeof message.freeChance !== "boolean")
                    return "freeChance: boolean expected";
            return null;
        };

        /**
         * Creates a RequestMissionResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestMissionResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestMissionResult} RequestMissionResult
         */
        RequestMissionResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestMissionResult)
                return object;
            var message = new $root.CVP.RequestMissionResult();
            if (object.missionList) {
                if (!Array.isArray(object.missionList))
                    throw TypeError(".CVP.RequestMissionResult.missionList: array expected");
                message.missionList = [];
                for (var i = 0; i < object.missionList.length; ++i) {
                    if (typeof object.missionList[i] !== "object")
                        throw TypeError(".CVP.RequestMissionResult.missionList: object expected");
                    message.missionList[i] = $root.CVP.MissionInfo.fromObject(object.missionList[i]);
                }
            }
            if (object.missionWaitInfo) {
                if (!Array.isArray(object.missionWaitInfo))
                    throw TypeError(".CVP.RequestMissionResult.missionWaitInfo: array expected");
                message.missionWaitInfo = [];
                for (var i = 0; i < object.missionWaitInfo.length; ++i) {
                    if (typeof object.missionWaitInfo[i] !== "object")
                        throw TypeError(".CVP.RequestMissionResult.missionWaitInfo: object expected");
                    message.missionWaitInfo[i] = $root.CVP.MissionWaitInfo.fromObject(object.missionWaitInfo[i]);
                }
            }
            if (object.freeChance != null)
                message.freeChance = Boolean(object.freeChance);
            return message;
        };

        /**
         * Creates a plain object from a RequestMissionResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestMissionResult
         * @static
         * @param {CVP.RequestMissionResult} message RequestMissionResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestMissionResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.missionList = [];
                object.missionWaitInfo = [];
            }
            if (options.defaults)
                object.freeChance = false;
            if (message.missionList && message.missionList.length) {
                object.missionList = [];
                for (var j = 0; j < message.missionList.length; ++j)
                    object.missionList[j] = $root.CVP.MissionInfo.toObject(message.missionList[j], options);
            }
            if (message.missionWaitInfo && message.missionWaitInfo.length) {
                object.missionWaitInfo = [];
                for (var j = 0; j < message.missionWaitInfo.length; ++j)
                    object.missionWaitInfo[j] = $root.CVP.MissionWaitInfo.toObject(message.missionWaitInfo[j], options);
            }
            if (message.freeChance != null && message.hasOwnProperty("freeChance"))
                object.freeChance = message.freeChance;
            return object;
        };

        /**
         * Converts this RequestMissionResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestMissionResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestMissionResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestMissionResult;
    })();

    CVP.MissionInfo = (function() {

        /**
         * Properties of a MissionInfo.
         * @memberof CVP
         * @interface IMissionInfo
         * @property {string|null} [title] MissionInfo title
         * @property {string|null} [description] MissionInfo description
         * @property {number|null} [coins] MissionInfo coins
         * @property {number|null} [nowProgress] MissionInfo nowProgress
         * @property {number|null} [progress] MissionInfo progress
         * @property {number|null} [missionId] MissionInfo missionId
         * @property {number|null} [missionType] MissionInfo missionType
         */

        /**
         * Constructs a new MissionInfo.
         * @memberof CVP
         * @classdesc Represents a MissionInfo.
         * @implements IMissionInfo
         * @constructor
         * @param {CVP.IMissionInfo=} [properties] Properties to set
         */
        function MissionInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MissionInfo title.
         * @member {string} title
         * @memberof CVP.MissionInfo
         * @instance
         */
        MissionInfo.prototype.title = "";

        /**
         * MissionInfo description.
         * @member {string} description
         * @memberof CVP.MissionInfo
         * @instance
         */
        MissionInfo.prototype.description = "";

        /**
         * MissionInfo coins.
         * @member {number} coins
         * @memberof CVP.MissionInfo
         * @instance
         */
        MissionInfo.prototype.coins = 0;

        /**
         * MissionInfo nowProgress.
         * @member {number} nowProgress
         * @memberof CVP.MissionInfo
         * @instance
         */
        MissionInfo.prototype.nowProgress = 0;

        /**
         * MissionInfo progress.
         * @member {number} progress
         * @memberof CVP.MissionInfo
         * @instance
         */
        MissionInfo.prototype.progress = 0;

        /**
         * MissionInfo missionId.
         * @member {number} missionId
         * @memberof CVP.MissionInfo
         * @instance
         */
        MissionInfo.prototype.missionId = 0;

        /**
         * MissionInfo missionType.
         * @member {number} missionType
         * @memberof CVP.MissionInfo
         * @instance
         */
        MissionInfo.prototype.missionType = 0;

        /**
         * Creates a new MissionInfo instance using the specified properties.
         * @function create
         * @memberof CVP.MissionInfo
         * @static
         * @param {CVP.IMissionInfo=} [properties] Properties to set
         * @returns {CVP.MissionInfo} MissionInfo instance
         */
        MissionInfo.create = function create(properties) {
            return new MissionInfo(properties);
        };

        /**
         * Encodes the specified MissionInfo message. Does not implicitly {@link CVP.MissionInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.MissionInfo
         * @static
         * @param {CVP.IMissionInfo} message MissionInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.title != null && message.hasOwnProperty("title"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
            if (message.description != null && message.hasOwnProperty("description"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.coins);
            if (message.nowProgress != null && message.hasOwnProperty("nowProgress"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.nowProgress);
            if (message.progress != null && message.hasOwnProperty("progress"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.progress);
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.missionId);
            if (message.missionType != null && message.hasOwnProperty("missionType"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.missionType);
            return writer;
        };

        /**
         * Encodes the specified MissionInfo message, length delimited. Does not implicitly {@link CVP.MissionInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.MissionInfo
         * @static
         * @param {CVP.IMissionInfo} message MissionInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MissionInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.MissionInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.MissionInfo} MissionInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.MissionInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.coins = reader.double();
                    break;
                case 4:
                    message.nowProgress = reader.double();
                    break;
                case 5:
                    message.progress = reader.double();
                    break;
                case 6:
                    message.missionId = reader.int32();
                    break;
                case 7:
                    message.missionType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MissionInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.MissionInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.MissionInfo} MissionInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MissionInfo message.
         * @function verify
         * @memberof CVP.MissionInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MissionInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.title != null && message.hasOwnProperty("title"))
                if (!$util.isString(message.title))
                    return "title: string expected";
            if (message.description != null && message.hasOwnProperty("description"))
                if (!$util.isString(message.description))
                    return "description: string expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            if (message.nowProgress != null && message.hasOwnProperty("nowProgress"))
                if (typeof message.nowProgress !== "number")
                    return "nowProgress: number expected";
            if (message.progress != null && message.hasOwnProperty("progress"))
                if (typeof message.progress !== "number")
                    return "progress: number expected";
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                if (!$util.isInteger(message.missionId))
                    return "missionId: integer expected";
            if (message.missionType != null && message.hasOwnProperty("missionType"))
                if (!$util.isInteger(message.missionType))
                    return "missionType: integer expected";
            return null;
        };

        /**
         * Creates a MissionInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.MissionInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.MissionInfo} MissionInfo
         */
        MissionInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.MissionInfo)
                return object;
            var message = new $root.CVP.MissionInfo();
            if (object.title != null)
                message.title = String(object.title);
            if (object.description != null)
                message.description = String(object.description);
            if (object.coins != null)
                message.coins = Number(object.coins);
            if (object.nowProgress != null)
                message.nowProgress = Number(object.nowProgress);
            if (object.progress != null)
                message.progress = Number(object.progress);
            if (object.missionId != null)
                message.missionId = object.missionId | 0;
            if (object.missionType != null)
                message.missionType = object.missionType | 0;
            return message;
        };

        /**
         * Creates a plain object from a MissionInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.MissionInfo
         * @static
         * @param {CVP.MissionInfo} message MissionInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MissionInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.title = "";
                object.description = "";
                object.coins = 0;
                object.nowProgress = 0;
                object.progress = 0;
                object.missionId = 0;
                object.missionType = 0;
            }
            if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
            if (message.description != null && message.hasOwnProperty("description"))
                object.description = message.description;
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            if (message.nowProgress != null && message.hasOwnProperty("nowProgress"))
                object.nowProgress = options.json && !isFinite(message.nowProgress) ? String(message.nowProgress) : message.nowProgress;
            if (message.progress != null && message.hasOwnProperty("progress"))
                object.progress = options.json && !isFinite(message.progress) ? String(message.progress) : message.progress;
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                object.missionId = message.missionId;
            if (message.missionType != null && message.hasOwnProperty("missionType"))
                object.missionType = message.missionType;
            return object;
        };

        /**
         * Converts this MissionInfo to JSON.
         * @function toJSON
         * @memberof CVP.MissionInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MissionInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MissionInfo;
    })();

    CVP.MissionWaitInfo = (function() {

        /**
         * Properties of a MissionWaitInfo.
         * @memberof CVP
         * @interface IMissionWaitInfo
         * @property {number|null} [time] MissionWaitInfo time
         * @property {number|null} [missionId] MissionWaitInfo missionId
         */

        /**
         * Constructs a new MissionWaitInfo.
         * @memberof CVP
         * @classdesc Represents a MissionWaitInfo.
         * @implements IMissionWaitInfo
         * @constructor
         * @param {CVP.IMissionWaitInfo=} [properties] Properties to set
         */
        function MissionWaitInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MissionWaitInfo time.
         * @member {number} time
         * @memberof CVP.MissionWaitInfo
         * @instance
         */
        MissionWaitInfo.prototype.time = 0;

        /**
         * MissionWaitInfo missionId.
         * @member {number} missionId
         * @memberof CVP.MissionWaitInfo
         * @instance
         */
        MissionWaitInfo.prototype.missionId = 0;

        /**
         * Creates a new MissionWaitInfo instance using the specified properties.
         * @function create
         * @memberof CVP.MissionWaitInfo
         * @static
         * @param {CVP.IMissionWaitInfo=} [properties] Properties to set
         * @returns {CVP.MissionWaitInfo} MissionWaitInfo instance
         */
        MissionWaitInfo.create = function create(properties) {
            return new MissionWaitInfo(properties);
        };

        /**
         * Encodes the specified MissionWaitInfo message. Does not implicitly {@link CVP.MissionWaitInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.MissionWaitInfo
         * @static
         * @param {CVP.IMissionWaitInfo} message MissionWaitInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionWaitInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.time);
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.missionId);
            return writer;
        };

        /**
         * Encodes the specified MissionWaitInfo message, length delimited. Does not implicitly {@link CVP.MissionWaitInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.MissionWaitInfo
         * @static
         * @param {CVP.IMissionWaitInfo} message MissionWaitInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MissionWaitInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MissionWaitInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.MissionWaitInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.MissionWaitInfo} MissionWaitInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionWaitInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.MissionWaitInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.time = reader.int32();
                    break;
                case 2:
                    message.missionId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MissionWaitInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.MissionWaitInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.MissionWaitInfo} MissionWaitInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MissionWaitInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MissionWaitInfo message.
         * @function verify
         * @memberof CVP.MissionWaitInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MissionWaitInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time))
                    return "time: integer expected";
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                if (!$util.isInteger(message.missionId))
                    return "missionId: integer expected";
            return null;
        };

        /**
         * Creates a MissionWaitInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.MissionWaitInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.MissionWaitInfo} MissionWaitInfo
         */
        MissionWaitInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.MissionWaitInfo)
                return object;
            var message = new $root.CVP.MissionWaitInfo();
            if (object.time != null)
                message.time = object.time | 0;
            if (object.missionId != null)
                message.missionId = object.missionId | 0;
            return message;
        };

        /**
         * Creates a plain object from a MissionWaitInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.MissionWaitInfo
         * @static
         * @param {CVP.MissionWaitInfo} message MissionWaitInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MissionWaitInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.time = 0;
                object.missionId = 0;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                object.missionId = message.missionId;
            return object;
        };

        /**
         * Converts this MissionWaitInfo to JSON.
         * @function toJSON
         * @memberof CVP.MissionWaitInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MissionWaitInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MissionWaitInfo;
    })();

    CVP.RequestRefreshMission = (function() {

        /**
         * Properties of a RequestRefreshMission.
         * @memberof CVP
         * @interface IRequestRefreshMission
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestRefreshMission commonParams
         * @property {boolean|null} [isAD] RequestRefreshMission isAD
         * @property {number|null} [missionId] RequestRefreshMission missionId
         */

        /**
         * Constructs a new RequestRefreshMission.
         * @memberof CVP
         * @classdesc Represents a RequestRefreshMission.
         * @implements IRequestRefreshMission
         * @constructor
         * @param {CVP.IRequestRefreshMission=} [properties] Properties to set
         */
        function RequestRefreshMission(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestRefreshMission commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestRefreshMission
         * @instance
         */
        RequestRefreshMission.prototype.commonParams = null;

        /**
         * RequestRefreshMission isAD.
         * @member {boolean} isAD
         * @memberof CVP.RequestRefreshMission
         * @instance
         */
        RequestRefreshMission.prototype.isAD = false;

        /**
         * RequestRefreshMission missionId.
         * @member {number} missionId
         * @memberof CVP.RequestRefreshMission
         * @instance
         */
        RequestRefreshMission.prototype.missionId = 0;

        /**
         * Creates a new RequestRefreshMission instance using the specified properties.
         * @function create
         * @memberof CVP.RequestRefreshMission
         * @static
         * @param {CVP.IRequestRefreshMission=} [properties] Properties to set
         * @returns {CVP.RequestRefreshMission} RequestRefreshMission instance
         */
        RequestRefreshMission.create = function create(properties) {
            return new RequestRefreshMission(properties);
        };

        /**
         * Encodes the specified RequestRefreshMission message. Does not implicitly {@link CVP.RequestRefreshMission.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestRefreshMission
         * @static
         * @param {CVP.IRequestRefreshMission} message RequestRefreshMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRefreshMission.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.isAD != null && message.hasOwnProperty("isAD"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isAD);
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.missionId);
            return writer;
        };

        /**
         * Encodes the specified RequestRefreshMission message, length delimited. Does not implicitly {@link CVP.RequestRefreshMission.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestRefreshMission
         * @static
         * @param {CVP.IRequestRefreshMission} message RequestRefreshMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRefreshMission.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestRefreshMission message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestRefreshMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestRefreshMission} RequestRefreshMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRefreshMission.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestRefreshMission();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.isAD = reader.bool();
                    break;
                case 3:
                    message.missionId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestRefreshMission message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestRefreshMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestRefreshMission} RequestRefreshMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRefreshMission.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestRefreshMission message.
         * @function verify
         * @memberof CVP.RequestRefreshMission
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestRefreshMission.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.isAD != null && message.hasOwnProperty("isAD"))
                if (typeof message.isAD !== "boolean")
                    return "isAD: boolean expected";
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                if (!$util.isInteger(message.missionId))
                    return "missionId: integer expected";
            return null;
        };

        /**
         * Creates a RequestRefreshMission message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestRefreshMission
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestRefreshMission} RequestRefreshMission
         */
        RequestRefreshMission.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestRefreshMission)
                return object;
            var message = new $root.CVP.RequestRefreshMission();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestRefreshMission.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.isAD != null)
                message.isAD = Boolean(object.isAD);
            if (object.missionId != null)
                message.missionId = object.missionId | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestRefreshMission message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestRefreshMission
         * @static
         * @param {CVP.RequestRefreshMission} message RequestRefreshMission
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestRefreshMission.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.isAD = false;
                object.missionId = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.isAD != null && message.hasOwnProperty("isAD"))
                object.isAD = message.isAD;
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                object.missionId = message.missionId;
            return object;
        };

        /**
         * Converts this RequestRefreshMission to JSON.
         * @function toJSON
         * @memberof CVP.RequestRefreshMission
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestRefreshMission.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestRefreshMission;
    })();

    CVP.RequestRefreshMissionResult = (function() {

        /**
         * Properties of a RequestRefreshMissionResult.
         * @memberof CVP
         * @interface IRequestRefreshMissionResult
         * @property {number|null} [missionId] RequestRefreshMissionResult missionId
         * @property {CVP.IMissionInfo|null} [mission] RequestRefreshMissionResult mission
         */

        /**
         * Constructs a new RequestRefreshMissionResult.
         * @memberof CVP
         * @classdesc Represents a RequestRefreshMissionResult.
         * @implements IRequestRefreshMissionResult
         * @constructor
         * @param {CVP.IRequestRefreshMissionResult=} [properties] Properties to set
         */
        function RequestRefreshMissionResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestRefreshMissionResult missionId.
         * @member {number} missionId
         * @memberof CVP.RequestRefreshMissionResult
         * @instance
         */
        RequestRefreshMissionResult.prototype.missionId = 0;

        /**
         * RequestRefreshMissionResult mission.
         * @member {CVP.IMissionInfo|null|undefined} mission
         * @memberof CVP.RequestRefreshMissionResult
         * @instance
         */
        RequestRefreshMissionResult.prototype.mission = null;

        /**
         * Creates a new RequestRefreshMissionResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestRefreshMissionResult
         * @static
         * @param {CVP.IRequestRefreshMissionResult=} [properties] Properties to set
         * @returns {CVP.RequestRefreshMissionResult} RequestRefreshMissionResult instance
         */
        RequestRefreshMissionResult.create = function create(properties) {
            return new RequestRefreshMissionResult(properties);
        };

        /**
         * Encodes the specified RequestRefreshMissionResult message. Does not implicitly {@link CVP.RequestRefreshMissionResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestRefreshMissionResult
         * @static
         * @param {CVP.IRequestRefreshMissionResult} message RequestRefreshMissionResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRefreshMissionResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.missionId);
            if (message.mission != null && message.hasOwnProperty("mission"))
                $root.CVP.MissionInfo.encode(message.mission, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestRefreshMissionResult message, length delimited. Does not implicitly {@link CVP.RequestRefreshMissionResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestRefreshMissionResult
         * @static
         * @param {CVP.IRequestRefreshMissionResult} message RequestRefreshMissionResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRefreshMissionResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestRefreshMissionResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestRefreshMissionResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestRefreshMissionResult} RequestRefreshMissionResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRefreshMissionResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestRefreshMissionResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.missionId = reader.int32();
                    break;
                case 2:
                    message.mission = $root.CVP.MissionInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestRefreshMissionResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestRefreshMissionResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestRefreshMissionResult} RequestRefreshMissionResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRefreshMissionResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestRefreshMissionResult message.
         * @function verify
         * @memberof CVP.RequestRefreshMissionResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestRefreshMissionResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                if (!$util.isInteger(message.missionId))
                    return "missionId: integer expected";
            if (message.mission != null && message.hasOwnProperty("mission")) {
                var error = $root.CVP.MissionInfo.verify(message.mission);
                if (error)
                    return "mission." + error;
            }
            return null;
        };

        /**
         * Creates a RequestRefreshMissionResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestRefreshMissionResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestRefreshMissionResult} RequestRefreshMissionResult
         */
        RequestRefreshMissionResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestRefreshMissionResult)
                return object;
            var message = new $root.CVP.RequestRefreshMissionResult();
            if (object.missionId != null)
                message.missionId = object.missionId | 0;
            if (object.mission != null) {
                if (typeof object.mission !== "object")
                    throw TypeError(".CVP.RequestRefreshMissionResult.mission: object expected");
                message.mission = $root.CVP.MissionInfo.fromObject(object.mission);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestRefreshMissionResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestRefreshMissionResult
         * @static
         * @param {CVP.RequestRefreshMissionResult} message RequestRefreshMissionResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestRefreshMissionResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.missionId = 0;
                object.mission = null;
            }
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                object.missionId = message.missionId;
            if (message.mission != null && message.hasOwnProperty("mission"))
                object.mission = $root.CVP.MissionInfo.toObject(message.mission, options);
            return object;
        };

        /**
         * Converts this RequestRefreshMissionResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestRefreshMissionResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestRefreshMissionResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestRefreshMissionResult;
    })();

    CVP.RequestOneMission = (function() {

        /**
         * Properties of a RequestOneMission.
         * @memberof CVP
         * @interface IRequestOneMission
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestOneMission commonParams
         * @property {number|null} [missionId] RequestOneMission missionId
         */

        /**
         * Constructs a new RequestOneMission.
         * @memberof CVP
         * @classdesc Represents a RequestOneMission.
         * @implements IRequestOneMission
         * @constructor
         * @param {CVP.IRequestOneMission=} [properties] Properties to set
         */
        function RequestOneMission(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestOneMission commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestOneMission
         * @instance
         */
        RequestOneMission.prototype.commonParams = null;

        /**
         * RequestOneMission missionId.
         * @member {number} missionId
         * @memberof CVP.RequestOneMission
         * @instance
         */
        RequestOneMission.prototype.missionId = 0;

        /**
         * Creates a new RequestOneMission instance using the specified properties.
         * @function create
         * @memberof CVP.RequestOneMission
         * @static
         * @param {CVP.IRequestOneMission=} [properties] Properties to set
         * @returns {CVP.RequestOneMission} RequestOneMission instance
         */
        RequestOneMission.create = function create(properties) {
            return new RequestOneMission(properties);
        };

        /**
         * Encodes the specified RequestOneMission message. Does not implicitly {@link CVP.RequestOneMission.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestOneMission
         * @static
         * @param {CVP.IRequestOneMission} message RequestOneMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestOneMission.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.missionId);
            return writer;
        };

        /**
         * Encodes the specified RequestOneMission message, length delimited. Does not implicitly {@link CVP.RequestOneMission.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestOneMission
         * @static
         * @param {CVP.IRequestOneMission} message RequestOneMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestOneMission.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestOneMission message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestOneMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestOneMission} RequestOneMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestOneMission.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestOneMission();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.missionId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestOneMission message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestOneMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestOneMission} RequestOneMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestOneMission.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestOneMission message.
         * @function verify
         * @memberof CVP.RequestOneMission
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestOneMission.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                if (!$util.isInteger(message.missionId))
                    return "missionId: integer expected";
            return null;
        };

        /**
         * Creates a RequestOneMission message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestOneMission
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestOneMission} RequestOneMission
         */
        RequestOneMission.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestOneMission)
                return object;
            var message = new $root.CVP.RequestOneMission();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestOneMission.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.missionId != null)
                message.missionId = object.missionId | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestOneMission message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestOneMission
         * @static
         * @param {CVP.RequestOneMission} message RequestOneMission
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestOneMission.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.missionId = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                object.missionId = message.missionId;
            return object;
        };

        /**
         * Converts this RequestOneMission to JSON.
         * @function toJSON
         * @memberof CVP.RequestOneMission
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestOneMission.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestOneMission;
    })();

    CVP.RequestOneMissionResult = (function() {

        /**
         * Properties of a RequestOneMissionResult.
         * @memberof CVP
         * @interface IRequestOneMissionResult
         * @property {CVP.IMissionInfo|null} [mission] RequestOneMissionResult mission
         */

        /**
         * Constructs a new RequestOneMissionResult.
         * @memberof CVP
         * @classdesc Represents a RequestOneMissionResult.
         * @implements IRequestOneMissionResult
         * @constructor
         * @param {CVP.IRequestOneMissionResult=} [properties] Properties to set
         */
        function RequestOneMissionResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestOneMissionResult mission.
         * @member {CVP.IMissionInfo|null|undefined} mission
         * @memberof CVP.RequestOneMissionResult
         * @instance
         */
        RequestOneMissionResult.prototype.mission = null;

        /**
         * Creates a new RequestOneMissionResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestOneMissionResult
         * @static
         * @param {CVP.IRequestOneMissionResult=} [properties] Properties to set
         * @returns {CVP.RequestOneMissionResult} RequestOneMissionResult instance
         */
        RequestOneMissionResult.create = function create(properties) {
            return new RequestOneMissionResult(properties);
        };

        /**
         * Encodes the specified RequestOneMissionResult message. Does not implicitly {@link CVP.RequestOneMissionResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestOneMissionResult
         * @static
         * @param {CVP.IRequestOneMissionResult} message RequestOneMissionResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestOneMissionResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mission != null && message.hasOwnProperty("mission"))
                $root.CVP.MissionInfo.encode(message.mission, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestOneMissionResult message, length delimited. Does not implicitly {@link CVP.RequestOneMissionResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestOneMissionResult
         * @static
         * @param {CVP.IRequestOneMissionResult} message RequestOneMissionResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestOneMissionResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestOneMissionResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestOneMissionResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestOneMissionResult} RequestOneMissionResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestOneMissionResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestOneMissionResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mission = $root.CVP.MissionInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestOneMissionResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestOneMissionResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestOneMissionResult} RequestOneMissionResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestOneMissionResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestOneMissionResult message.
         * @function verify
         * @memberof CVP.RequestOneMissionResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestOneMissionResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mission != null && message.hasOwnProperty("mission")) {
                var error = $root.CVP.MissionInfo.verify(message.mission);
                if (error)
                    return "mission." + error;
            }
            return null;
        };

        /**
         * Creates a RequestOneMissionResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestOneMissionResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestOneMissionResult} RequestOneMissionResult
         */
        RequestOneMissionResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestOneMissionResult)
                return object;
            var message = new $root.CVP.RequestOneMissionResult();
            if (object.mission != null) {
                if (typeof object.mission !== "object")
                    throw TypeError(".CVP.RequestOneMissionResult.mission: object expected");
                message.mission = $root.CVP.MissionInfo.fromObject(object.mission);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestOneMissionResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestOneMissionResult
         * @static
         * @param {CVP.RequestOneMissionResult} message RequestOneMissionResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestOneMissionResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.mission = null;
            if (message.mission != null && message.hasOwnProperty("mission"))
                object.mission = $root.CVP.MissionInfo.toObject(message.mission, options);
            return object;
        };

        /**
         * Converts this RequestOneMissionResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestOneMissionResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestOneMissionResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestOneMissionResult;
    })();

    CVP.RequestFinishMission = (function() {

        /**
         * Properties of a RequestFinishMission.
         * @memberof CVP
         * @interface IRequestFinishMission
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestFinishMission commonParams
         * @property {number|null} [missionId] RequestFinishMission missionId
         */

        /**
         * Constructs a new RequestFinishMission.
         * @memberof CVP
         * @classdesc Represents a RequestFinishMission.
         * @implements IRequestFinishMission
         * @constructor
         * @param {CVP.IRequestFinishMission=} [properties] Properties to set
         */
        function RequestFinishMission(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestFinishMission commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestFinishMission
         * @instance
         */
        RequestFinishMission.prototype.commonParams = null;

        /**
         * RequestFinishMission missionId.
         * @member {number} missionId
         * @memberof CVP.RequestFinishMission
         * @instance
         */
        RequestFinishMission.prototype.missionId = 0;

        /**
         * Creates a new RequestFinishMission instance using the specified properties.
         * @function create
         * @memberof CVP.RequestFinishMission
         * @static
         * @param {CVP.IRequestFinishMission=} [properties] Properties to set
         * @returns {CVP.RequestFinishMission} RequestFinishMission instance
         */
        RequestFinishMission.create = function create(properties) {
            return new RequestFinishMission(properties);
        };

        /**
         * Encodes the specified RequestFinishMission message. Does not implicitly {@link CVP.RequestFinishMission.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestFinishMission
         * @static
         * @param {CVP.IRequestFinishMission} message RequestFinishMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFinishMission.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.missionId);
            return writer;
        };

        /**
         * Encodes the specified RequestFinishMission message, length delimited. Does not implicitly {@link CVP.RequestFinishMission.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestFinishMission
         * @static
         * @param {CVP.IRequestFinishMission} message RequestFinishMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFinishMission.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestFinishMission message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestFinishMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestFinishMission} RequestFinishMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFinishMission.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestFinishMission();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.missionId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestFinishMission message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestFinishMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestFinishMission} RequestFinishMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFinishMission.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestFinishMission message.
         * @function verify
         * @memberof CVP.RequestFinishMission
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestFinishMission.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                if (!$util.isInteger(message.missionId))
                    return "missionId: integer expected";
            return null;
        };

        /**
         * Creates a RequestFinishMission message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestFinishMission
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestFinishMission} RequestFinishMission
         */
        RequestFinishMission.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestFinishMission)
                return object;
            var message = new $root.CVP.RequestFinishMission();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestFinishMission.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.missionId != null)
                message.missionId = object.missionId | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestFinishMission message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestFinishMission
         * @static
         * @param {CVP.RequestFinishMission} message RequestFinishMission
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestFinishMission.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.missionId = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.missionId != null && message.hasOwnProperty("missionId"))
                object.missionId = message.missionId;
            return object;
        };

        /**
         * Converts this RequestFinishMission to JSON.
         * @function toJSON
         * @memberof CVP.RequestFinishMission
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestFinishMission.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestFinishMission;
    })();

    CVP.RequestFinishMissionResult = (function() {

        /**
         * Properties of a RequestFinishMissionResult.
         * @memberof CVP
         * @interface IRequestFinishMissionResult
         * @property {number|null} [reward] RequestFinishMissionResult reward
         * @property {number|null} [time] RequestFinishMissionResult time
         */

        /**
         * Constructs a new RequestFinishMissionResult.
         * @memberof CVP
         * @classdesc Represents a RequestFinishMissionResult.
         * @implements IRequestFinishMissionResult
         * @constructor
         * @param {CVP.IRequestFinishMissionResult=} [properties] Properties to set
         */
        function RequestFinishMissionResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestFinishMissionResult reward.
         * @member {number} reward
         * @memberof CVP.RequestFinishMissionResult
         * @instance
         */
        RequestFinishMissionResult.prototype.reward = 0;

        /**
         * RequestFinishMissionResult time.
         * @member {number} time
         * @memberof CVP.RequestFinishMissionResult
         * @instance
         */
        RequestFinishMissionResult.prototype.time = 0;

        /**
         * Creates a new RequestFinishMissionResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestFinishMissionResult
         * @static
         * @param {CVP.IRequestFinishMissionResult=} [properties] Properties to set
         * @returns {CVP.RequestFinishMissionResult} RequestFinishMissionResult instance
         */
        RequestFinishMissionResult.create = function create(properties) {
            return new RequestFinishMissionResult(properties);
        };

        /**
         * Encodes the specified RequestFinishMissionResult message. Does not implicitly {@link CVP.RequestFinishMissionResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestFinishMissionResult
         * @static
         * @param {CVP.IRequestFinishMissionResult} message RequestFinishMissionResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFinishMissionResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.reward != null && message.hasOwnProperty("reward"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.reward);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.time);
            return writer;
        };

        /**
         * Encodes the specified RequestFinishMissionResult message, length delimited. Does not implicitly {@link CVP.RequestFinishMissionResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestFinishMissionResult
         * @static
         * @param {CVP.IRequestFinishMissionResult} message RequestFinishMissionResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFinishMissionResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestFinishMissionResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestFinishMissionResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestFinishMissionResult} RequestFinishMissionResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFinishMissionResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestFinishMissionResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reward = reader.double();
                    break;
                case 2:
                    message.time = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestFinishMissionResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestFinishMissionResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestFinishMissionResult} RequestFinishMissionResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFinishMissionResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestFinishMissionResult message.
         * @function verify
         * @memberof CVP.RequestFinishMissionResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestFinishMissionResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.reward != null && message.hasOwnProperty("reward"))
                if (typeof message.reward !== "number")
                    return "reward: number expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time))
                    return "time: integer expected";
            return null;
        };

        /**
         * Creates a RequestFinishMissionResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestFinishMissionResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestFinishMissionResult} RequestFinishMissionResult
         */
        RequestFinishMissionResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestFinishMissionResult)
                return object;
            var message = new $root.CVP.RequestFinishMissionResult();
            if (object.reward != null)
                message.reward = Number(object.reward);
            if (object.time != null)
                message.time = object.time | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestFinishMissionResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestFinishMissionResult
         * @static
         * @param {CVP.RequestFinishMissionResult} message RequestFinishMissionResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestFinishMissionResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.reward = 0;
                object.time = 0;
            }
            if (message.reward != null && message.hasOwnProperty("reward"))
                object.reward = options.json && !isFinite(message.reward) ? String(message.reward) : message.reward;
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            return object;
        };

        /**
         * Converts this RequestFinishMissionResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestFinishMissionResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestFinishMissionResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestFinishMissionResult;
    })();

    CVP.UpdateAchievementPush = (function() {

        /**
         * Properties of an UpdateAchievementPush.
         * @memberof CVP
         * @interface IUpdateAchievementPush
         * @property {number|null} [pushType] UpdateAchievementPush pushType
         * @property {string|null} [text] UpdateAchievementPush text
         * @property {number|null} [target] UpdateAchievementPush target
         */

        /**
         * Constructs a new UpdateAchievementPush.
         * @memberof CVP
         * @classdesc Represents an UpdateAchievementPush.
         * @implements IUpdateAchievementPush
         * @constructor
         * @param {CVP.IUpdateAchievementPush=} [properties] Properties to set
         */
        function UpdateAchievementPush(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdateAchievementPush pushType.
         * @member {number} pushType
         * @memberof CVP.UpdateAchievementPush
         * @instance
         */
        UpdateAchievementPush.prototype.pushType = 0;

        /**
         * UpdateAchievementPush text.
         * @member {string} text
         * @memberof CVP.UpdateAchievementPush
         * @instance
         */
        UpdateAchievementPush.prototype.text = "";

        /**
         * UpdateAchievementPush target.
         * @member {number} target
         * @memberof CVP.UpdateAchievementPush
         * @instance
         */
        UpdateAchievementPush.prototype.target = 0;

        /**
         * Creates a new UpdateAchievementPush instance using the specified properties.
         * @function create
         * @memberof CVP.UpdateAchievementPush
         * @static
         * @param {CVP.IUpdateAchievementPush=} [properties] Properties to set
         * @returns {CVP.UpdateAchievementPush} UpdateAchievementPush instance
         */
        UpdateAchievementPush.create = function create(properties) {
            return new UpdateAchievementPush(properties);
        };

        /**
         * Encodes the specified UpdateAchievementPush message. Does not implicitly {@link CVP.UpdateAchievementPush.verify|verify} messages.
         * @function encode
         * @memberof CVP.UpdateAchievementPush
         * @static
         * @param {CVP.IUpdateAchievementPush} message UpdateAchievementPush message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateAchievementPush.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pushType != null && message.hasOwnProperty("pushType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pushType);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            if (message.target != null && message.hasOwnProperty("target"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.target);
            return writer;
        };

        /**
         * Encodes the specified UpdateAchievementPush message, length delimited. Does not implicitly {@link CVP.UpdateAchievementPush.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UpdateAchievementPush
         * @static
         * @param {CVP.IUpdateAchievementPush} message UpdateAchievementPush message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateAchievementPush.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdateAchievementPush message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UpdateAchievementPush
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UpdateAchievementPush} UpdateAchievementPush
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateAchievementPush.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UpdateAchievementPush();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pushType = reader.int32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                case 3:
                    message.target = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdateAchievementPush message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UpdateAchievementPush
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UpdateAchievementPush} UpdateAchievementPush
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateAchievementPush.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdateAchievementPush message.
         * @function verify
         * @memberof CVP.UpdateAchievementPush
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdateAchievementPush.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pushType != null && message.hasOwnProperty("pushType"))
                if (!$util.isInteger(message.pushType))
                    return "pushType: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            if (message.target != null && message.hasOwnProperty("target"))
                if (typeof message.target !== "number")
                    return "target: number expected";
            return null;
        };

        /**
         * Creates an UpdateAchievementPush message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UpdateAchievementPush
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UpdateAchievementPush} UpdateAchievementPush
         */
        UpdateAchievementPush.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UpdateAchievementPush)
                return object;
            var message = new $root.CVP.UpdateAchievementPush();
            if (object.pushType != null)
                message.pushType = object.pushType | 0;
            if (object.text != null)
                message.text = String(object.text);
            if (object.target != null)
                message.target = Number(object.target);
            return message;
        };

        /**
         * Creates a plain object from an UpdateAchievementPush message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UpdateAchievementPush
         * @static
         * @param {CVP.UpdateAchievementPush} message UpdateAchievementPush
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdateAchievementPush.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.pushType = 0;
                object.text = "";
                object.target = 0;
            }
            if (message.pushType != null && message.hasOwnProperty("pushType"))
                object.pushType = message.pushType;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            if (message.target != null && message.hasOwnProperty("target"))
                object.target = options.json && !isFinite(message.target) ? String(message.target) : message.target;
            return object;
        };

        /**
         * Converts this UpdateAchievementPush to JSON.
         * @function toJSON
         * @memberof CVP.UpdateAchievementPush
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdateAchievementPush.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateAchievementPush;
    })();

    /**
     * ADPoint enum.
     * @name CVP.ADPoint
     * @enum {string}
     * @property {number} SHOP=1 SHOP value
     * @property {number} BOUNS=2 BOUNS value
     * @property {number} LEVEL=3 LEVEL value
     * @property {number} TABLEPLAQUE1=4 TABLEPLAQUE1 value
     * @property {number} TABLEPLAQUE2=5 TABLEPLAQUE2 value
     * @property {number} TABLEPLAQUE3=6 TABLEPLAQUE3 value
     * @property {number} QUEST=7 QUEST value
     */
    CVP.ADPoint = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "SHOP"] = 1;
        values[valuesById[2] = "BOUNS"] = 2;
        values[valuesById[3] = "LEVEL"] = 3;
        values[valuesById[4] = "TABLEPLAQUE1"] = 4;
        values[valuesById[5] = "TABLEPLAQUE2"] = 5;
        values[valuesById[6] = "TABLEPLAQUE3"] = 6;
        values[valuesById[7] = "QUEST"] = 7;
        return values;
    })();

    /**
     * AdShopItmeState enum.
     * @name CVP.AdShopItmeState
     * @enum {string}
     * @property {number} COLLECTED=1 COLLECTED value
     * @property {number} UNLOCK=2 UNLOCK value
     * @property {number} LOCK=3 LOCK value
     */
    CVP.AdShopItmeState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "COLLECTED"] = 1;
        values[valuesById[2] = "UNLOCK"] = 2;
        values[valuesById[3] = "LOCK"] = 3;
        return values;
    })();

    CVP.RequestAD = (function() {

        /**
         * Properties of a RequestAD.
         * @memberof CVP
         * @interface IRequestAD
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestAD commonParams
         * @property {CVP.ADPoint|null} [adPoint] RequestAD adPoint
         */

        /**
         * Constructs a new RequestAD.
         * @memberof CVP
         * @classdesc Represents a RequestAD.
         * @implements IRequestAD
         * @constructor
         * @param {CVP.IRequestAD=} [properties] Properties to set
         */
        function RequestAD(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestAD commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestAD
         * @instance
         */
        RequestAD.prototype.commonParams = null;

        /**
         * RequestAD adPoint.
         * @member {CVP.ADPoint} adPoint
         * @memberof CVP.RequestAD
         * @instance
         */
        RequestAD.prototype.adPoint = 1;

        /**
         * Creates a new RequestAD instance using the specified properties.
         * @function create
         * @memberof CVP.RequestAD
         * @static
         * @param {CVP.IRequestAD=} [properties] Properties to set
         * @returns {CVP.RequestAD} RequestAD instance
         */
        RequestAD.create = function create(properties) {
            return new RequestAD(properties);
        };

        /**
         * Encodes the specified RequestAD message. Does not implicitly {@link CVP.RequestAD.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestAD
         * @static
         * @param {CVP.IRequestAD} message RequestAD message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAD.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.adPoint);
            return writer;
        };

        /**
         * Encodes the specified RequestAD message, length delimited. Does not implicitly {@link CVP.RequestAD.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestAD
         * @static
         * @param {CVP.IRequestAD} message RequestAD message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAD.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestAD message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestAD
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestAD} RequestAD
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAD.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestAD();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.adPoint = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestAD message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestAD
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestAD} RequestAD
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAD.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestAD message.
         * @function verify
         * @memberof CVP.RequestAD
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestAD.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                switch (message.adPoint) {
                default:
                    return "adPoint: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestAD message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestAD
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestAD} RequestAD
         */
        RequestAD.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestAD)
                return object;
            var message = new $root.CVP.RequestAD();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestAD.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            switch (object.adPoint) {
            case "SHOP":
            case 1:
                message.adPoint = 1;
                break;
            case "BOUNS":
            case 2:
                message.adPoint = 2;
                break;
            case "LEVEL":
            case 3:
                message.adPoint = 3;
                break;
            case "TABLEPLAQUE1":
            case 4:
                message.adPoint = 4;
                break;
            case "TABLEPLAQUE2":
            case 5:
                message.adPoint = 5;
                break;
            case "TABLEPLAQUE3":
            case 6:
                message.adPoint = 6;
                break;
            case "QUEST":
            case 7:
                message.adPoint = 7;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestAD message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestAD
         * @static
         * @param {CVP.RequestAD} message RequestAD
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestAD.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.adPoint = options.enums === String ? "SHOP" : 1;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                object.adPoint = options.enums === String ? $root.CVP.ADPoint[message.adPoint] : message.adPoint;
            return object;
        };

        /**
         * Converts this RequestAD to JSON.
         * @function toJSON
         * @memberof CVP.RequestAD
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestAD.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestAD;
    })();

    CVP.RequestADResult = (function() {

        /**
         * Properties of a RequestADResult.
         * @memberof CVP
         * @interface IRequestADResult
         * @property {boolean|null} [playAD] RequestADResult playAD
         * @property {CVP.ADPoint|null} [adPoint] RequestADResult adPoint
         * @property {number|null} [adTime] RequestADResult adTime
         * @property {number|null} [adCoins] RequestADResult adCoins
         */

        /**
         * Constructs a new RequestADResult.
         * @memberof CVP
         * @classdesc Represents a RequestADResult.
         * @implements IRequestADResult
         * @constructor
         * @param {CVP.IRequestADResult=} [properties] Properties to set
         */
        function RequestADResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestADResult playAD.
         * @member {boolean} playAD
         * @memberof CVP.RequestADResult
         * @instance
         */
        RequestADResult.prototype.playAD = false;

        /**
         * RequestADResult adPoint.
         * @member {CVP.ADPoint} adPoint
         * @memberof CVP.RequestADResult
         * @instance
         */
        RequestADResult.prototype.adPoint = 1;

        /**
         * RequestADResult adTime.
         * @member {number} adTime
         * @memberof CVP.RequestADResult
         * @instance
         */
        RequestADResult.prototype.adTime = 0;

        /**
         * RequestADResult adCoins.
         * @member {number} adCoins
         * @memberof CVP.RequestADResult
         * @instance
         */
        RequestADResult.prototype.adCoins = 0;

        /**
         * Creates a new RequestADResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestADResult
         * @static
         * @param {CVP.IRequestADResult=} [properties] Properties to set
         * @returns {CVP.RequestADResult} RequestADResult instance
         */
        RequestADResult.create = function create(properties) {
            return new RequestADResult(properties);
        };

        /**
         * Encodes the specified RequestADResult message. Does not implicitly {@link CVP.RequestADResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestADResult
         * @static
         * @param {CVP.IRequestADResult} message RequestADResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.playAD != null && message.hasOwnProperty("playAD"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.playAD);
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.adPoint);
            if (message.adTime != null && message.hasOwnProperty("adTime"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.adTime);
            if (message.adCoins != null && message.hasOwnProperty("adCoins"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.adCoins);
            return writer;
        };

        /**
         * Encodes the specified RequestADResult message, length delimited. Does not implicitly {@link CVP.RequestADResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestADResult
         * @static
         * @param {CVP.IRequestADResult} message RequestADResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestADResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestADResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestADResult} RequestADResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestADResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.playAD = reader.bool();
                    break;
                case 2:
                    message.adPoint = reader.int32();
                    break;
                case 3:
                    message.adTime = reader.int32();
                    break;
                case 4:
                    message.adCoins = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestADResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestADResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestADResult} RequestADResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestADResult message.
         * @function verify
         * @memberof CVP.RequestADResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestADResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.playAD != null && message.hasOwnProperty("playAD"))
                if (typeof message.playAD !== "boolean")
                    return "playAD: boolean expected";
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                switch (message.adPoint) {
                default:
                    return "adPoint: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
            if (message.adTime != null && message.hasOwnProperty("adTime"))
                if (!$util.isInteger(message.adTime))
                    return "adTime: integer expected";
            if (message.adCoins != null && message.hasOwnProperty("adCoins"))
                if (typeof message.adCoins !== "number")
                    return "adCoins: number expected";
            return null;
        };

        /**
         * Creates a RequestADResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestADResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestADResult} RequestADResult
         */
        RequestADResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestADResult)
                return object;
            var message = new $root.CVP.RequestADResult();
            if (object.playAD != null)
                message.playAD = Boolean(object.playAD);
            switch (object.adPoint) {
            case "SHOP":
            case 1:
                message.adPoint = 1;
                break;
            case "BOUNS":
            case 2:
                message.adPoint = 2;
                break;
            case "LEVEL":
            case 3:
                message.adPoint = 3;
                break;
            case "TABLEPLAQUE1":
            case 4:
                message.adPoint = 4;
                break;
            case "TABLEPLAQUE2":
            case 5:
                message.adPoint = 5;
                break;
            case "TABLEPLAQUE3":
            case 6:
                message.adPoint = 6;
                break;
            case "QUEST":
            case 7:
                message.adPoint = 7;
                break;
            }
            if (object.adTime != null)
                message.adTime = object.adTime | 0;
            if (object.adCoins != null)
                message.adCoins = Number(object.adCoins);
            return message;
        };

        /**
         * Creates a plain object from a RequestADResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestADResult
         * @static
         * @param {CVP.RequestADResult} message RequestADResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestADResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.playAD = false;
                object.adPoint = options.enums === String ? "SHOP" : 1;
                object.adTime = 0;
                object.adCoins = 0;
            }
            if (message.playAD != null && message.hasOwnProperty("playAD"))
                object.playAD = message.playAD;
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                object.adPoint = options.enums === String ? $root.CVP.ADPoint[message.adPoint] : message.adPoint;
            if (message.adTime != null && message.hasOwnProperty("adTime"))
                object.adTime = message.adTime;
            if (message.adCoins != null && message.hasOwnProperty("adCoins"))
                object.adCoins = options.json && !isFinite(message.adCoins) ? String(message.adCoins) : message.adCoins;
            return object;
        };

        /**
         * Converts this RequestADResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestADResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestADResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestADResult;
    })();

    CVP.RequestADReward = (function() {

        /**
         * Properties of a RequestADReward.
         * @memberof CVP
         * @interface IRequestADReward
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestADReward commonParams
         * @property {CVP.ADPoint|null} [adPoint] RequestADReward adPoint
         */

        /**
         * Constructs a new RequestADReward.
         * @memberof CVP
         * @classdesc Represents a RequestADReward.
         * @implements IRequestADReward
         * @constructor
         * @param {CVP.IRequestADReward=} [properties] Properties to set
         */
        function RequestADReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestADReward commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestADReward
         * @instance
         */
        RequestADReward.prototype.commonParams = null;

        /**
         * RequestADReward adPoint.
         * @member {CVP.ADPoint} adPoint
         * @memberof CVP.RequestADReward
         * @instance
         */
        RequestADReward.prototype.adPoint = 1;

        /**
         * Creates a new RequestADReward instance using the specified properties.
         * @function create
         * @memberof CVP.RequestADReward
         * @static
         * @param {CVP.IRequestADReward=} [properties] Properties to set
         * @returns {CVP.RequestADReward} RequestADReward instance
         */
        RequestADReward.create = function create(properties) {
            return new RequestADReward(properties);
        };

        /**
         * Encodes the specified RequestADReward message. Does not implicitly {@link CVP.RequestADReward.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestADReward
         * @static
         * @param {CVP.IRequestADReward} message RequestADReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.adPoint);
            return writer;
        };

        /**
         * Encodes the specified RequestADReward message, length delimited. Does not implicitly {@link CVP.RequestADReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestADReward
         * @static
         * @param {CVP.IRequestADReward} message RequestADReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestADReward message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestADReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestADReward} RequestADReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestADReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.adPoint = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestADReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestADReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestADReward} RequestADReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestADReward message.
         * @function verify
         * @memberof CVP.RequestADReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestADReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                switch (message.adPoint) {
                default:
                    return "adPoint: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestADReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestADReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestADReward} RequestADReward
         */
        RequestADReward.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestADReward)
                return object;
            var message = new $root.CVP.RequestADReward();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestADReward.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            switch (object.adPoint) {
            case "SHOP":
            case 1:
                message.adPoint = 1;
                break;
            case "BOUNS":
            case 2:
                message.adPoint = 2;
                break;
            case "LEVEL":
            case 3:
                message.adPoint = 3;
                break;
            case "TABLEPLAQUE1":
            case 4:
                message.adPoint = 4;
                break;
            case "TABLEPLAQUE2":
            case 5:
                message.adPoint = 5;
                break;
            case "TABLEPLAQUE3":
            case 6:
                message.adPoint = 6;
                break;
            case "QUEST":
            case 7:
                message.adPoint = 7;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestADReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestADReward
         * @static
         * @param {CVP.RequestADReward} message RequestADReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestADReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.adPoint = options.enums === String ? "SHOP" : 1;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                object.adPoint = options.enums === String ? $root.CVP.ADPoint[message.adPoint] : message.adPoint;
            return object;
        };

        /**
         * Converts this RequestADReward to JSON.
         * @function toJSON
         * @memberof CVP.RequestADReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestADReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestADReward;
    })();

    CVP.RequestADRewardResult = (function() {

        /**
         * Properties of a RequestADRewardResult.
         * @memberof CVP
         * @interface IRequestADRewardResult
         * @property {number|null} [coins] RequestADRewardResult coins
         * @property {number|null} [nextCoins] RequestADRewardResult nextCoins
         * @property {number|null} [vipExp] RequestADRewardResult vipExp
         */

        /**
         * Constructs a new RequestADRewardResult.
         * @memberof CVP
         * @classdesc Represents a RequestADRewardResult.
         * @implements IRequestADRewardResult
         * @constructor
         * @param {CVP.IRequestADRewardResult=} [properties] Properties to set
         */
        function RequestADRewardResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestADRewardResult coins.
         * @member {number} coins
         * @memberof CVP.RequestADRewardResult
         * @instance
         */
        RequestADRewardResult.prototype.coins = 0;

        /**
         * RequestADRewardResult nextCoins.
         * @member {number} nextCoins
         * @memberof CVP.RequestADRewardResult
         * @instance
         */
        RequestADRewardResult.prototype.nextCoins = 0;

        /**
         * RequestADRewardResult vipExp.
         * @member {number} vipExp
         * @memberof CVP.RequestADRewardResult
         * @instance
         */
        RequestADRewardResult.prototype.vipExp = 0;

        /**
         * Creates a new RequestADRewardResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestADRewardResult
         * @static
         * @param {CVP.IRequestADRewardResult=} [properties] Properties to set
         * @returns {CVP.RequestADRewardResult} RequestADRewardResult instance
         */
        RequestADRewardResult.create = function create(properties) {
            return new RequestADRewardResult(properties);
        };

        /**
         * Encodes the specified RequestADRewardResult message. Does not implicitly {@link CVP.RequestADRewardResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestADRewardResult
         * @static
         * @param {CVP.IRequestADRewardResult} message RequestADRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADRewardResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            if (message.nextCoins != null && message.hasOwnProperty("nextCoins"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.nextCoins);
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.vipExp);
            return writer;
        };

        /**
         * Encodes the specified RequestADRewardResult message, length delimited. Does not implicitly {@link CVP.RequestADRewardResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestADRewardResult
         * @static
         * @param {CVP.IRequestADRewardResult} message RequestADRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADRewardResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestADRewardResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestADRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestADRewardResult} RequestADRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADRewardResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestADRewardResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                case 2:
                    message.nextCoins = reader.double();
                    break;
                case 3:
                    message.vipExp = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestADRewardResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestADRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestADRewardResult} RequestADRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADRewardResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestADRewardResult message.
         * @function verify
         * @memberof CVP.RequestADRewardResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestADRewardResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            if (message.nextCoins != null && message.hasOwnProperty("nextCoins"))
                if (typeof message.nextCoins !== "number")
                    return "nextCoins: number expected";
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                if (!$util.isInteger(message.vipExp))
                    return "vipExp: integer expected";
            return null;
        };

        /**
         * Creates a RequestADRewardResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestADRewardResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestADRewardResult} RequestADRewardResult
         */
        RequestADRewardResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestADRewardResult)
                return object;
            var message = new $root.CVP.RequestADRewardResult();
            if (object.coins != null)
                message.coins = Number(object.coins);
            if (object.nextCoins != null)
                message.nextCoins = Number(object.nextCoins);
            if (object.vipExp != null)
                message.vipExp = object.vipExp | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestADRewardResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestADRewardResult
         * @static
         * @param {CVP.RequestADRewardResult} message RequestADRewardResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestADRewardResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.coins = 0;
                object.nextCoins = 0;
                object.vipExp = 0;
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            if (message.nextCoins != null && message.hasOwnProperty("nextCoins"))
                object.nextCoins = options.json && !isFinite(message.nextCoins) ? String(message.nextCoins) : message.nextCoins;
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                object.vipExp = message.vipExp;
            return object;
        };

        /**
         * Converts this RequestADRewardResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestADRewardResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestADRewardResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestADRewardResult;
    })();

    CVP.RequestAllAd = (function() {

        /**
         * Properties of a RequestAllAd.
         * @memberof CVP
         * @interface IRequestAllAd
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestAllAd commonParams
         */

        /**
         * Constructs a new RequestAllAd.
         * @memberof CVP
         * @classdesc Represents a RequestAllAd.
         * @implements IRequestAllAd
         * @constructor
         * @param {CVP.IRequestAllAd=} [properties] Properties to set
         */
        function RequestAllAd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestAllAd commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestAllAd
         * @instance
         */
        RequestAllAd.prototype.commonParams = null;

        /**
         * Creates a new RequestAllAd instance using the specified properties.
         * @function create
         * @memberof CVP.RequestAllAd
         * @static
         * @param {CVP.IRequestAllAd=} [properties] Properties to set
         * @returns {CVP.RequestAllAd} RequestAllAd instance
         */
        RequestAllAd.create = function create(properties) {
            return new RequestAllAd(properties);
        };

        /**
         * Encodes the specified RequestAllAd message. Does not implicitly {@link CVP.RequestAllAd.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestAllAd
         * @static
         * @param {CVP.IRequestAllAd} message RequestAllAd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAllAd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestAllAd message, length delimited. Does not implicitly {@link CVP.RequestAllAd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestAllAd
         * @static
         * @param {CVP.IRequestAllAd} message RequestAllAd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAllAd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestAllAd message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestAllAd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestAllAd} RequestAllAd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAllAd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestAllAd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestAllAd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestAllAd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestAllAd} RequestAllAd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAllAd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestAllAd message.
         * @function verify
         * @memberof CVP.RequestAllAd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestAllAd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestAllAd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestAllAd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestAllAd} RequestAllAd
         */
        RequestAllAd.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestAllAd)
                return object;
            var message = new $root.CVP.RequestAllAd();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestAllAd.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestAllAd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestAllAd
         * @static
         * @param {CVP.RequestAllAd} message RequestAllAd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestAllAd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestAllAd to JSON.
         * @function toJSON
         * @memberof CVP.RequestAllAd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestAllAd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestAllAd;
    })();

    CVP.RequestAllAdResult = (function() {

        /**
         * Properties of a RequestAllAdResult.
         * @memberof CVP
         * @interface IRequestAllAdResult
         * @property {Array.<CVP.IAdInfo>|null} [adInfo] RequestAllAdResult adInfo
         * @property {number|null} [freeCoins] RequestAllAdResult freeCoins
         */

        /**
         * Constructs a new RequestAllAdResult.
         * @memberof CVP
         * @classdesc Represents a RequestAllAdResult.
         * @implements IRequestAllAdResult
         * @constructor
         * @param {CVP.IRequestAllAdResult=} [properties] Properties to set
         */
        function RequestAllAdResult(properties) {
            this.adInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestAllAdResult adInfo.
         * @member {Array.<CVP.IAdInfo>} adInfo
         * @memberof CVP.RequestAllAdResult
         * @instance
         */
        RequestAllAdResult.prototype.adInfo = $util.emptyArray;

        /**
         * RequestAllAdResult freeCoins.
         * @member {number} freeCoins
         * @memberof CVP.RequestAllAdResult
         * @instance
         */
        RequestAllAdResult.prototype.freeCoins = 0;

        /**
         * Creates a new RequestAllAdResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestAllAdResult
         * @static
         * @param {CVP.IRequestAllAdResult=} [properties] Properties to set
         * @returns {CVP.RequestAllAdResult} RequestAllAdResult instance
         */
        RequestAllAdResult.create = function create(properties) {
            return new RequestAllAdResult(properties);
        };

        /**
         * Encodes the specified RequestAllAdResult message. Does not implicitly {@link CVP.RequestAllAdResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestAllAdResult
         * @static
         * @param {CVP.IRequestAllAdResult} message RequestAllAdResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAllAdResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.adInfo != null && message.adInfo.length)
                for (var i = 0; i < message.adInfo.length; ++i)
                    $root.CVP.AdInfo.encode(message.adInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.freeCoins != null && message.hasOwnProperty("freeCoins"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.freeCoins);
            return writer;
        };

        /**
         * Encodes the specified RequestAllAdResult message, length delimited. Does not implicitly {@link CVP.RequestAllAdResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestAllAdResult
         * @static
         * @param {CVP.IRequestAllAdResult} message RequestAllAdResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAllAdResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestAllAdResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestAllAdResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestAllAdResult} RequestAllAdResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAllAdResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestAllAdResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.adInfo && message.adInfo.length))
                        message.adInfo = [];
                    message.adInfo.push($root.CVP.AdInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.freeCoins = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestAllAdResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestAllAdResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestAllAdResult} RequestAllAdResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAllAdResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestAllAdResult message.
         * @function verify
         * @memberof CVP.RequestAllAdResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestAllAdResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.adInfo != null && message.hasOwnProperty("adInfo")) {
                if (!Array.isArray(message.adInfo))
                    return "adInfo: array expected";
                for (var i = 0; i < message.adInfo.length; ++i) {
                    var error = $root.CVP.AdInfo.verify(message.adInfo[i]);
                    if (error)
                        return "adInfo." + error;
                }
            }
            if (message.freeCoins != null && message.hasOwnProperty("freeCoins"))
                if (typeof message.freeCoins !== "number")
                    return "freeCoins: number expected";
            return null;
        };

        /**
         * Creates a RequestAllAdResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestAllAdResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestAllAdResult} RequestAllAdResult
         */
        RequestAllAdResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestAllAdResult)
                return object;
            var message = new $root.CVP.RequestAllAdResult();
            if (object.adInfo) {
                if (!Array.isArray(object.adInfo))
                    throw TypeError(".CVP.RequestAllAdResult.adInfo: array expected");
                message.adInfo = [];
                for (var i = 0; i < object.adInfo.length; ++i) {
                    if (typeof object.adInfo[i] !== "object")
                        throw TypeError(".CVP.RequestAllAdResult.adInfo: object expected");
                    message.adInfo[i] = $root.CVP.AdInfo.fromObject(object.adInfo[i]);
                }
            }
            if (object.freeCoins != null)
                message.freeCoins = Number(object.freeCoins);
            return message;
        };

        /**
         * Creates a plain object from a RequestAllAdResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestAllAdResult
         * @static
         * @param {CVP.RequestAllAdResult} message RequestAllAdResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestAllAdResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.adInfo = [];
            if (options.defaults)
                object.freeCoins = 0;
            if (message.adInfo && message.adInfo.length) {
                object.adInfo = [];
                for (var j = 0; j < message.adInfo.length; ++j)
                    object.adInfo[j] = $root.CVP.AdInfo.toObject(message.adInfo[j], options);
            }
            if (message.freeCoins != null && message.hasOwnProperty("freeCoins"))
                object.freeCoins = options.json && !isFinite(message.freeCoins) ? String(message.freeCoins) : message.freeCoins;
            return object;
        };

        /**
         * Converts this RequestAllAdResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestAllAdResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestAllAdResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestAllAdResult;
    })();

    CVP.AdInfo = (function() {

        /**
         * Properties of an AdInfo.
         * @memberof CVP
         * @interface IAdInfo
         * @property {CVP.ADPoint|null} [adPoint] AdInfo adPoint
         * @property {number|null} [adTime] AdInfo adTime
         * @property {number|null} [adCoins] AdInfo adCoins
         * @property {boolean|null} [playAD] AdInfo playAD
         */

        /**
         * Constructs a new AdInfo.
         * @memberof CVP
         * @classdesc Represents an AdInfo.
         * @implements IAdInfo
         * @constructor
         * @param {CVP.IAdInfo=} [properties] Properties to set
         */
        function AdInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AdInfo adPoint.
         * @member {CVP.ADPoint} adPoint
         * @memberof CVP.AdInfo
         * @instance
         */
        AdInfo.prototype.adPoint = 1;

        /**
         * AdInfo adTime.
         * @member {number} adTime
         * @memberof CVP.AdInfo
         * @instance
         */
        AdInfo.prototype.adTime = 0;

        /**
         * AdInfo adCoins.
         * @member {number} adCoins
         * @memberof CVP.AdInfo
         * @instance
         */
        AdInfo.prototype.adCoins = 0;

        /**
         * AdInfo playAD.
         * @member {boolean} playAD
         * @memberof CVP.AdInfo
         * @instance
         */
        AdInfo.prototype.playAD = false;

        /**
         * Creates a new AdInfo instance using the specified properties.
         * @function create
         * @memberof CVP.AdInfo
         * @static
         * @param {CVP.IAdInfo=} [properties] Properties to set
         * @returns {CVP.AdInfo} AdInfo instance
         */
        AdInfo.create = function create(properties) {
            return new AdInfo(properties);
        };

        /**
         * Encodes the specified AdInfo message. Does not implicitly {@link CVP.AdInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.AdInfo
         * @static
         * @param {CVP.IAdInfo} message AdInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.adPoint);
            if (message.adTime != null && message.hasOwnProperty("adTime"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.adTime);
            if (message.adCoins != null && message.hasOwnProperty("adCoins"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.adCoins);
            if (message.playAD != null && message.hasOwnProperty("playAD"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.playAD);
            return writer;
        };

        /**
         * Encodes the specified AdInfo message, length delimited. Does not implicitly {@link CVP.AdInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.AdInfo
         * @static
         * @param {CVP.IAdInfo} message AdInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AdInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AdInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.AdInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.AdInfo} AdInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.AdInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.adPoint = reader.int32();
                    break;
                case 2:
                    message.adTime = reader.int32();
                    break;
                case 3:
                    message.adCoins = reader.double();
                    break;
                case 4:
                    message.playAD = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AdInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.AdInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.AdInfo} AdInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AdInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AdInfo message.
         * @function verify
         * @memberof CVP.AdInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AdInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                switch (message.adPoint) {
                default:
                    return "adPoint: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
            if (message.adTime != null && message.hasOwnProperty("adTime"))
                if (!$util.isInteger(message.adTime))
                    return "adTime: integer expected";
            if (message.adCoins != null && message.hasOwnProperty("adCoins"))
                if (typeof message.adCoins !== "number")
                    return "adCoins: number expected";
            if (message.playAD != null && message.hasOwnProperty("playAD"))
                if (typeof message.playAD !== "boolean")
                    return "playAD: boolean expected";
            return null;
        };

        /**
         * Creates an AdInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.AdInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.AdInfo} AdInfo
         */
        AdInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.AdInfo)
                return object;
            var message = new $root.CVP.AdInfo();
            switch (object.adPoint) {
            case "SHOP":
            case 1:
                message.adPoint = 1;
                break;
            case "BOUNS":
            case 2:
                message.adPoint = 2;
                break;
            case "LEVEL":
            case 3:
                message.adPoint = 3;
                break;
            case "TABLEPLAQUE1":
            case 4:
                message.adPoint = 4;
                break;
            case "TABLEPLAQUE2":
            case 5:
                message.adPoint = 5;
                break;
            case "TABLEPLAQUE3":
            case 6:
                message.adPoint = 6;
                break;
            case "QUEST":
            case 7:
                message.adPoint = 7;
                break;
            }
            if (object.adTime != null)
                message.adTime = object.adTime | 0;
            if (object.adCoins != null)
                message.adCoins = Number(object.adCoins);
            if (object.playAD != null)
                message.playAD = Boolean(object.playAD);
            return message;
        };

        /**
         * Creates a plain object from an AdInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.AdInfo
         * @static
         * @param {CVP.AdInfo} message AdInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AdInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.adPoint = options.enums === String ? "SHOP" : 1;
                object.adTime = 0;
                object.adCoins = 0;
                object.playAD = false;
            }
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                object.adPoint = options.enums === String ? $root.CVP.ADPoint[message.adPoint] : message.adPoint;
            if (message.adTime != null && message.hasOwnProperty("adTime"))
                object.adTime = message.adTime;
            if (message.adCoins != null && message.hasOwnProperty("adCoins"))
                object.adCoins = options.json && !isFinite(message.adCoins) ? String(message.adCoins) : message.adCoins;
            if (message.playAD != null && message.hasOwnProperty("playAD"))
                object.playAD = message.playAD;
            return object;
        };

        /**
         * Converts this AdInfo to JSON.
         * @function toJSON
         * @memberof CVP.AdInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AdInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AdInfo;
    })();

    CVP.SendCloseAd = (function() {

        /**
         * Properties of a SendCloseAd.
         * @memberof CVP
         * @interface ISendCloseAd
         * @property {CVP.ADPoint|null} [adPoint] SendCloseAd adPoint
         */

        /**
         * Constructs a new SendCloseAd.
         * @memberof CVP
         * @classdesc Represents a SendCloseAd.
         * @implements ISendCloseAd
         * @constructor
         * @param {CVP.ISendCloseAd=} [properties] Properties to set
         */
        function SendCloseAd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendCloseAd adPoint.
         * @member {CVP.ADPoint} adPoint
         * @memberof CVP.SendCloseAd
         * @instance
         */
        SendCloseAd.prototype.adPoint = 1;

        /**
         * Creates a new SendCloseAd instance using the specified properties.
         * @function create
         * @memberof CVP.SendCloseAd
         * @static
         * @param {CVP.ISendCloseAd=} [properties] Properties to set
         * @returns {CVP.SendCloseAd} SendCloseAd instance
         */
        SendCloseAd.create = function create(properties) {
            return new SendCloseAd(properties);
        };

        /**
         * Encodes the specified SendCloseAd message. Does not implicitly {@link CVP.SendCloseAd.verify|verify} messages.
         * @function encode
         * @memberof CVP.SendCloseAd
         * @static
         * @param {CVP.ISendCloseAd} message SendCloseAd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendCloseAd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.adPoint);
            return writer;
        };

        /**
         * Encodes the specified SendCloseAd message, length delimited. Does not implicitly {@link CVP.SendCloseAd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SendCloseAd
         * @static
         * @param {CVP.ISendCloseAd} message SendCloseAd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendCloseAd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendCloseAd message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SendCloseAd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SendCloseAd} SendCloseAd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendCloseAd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SendCloseAd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.adPoint = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendCloseAd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SendCloseAd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SendCloseAd} SendCloseAd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendCloseAd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendCloseAd message.
         * @function verify
         * @memberof CVP.SendCloseAd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendCloseAd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                switch (message.adPoint) {
                default:
                    return "adPoint: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
            return null;
        };

        /**
         * Creates a SendCloseAd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SendCloseAd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SendCloseAd} SendCloseAd
         */
        SendCloseAd.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SendCloseAd)
                return object;
            var message = new $root.CVP.SendCloseAd();
            switch (object.adPoint) {
            case "SHOP":
            case 1:
                message.adPoint = 1;
                break;
            case "BOUNS":
            case 2:
                message.adPoint = 2;
                break;
            case "LEVEL":
            case 3:
                message.adPoint = 3;
                break;
            case "TABLEPLAQUE1":
            case 4:
                message.adPoint = 4;
                break;
            case "TABLEPLAQUE2":
            case 5:
                message.adPoint = 5;
                break;
            case "TABLEPLAQUE3":
            case 6:
                message.adPoint = 6;
                break;
            case "QUEST":
            case 7:
                message.adPoint = 7;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a SendCloseAd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SendCloseAd
         * @static
         * @param {CVP.SendCloseAd} message SendCloseAd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendCloseAd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.adPoint = options.enums === String ? "SHOP" : 1;
            if (message.adPoint != null && message.hasOwnProperty("adPoint"))
                object.adPoint = options.enums === String ? $root.CVP.ADPoint[message.adPoint] : message.adPoint;
            return object;
        };

        /**
         * Converts this SendCloseAd to JSON.
         * @function toJSON
         * @memberof CVP.SendCloseAd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendCloseAd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendCloseAd;
    })();

    CVP.RequestADShop = (function() {

        /**
         * Properties of a RequestADShop.
         * @memberof CVP
         * @interface IRequestADShop
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestADShop commonParams
         */

        /**
         * Constructs a new RequestADShop.
         * @memberof CVP
         * @classdesc Represents a RequestADShop.
         * @implements IRequestADShop
         * @constructor
         * @param {CVP.IRequestADShop=} [properties] Properties to set
         */
        function RequestADShop(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestADShop commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestADShop
         * @instance
         */
        RequestADShop.prototype.commonParams = null;

        /**
         * Creates a new RequestADShop instance using the specified properties.
         * @function create
         * @memberof CVP.RequestADShop
         * @static
         * @param {CVP.IRequestADShop=} [properties] Properties to set
         * @returns {CVP.RequestADShop} RequestADShop instance
         */
        RequestADShop.create = function create(properties) {
            return new RequestADShop(properties);
        };

        /**
         * Encodes the specified RequestADShop message. Does not implicitly {@link CVP.RequestADShop.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestADShop
         * @static
         * @param {CVP.IRequestADShop} message RequestADShop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADShop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestADShop message, length delimited. Does not implicitly {@link CVP.RequestADShop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestADShop
         * @static
         * @param {CVP.IRequestADShop} message RequestADShop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADShop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestADShop message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestADShop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestADShop} RequestADShop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADShop.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestADShop();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestADShop message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestADShop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestADShop} RequestADShop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADShop.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestADShop message.
         * @function verify
         * @memberof CVP.RequestADShop
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestADShop.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestADShop message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestADShop
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestADShop} RequestADShop
         */
        RequestADShop.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestADShop)
                return object;
            var message = new $root.CVP.RequestADShop();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestADShop.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestADShop message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestADShop
         * @static
         * @param {CVP.RequestADShop} message RequestADShop
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestADShop.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestADShop to JSON.
         * @function toJSON
         * @memberof CVP.RequestADShop
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestADShop.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestADShop;
    })();

    CVP.RequestADShopResult = (function() {

        /**
         * Properties of a RequestADShopResult.
         * @memberof CVP
         * @interface IRequestADShopResult
         * @property {Array.<CVP.IADShopItem>|null} [newAdShopItem] RequestADShopResult newAdShopItem
         * @property {number|null} [reduseTime] RequestADShopResult reduseTime
         */

        /**
         * Constructs a new RequestADShopResult.
         * @memberof CVP
         * @classdesc Represents a RequestADShopResult.
         * @implements IRequestADShopResult
         * @constructor
         * @param {CVP.IRequestADShopResult=} [properties] Properties to set
         */
        function RequestADShopResult(properties) {
            this.newAdShopItem = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestADShopResult newAdShopItem.
         * @member {Array.<CVP.IADShopItem>} newAdShopItem
         * @memberof CVP.RequestADShopResult
         * @instance
         */
        RequestADShopResult.prototype.newAdShopItem = $util.emptyArray;

        /**
         * RequestADShopResult reduseTime.
         * @member {number} reduseTime
         * @memberof CVP.RequestADShopResult
         * @instance
         */
        RequestADShopResult.prototype.reduseTime = 0;

        /**
         * Creates a new RequestADShopResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestADShopResult
         * @static
         * @param {CVP.IRequestADShopResult=} [properties] Properties to set
         * @returns {CVP.RequestADShopResult} RequestADShopResult instance
         */
        RequestADShopResult.create = function create(properties) {
            return new RequestADShopResult(properties);
        };

        /**
         * Encodes the specified RequestADShopResult message. Does not implicitly {@link CVP.RequestADShopResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestADShopResult
         * @static
         * @param {CVP.IRequestADShopResult} message RequestADShopResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADShopResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.newAdShopItem != null && message.newAdShopItem.length)
                for (var i = 0; i < message.newAdShopItem.length; ++i)
                    $root.CVP.ADShopItem.encode(message.newAdShopItem[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.reduseTime != null && message.hasOwnProperty("reduseTime"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reduseTime);
            return writer;
        };

        /**
         * Encodes the specified RequestADShopResult message, length delimited. Does not implicitly {@link CVP.RequestADShopResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestADShopResult
         * @static
         * @param {CVP.IRequestADShopResult} message RequestADShopResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestADShopResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestADShopResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestADShopResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestADShopResult} RequestADShopResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADShopResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestADShopResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.newAdShopItem && message.newAdShopItem.length))
                        message.newAdShopItem = [];
                    message.newAdShopItem.push($root.CVP.ADShopItem.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.reduseTime = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestADShopResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestADShopResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestADShopResult} RequestADShopResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestADShopResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestADShopResult message.
         * @function verify
         * @memberof CVP.RequestADShopResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestADShopResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.newAdShopItem != null && message.hasOwnProperty("newAdShopItem")) {
                if (!Array.isArray(message.newAdShopItem))
                    return "newAdShopItem: array expected";
                for (var i = 0; i < message.newAdShopItem.length; ++i) {
                    var error = $root.CVP.ADShopItem.verify(message.newAdShopItem[i]);
                    if (error)
                        return "newAdShopItem." + error;
                }
            }
            if (message.reduseTime != null && message.hasOwnProperty("reduseTime"))
                if (!$util.isInteger(message.reduseTime))
                    return "reduseTime: integer expected";
            return null;
        };

        /**
         * Creates a RequestADShopResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestADShopResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestADShopResult} RequestADShopResult
         */
        RequestADShopResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestADShopResult)
                return object;
            var message = new $root.CVP.RequestADShopResult();
            if (object.newAdShopItem) {
                if (!Array.isArray(object.newAdShopItem))
                    throw TypeError(".CVP.RequestADShopResult.newAdShopItem: array expected");
                message.newAdShopItem = [];
                for (var i = 0; i < object.newAdShopItem.length; ++i) {
                    if (typeof object.newAdShopItem[i] !== "object")
                        throw TypeError(".CVP.RequestADShopResult.newAdShopItem: object expected");
                    message.newAdShopItem[i] = $root.CVP.ADShopItem.fromObject(object.newAdShopItem[i]);
                }
            }
            if (object.reduseTime != null)
                message.reduseTime = object.reduseTime | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestADShopResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestADShopResult
         * @static
         * @param {CVP.RequestADShopResult} message RequestADShopResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestADShopResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.newAdShopItem = [];
            if (options.defaults)
                object.reduseTime = 0;
            if (message.newAdShopItem && message.newAdShopItem.length) {
                object.newAdShopItem = [];
                for (var j = 0; j < message.newAdShopItem.length; ++j)
                    object.newAdShopItem[j] = $root.CVP.ADShopItem.toObject(message.newAdShopItem[j], options);
            }
            if (message.reduseTime != null && message.hasOwnProperty("reduseTime"))
                object.reduseTime = message.reduseTime;
            return object;
        };

        /**
         * Converts this RequestADShopResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestADShopResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestADShopResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestADShopResult;
    })();

    CVP.ADShopItem = (function() {

        /**
         * Properties of a ADShopItem.
         * @memberof CVP
         * @interface IADShopItem
         * @property {number|null} [coins] ADShopItem coins
         * @property {CVP.AdShopItmeState|null} [adShopItmeState] ADShopItem adShopItmeState
         * @property {string|null} [itemId] ADShopItem itemId
         */

        /**
         * Constructs a new ADShopItem.
         * @memberof CVP
         * @classdesc Represents a ADShopItem.
         * @implements IADShopItem
         * @constructor
         * @param {CVP.IADShopItem=} [properties] Properties to set
         */
        function ADShopItem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ADShopItem coins.
         * @member {number} coins
         * @memberof CVP.ADShopItem
         * @instance
         */
        ADShopItem.prototype.coins = 0;

        /**
         * ADShopItem adShopItmeState.
         * @member {CVP.AdShopItmeState} adShopItmeState
         * @memberof CVP.ADShopItem
         * @instance
         */
        ADShopItem.prototype.adShopItmeState = 1;

        /**
         * ADShopItem itemId.
         * @member {string} itemId
         * @memberof CVP.ADShopItem
         * @instance
         */
        ADShopItem.prototype.itemId = "";

        /**
         * Creates a new ADShopItem instance using the specified properties.
         * @function create
         * @memberof CVP.ADShopItem
         * @static
         * @param {CVP.IADShopItem=} [properties] Properties to set
         * @returns {CVP.ADShopItem} ADShopItem instance
         */
        ADShopItem.create = function create(properties) {
            return new ADShopItem(properties);
        };

        /**
         * Encodes the specified ADShopItem message. Does not implicitly {@link CVP.ADShopItem.verify|verify} messages.
         * @function encode
         * @memberof CVP.ADShopItem
         * @static
         * @param {CVP.IADShopItem} message ADShopItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADShopItem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            if (message.adShopItmeState != null && message.hasOwnProperty("adShopItmeState"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.adShopItmeState);
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.itemId);
            return writer;
        };

        /**
         * Encodes the specified ADShopItem message, length delimited. Does not implicitly {@link CVP.ADShopItem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.ADShopItem
         * @static
         * @param {CVP.IADShopItem} message ADShopItem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ADShopItem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ADShopItem message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.ADShopItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.ADShopItem} ADShopItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADShopItem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.ADShopItem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                case 2:
                    message.adShopItmeState = reader.int32();
                    break;
                case 3:
                    message.itemId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ADShopItem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.ADShopItem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.ADShopItem} ADShopItem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ADShopItem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ADShopItem message.
         * @function verify
         * @memberof CVP.ADShopItem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ADShopItem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            if (message.adShopItmeState != null && message.hasOwnProperty("adShopItmeState"))
                switch (message.adShopItmeState) {
                default:
                    return "adShopItmeState: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isString(message.itemId))
                    return "itemId: string expected";
            return null;
        };

        /**
         * Creates a ADShopItem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.ADShopItem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.ADShopItem} ADShopItem
         */
        ADShopItem.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.ADShopItem)
                return object;
            var message = new $root.CVP.ADShopItem();
            if (object.coins != null)
                message.coins = Number(object.coins);
            switch (object.adShopItmeState) {
            case "COLLECTED":
            case 1:
                message.adShopItmeState = 1;
                break;
            case "UNLOCK":
            case 2:
                message.adShopItmeState = 2;
                break;
            case "LOCK":
            case 3:
                message.adShopItmeState = 3;
                break;
            }
            if (object.itemId != null)
                message.itemId = String(object.itemId);
            return message;
        };

        /**
         * Creates a plain object from a ADShopItem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.ADShopItem
         * @static
         * @param {CVP.ADShopItem} message ADShopItem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ADShopItem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.coins = 0;
                object.adShopItmeState = options.enums === String ? "COLLECTED" : 1;
                object.itemId = "";
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            if (message.adShopItmeState != null && message.hasOwnProperty("adShopItmeState"))
                object.adShopItmeState = options.enums === String ? $root.CVP.AdShopItmeState[message.adShopItmeState] : message.adShopItmeState;
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            return object;
        };

        /**
         * Converts this ADShopItem to JSON.
         * @function toJSON
         * @memberof CVP.ADShopItem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ADShopItem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ADShopItem;
    })();

    CVP.RequestCollectADShopItme = (function() {

        /**
         * Properties of a RequestCollectADShopItme.
         * @memberof CVP
         * @interface IRequestCollectADShopItme
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestCollectADShopItme commonParams
         * @property {string|null} [itemId] RequestCollectADShopItme itemId
         */

        /**
         * Constructs a new RequestCollectADShopItme.
         * @memberof CVP
         * @classdesc Represents a RequestCollectADShopItme.
         * @implements IRequestCollectADShopItme
         * @constructor
         * @param {CVP.IRequestCollectADShopItme=} [properties] Properties to set
         */
        function RequestCollectADShopItme(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestCollectADShopItme commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestCollectADShopItme
         * @instance
         */
        RequestCollectADShopItme.prototype.commonParams = null;

        /**
         * RequestCollectADShopItme itemId.
         * @member {string} itemId
         * @memberof CVP.RequestCollectADShopItme
         * @instance
         */
        RequestCollectADShopItme.prototype.itemId = "";

        /**
         * Creates a new RequestCollectADShopItme instance using the specified properties.
         * @function create
         * @memberof CVP.RequestCollectADShopItme
         * @static
         * @param {CVP.IRequestCollectADShopItme=} [properties] Properties to set
         * @returns {CVP.RequestCollectADShopItme} RequestCollectADShopItme instance
         */
        RequestCollectADShopItme.create = function create(properties) {
            return new RequestCollectADShopItme(properties);
        };

        /**
         * Encodes the specified RequestCollectADShopItme message. Does not implicitly {@link CVP.RequestCollectADShopItme.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestCollectADShopItme
         * @static
         * @param {CVP.IRequestCollectADShopItme} message RequestCollectADShopItme message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectADShopItme.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.itemId);
            return writer;
        };

        /**
         * Encodes the specified RequestCollectADShopItme message, length delimited. Does not implicitly {@link CVP.RequestCollectADShopItme.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestCollectADShopItme
         * @static
         * @param {CVP.IRequestCollectADShopItme} message RequestCollectADShopItme message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectADShopItme.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestCollectADShopItme message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestCollectADShopItme
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestCollectADShopItme} RequestCollectADShopItme
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectADShopItme.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestCollectADShopItme();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.itemId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestCollectADShopItme message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestCollectADShopItme
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestCollectADShopItme} RequestCollectADShopItme
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectADShopItme.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestCollectADShopItme message.
         * @function verify
         * @memberof CVP.RequestCollectADShopItme
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestCollectADShopItme.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isString(message.itemId))
                    return "itemId: string expected";
            return null;
        };

        /**
         * Creates a RequestCollectADShopItme message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestCollectADShopItme
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestCollectADShopItme} RequestCollectADShopItme
         */
        RequestCollectADShopItme.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestCollectADShopItme)
                return object;
            var message = new $root.CVP.RequestCollectADShopItme();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestCollectADShopItme.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.itemId != null)
                message.itemId = String(object.itemId);
            return message;
        };

        /**
         * Creates a plain object from a RequestCollectADShopItme message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestCollectADShopItme
         * @static
         * @param {CVP.RequestCollectADShopItme} message RequestCollectADShopItme
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestCollectADShopItme.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.itemId = "";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            return object;
        };

        /**
         * Converts this RequestCollectADShopItme to JSON.
         * @function toJSON
         * @memberof CVP.RequestCollectADShopItme
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestCollectADShopItme.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestCollectADShopItme;
    })();

    CVP.RequestCollectADShopItmeResult = (function() {

        /**
         * Properties of a RequestCollectADShopItmeResult.
         * @memberof CVP
         * @interface IRequestCollectADShopItmeResult
         * @property {number|null} [coins] RequestCollectADShopItmeResult coins
         * @property {string|null} [itemId] RequestCollectADShopItmeResult itemId
         * @property {string|null} [unlockItemId] RequestCollectADShopItmeResult unlockItemId
         */

        /**
         * Constructs a new RequestCollectADShopItmeResult.
         * @memberof CVP
         * @classdesc Represents a RequestCollectADShopItmeResult.
         * @implements IRequestCollectADShopItmeResult
         * @constructor
         * @param {CVP.IRequestCollectADShopItmeResult=} [properties] Properties to set
         */
        function RequestCollectADShopItmeResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestCollectADShopItmeResult coins.
         * @member {number} coins
         * @memberof CVP.RequestCollectADShopItmeResult
         * @instance
         */
        RequestCollectADShopItmeResult.prototype.coins = 0;

        /**
         * RequestCollectADShopItmeResult itemId.
         * @member {string} itemId
         * @memberof CVP.RequestCollectADShopItmeResult
         * @instance
         */
        RequestCollectADShopItmeResult.prototype.itemId = "";

        /**
         * RequestCollectADShopItmeResult unlockItemId.
         * @member {string} unlockItemId
         * @memberof CVP.RequestCollectADShopItmeResult
         * @instance
         */
        RequestCollectADShopItmeResult.prototype.unlockItemId = "";

        /**
         * Creates a new RequestCollectADShopItmeResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestCollectADShopItmeResult
         * @static
         * @param {CVP.IRequestCollectADShopItmeResult=} [properties] Properties to set
         * @returns {CVP.RequestCollectADShopItmeResult} RequestCollectADShopItmeResult instance
         */
        RequestCollectADShopItmeResult.create = function create(properties) {
            return new RequestCollectADShopItmeResult(properties);
        };

        /**
         * Encodes the specified RequestCollectADShopItmeResult message. Does not implicitly {@link CVP.RequestCollectADShopItmeResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestCollectADShopItmeResult
         * @static
         * @param {CVP.IRequestCollectADShopItmeResult} message RequestCollectADShopItmeResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectADShopItmeResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.itemId);
            if (message.unlockItemId != null && message.hasOwnProperty("unlockItemId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.unlockItemId);
            return writer;
        };

        /**
         * Encodes the specified RequestCollectADShopItmeResult message, length delimited. Does not implicitly {@link CVP.RequestCollectADShopItmeResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestCollectADShopItmeResult
         * @static
         * @param {CVP.IRequestCollectADShopItmeResult} message RequestCollectADShopItmeResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectADShopItmeResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestCollectADShopItmeResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestCollectADShopItmeResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestCollectADShopItmeResult} RequestCollectADShopItmeResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectADShopItmeResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestCollectADShopItmeResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                case 2:
                    message.itemId = reader.string();
                    break;
                case 3:
                    message.unlockItemId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestCollectADShopItmeResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestCollectADShopItmeResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestCollectADShopItmeResult} RequestCollectADShopItmeResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectADShopItmeResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestCollectADShopItmeResult message.
         * @function verify
         * @memberof CVP.RequestCollectADShopItmeResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestCollectADShopItmeResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isString(message.itemId))
                    return "itemId: string expected";
            if (message.unlockItemId != null && message.hasOwnProperty("unlockItemId"))
                if (!$util.isString(message.unlockItemId))
                    return "unlockItemId: string expected";
            return null;
        };

        /**
         * Creates a RequestCollectADShopItmeResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestCollectADShopItmeResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestCollectADShopItmeResult} RequestCollectADShopItmeResult
         */
        RequestCollectADShopItmeResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestCollectADShopItmeResult)
                return object;
            var message = new $root.CVP.RequestCollectADShopItmeResult();
            if (object.coins != null)
                message.coins = Number(object.coins);
            if (object.itemId != null)
                message.itemId = String(object.itemId);
            if (object.unlockItemId != null)
                message.unlockItemId = String(object.unlockItemId);
            return message;
        };

        /**
         * Creates a plain object from a RequestCollectADShopItmeResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestCollectADShopItmeResult
         * @static
         * @param {CVP.RequestCollectADShopItmeResult} message RequestCollectADShopItmeResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestCollectADShopItmeResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.coins = 0;
                object.itemId = "";
                object.unlockItemId = "";
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            if (message.unlockItemId != null && message.hasOwnProperty("unlockItemId"))
                object.unlockItemId = message.unlockItemId;
            return object;
        };

        /**
         * Converts this RequestCollectADShopItmeResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestCollectADShopItmeResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestCollectADShopItmeResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestCollectADShopItmeResult;
    })();

    CVP.RequestAddMail = (function() {

        /**
         * Properties of a RequestAddMail.
         * @memberof CVP
         * @interface IRequestAddMail
         * @property {CVP.IInbox|null} [inbox] RequestAddMail inbox
         */

        /**
         * Constructs a new RequestAddMail.
         * @memberof CVP
         * @classdesc Represents a RequestAddMail.
         * @implements IRequestAddMail
         * @constructor
         * @param {CVP.IRequestAddMail=} [properties] Properties to set
         */
        function RequestAddMail(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestAddMail inbox.
         * @member {CVP.IInbox|null|undefined} inbox
         * @memberof CVP.RequestAddMail
         * @instance
         */
        RequestAddMail.prototype.inbox = null;

        /**
         * Creates a new RequestAddMail instance using the specified properties.
         * @function create
         * @memberof CVP.RequestAddMail
         * @static
         * @param {CVP.IRequestAddMail=} [properties] Properties to set
         * @returns {CVP.RequestAddMail} RequestAddMail instance
         */
        RequestAddMail.create = function create(properties) {
            return new RequestAddMail(properties);
        };

        /**
         * Encodes the specified RequestAddMail message. Does not implicitly {@link CVP.RequestAddMail.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestAddMail
         * @static
         * @param {CVP.IRequestAddMail} message RequestAddMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAddMail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.inbox != null && message.hasOwnProperty("inbox"))
                $root.CVP.Inbox.encode(message.inbox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestAddMail message, length delimited. Does not implicitly {@link CVP.RequestAddMail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestAddMail
         * @static
         * @param {CVP.IRequestAddMail} message RequestAddMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestAddMail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestAddMail message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestAddMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestAddMail} RequestAddMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAddMail.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestAddMail();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.inbox = $root.CVP.Inbox.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestAddMail message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestAddMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestAddMail} RequestAddMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestAddMail.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestAddMail message.
         * @function verify
         * @memberof CVP.RequestAddMail
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestAddMail.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.inbox != null && message.hasOwnProperty("inbox")) {
                var error = $root.CVP.Inbox.verify(message.inbox);
                if (error)
                    return "inbox." + error;
            }
            return null;
        };

        /**
         * Creates a RequestAddMail message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestAddMail
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestAddMail} RequestAddMail
         */
        RequestAddMail.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestAddMail)
                return object;
            var message = new $root.CVP.RequestAddMail();
            if (object.inbox != null) {
                if (typeof object.inbox !== "object")
                    throw TypeError(".CVP.RequestAddMail.inbox: object expected");
                message.inbox = $root.CVP.Inbox.fromObject(object.inbox);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestAddMail message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestAddMail
         * @static
         * @param {CVP.RequestAddMail} message RequestAddMail
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestAddMail.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.inbox = null;
            if (message.inbox != null && message.hasOwnProperty("inbox"))
                object.inbox = $root.CVP.Inbox.toObject(message.inbox, options);
            return object;
        };

        /**
         * Converts this RequestAddMail to JSON.
         * @function toJSON
         * @memberof CVP.RequestAddMail
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestAddMail.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestAddMail;
    })();

    CVP.Inbox = (function() {

        /**
         * Properties of an Inbox.
         * @memberof CVP
         * @interface IInbox
         * @property {string|null} [send_name] Inbox send_name
         * @property {CVP.MailType|null} [mail_type] Inbox mail_type
         * @property {number|null} [receive_id] Inbox receive_id
         * @property {boolean|null} [is_read] Inbox is_read
         * @property {string|null} [mail_text] Inbox mail_text
         * @property {Array.<CVP.IAttachment>|null} [attachment] Inbox attachment
         * @property {boolean|null} [is_collect] Inbox is_collect
         */

        /**
         * Constructs a new Inbox.
         * @memberof CVP
         * @classdesc Represents an Inbox.
         * @implements IInbox
         * @constructor
         * @param {CVP.IInbox=} [properties] Properties to set
         */
        function Inbox(properties) {
            this.attachment = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Inbox send_name.
         * @member {string} send_name
         * @memberof CVP.Inbox
         * @instance
         */
        Inbox.prototype.send_name = "";

        /**
         * Inbox mail_type.
         * @member {CVP.MailType} mail_type
         * @memberof CVP.Inbox
         * @instance
         */
        Inbox.prototype.mail_type = 1;

        /**
         * Inbox receive_id.
         * @member {number} receive_id
         * @memberof CVP.Inbox
         * @instance
         */
        Inbox.prototype.receive_id = 0;

        /**
         * Inbox is_read.
         * @member {boolean} is_read
         * @memberof CVP.Inbox
         * @instance
         */
        Inbox.prototype.is_read = false;

        /**
         * Inbox mail_text.
         * @member {string} mail_text
         * @memberof CVP.Inbox
         * @instance
         */
        Inbox.prototype.mail_text = "";

        /**
         * Inbox attachment.
         * @member {Array.<CVP.IAttachment>} attachment
         * @memberof CVP.Inbox
         * @instance
         */
        Inbox.prototype.attachment = $util.emptyArray;

        /**
         * Inbox is_collect.
         * @member {boolean} is_collect
         * @memberof CVP.Inbox
         * @instance
         */
        Inbox.prototype.is_collect = false;

        /**
         * Creates a new Inbox instance using the specified properties.
         * @function create
         * @memberof CVP.Inbox
         * @static
         * @param {CVP.IInbox=} [properties] Properties to set
         * @returns {CVP.Inbox} Inbox instance
         */
        Inbox.create = function create(properties) {
            return new Inbox(properties);
        };

        /**
         * Encodes the specified Inbox message. Does not implicitly {@link CVP.Inbox.verify|verify} messages.
         * @function encode
         * @memberof CVP.Inbox
         * @static
         * @param {CVP.IInbox} message Inbox message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Inbox.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.send_name != null && message.hasOwnProperty("send_name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.send_name);
            if (message.mail_type != null && message.hasOwnProperty("mail_type"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mail_type);
            if (message.receive_id != null && message.hasOwnProperty("receive_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.receive_id);
            if (message.is_read != null && message.hasOwnProperty("is_read"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_read);
            if (message.mail_text != null && message.hasOwnProperty("mail_text"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.mail_text);
            if (message.attachment != null && message.attachment.length)
                for (var i = 0; i < message.attachment.length; ++i)
                    $root.CVP.Attachment.encode(message.attachment[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.is_collect != null && message.hasOwnProperty("is_collect"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.is_collect);
            return writer;
        };

        /**
         * Encodes the specified Inbox message, length delimited. Does not implicitly {@link CVP.Inbox.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.Inbox
         * @static
         * @param {CVP.IInbox} message Inbox message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Inbox.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Inbox message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.Inbox
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.Inbox} Inbox
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Inbox.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.Inbox();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.send_name = reader.string();
                    break;
                case 2:
                    message.mail_type = reader.int32();
                    break;
                case 3:
                    message.receive_id = reader.int32();
                    break;
                case 4:
                    message.is_read = reader.bool();
                    break;
                case 6:
                    message.mail_text = reader.string();
                    break;
                case 7:
                    if (!(message.attachment && message.attachment.length))
                        message.attachment = [];
                    message.attachment.push($root.CVP.Attachment.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.is_collect = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Inbox message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.Inbox
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.Inbox} Inbox
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Inbox.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Inbox message.
         * @function verify
         * @memberof CVP.Inbox
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Inbox.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.send_name != null && message.hasOwnProperty("send_name"))
                if (!$util.isString(message.send_name))
                    return "send_name: string expected";
            if (message.mail_type != null && message.hasOwnProperty("mail_type"))
                switch (message.mail_type) {
                default:
                    return "mail_type: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.receive_id != null && message.hasOwnProperty("receive_id"))
                if (!$util.isInteger(message.receive_id))
                    return "receive_id: integer expected";
            if (message.is_read != null && message.hasOwnProperty("is_read"))
                if (typeof message.is_read !== "boolean")
                    return "is_read: boolean expected";
            if (message.mail_text != null && message.hasOwnProperty("mail_text"))
                if (!$util.isString(message.mail_text))
                    return "mail_text: string expected";
            if (message.attachment != null && message.hasOwnProperty("attachment")) {
                if (!Array.isArray(message.attachment))
                    return "attachment: array expected";
                for (var i = 0; i < message.attachment.length; ++i) {
                    var error = $root.CVP.Attachment.verify(message.attachment[i]);
                    if (error)
                        return "attachment." + error;
                }
            }
            if (message.is_collect != null && message.hasOwnProperty("is_collect"))
                if (typeof message.is_collect !== "boolean")
                    return "is_collect: boolean expected";
            return null;
        };

        /**
         * Creates an Inbox message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.Inbox
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.Inbox} Inbox
         */
        Inbox.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.Inbox)
                return object;
            var message = new $root.CVP.Inbox();
            if (object.send_name != null)
                message.send_name = String(object.send_name);
            switch (object.mail_type) {
            case "GIFT":
            case 1:
                message.mail_type = 1;
                break;
            case "MSG":
            case 2:
                message.mail_type = 2;
                break;
            }
            if (object.receive_id != null)
                message.receive_id = object.receive_id | 0;
            if (object.is_read != null)
                message.is_read = Boolean(object.is_read);
            if (object.mail_text != null)
                message.mail_text = String(object.mail_text);
            if (object.attachment) {
                if (!Array.isArray(object.attachment))
                    throw TypeError(".CVP.Inbox.attachment: array expected");
                message.attachment = [];
                for (var i = 0; i < object.attachment.length; ++i) {
                    if (typeof object.attachment[i] !== "object")
                        throw TypeError(".CVP.Inbox.attachment: object expected");
                    message.attachment[i] = $root.CVP.Attachment.fromObject(object.attachment[i]);
                }
            }
            if (object.is_collect != null)
                message.is_collect = Boolean(object.is_collect);
            return message;
        };

        /**
         * Creates a plain object from an Inbox message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.Inbox
         * @static
         * @param {CVP.Inbox} message Inbox
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Inbox.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.attachment = [];
            if (options.defaults) {
                object.send_name = "";
                object.mail_type = options.enums === String ? "GIFT" : 1;
                object.receive_id = 0;
                object.is_read = false;
                object.mail_text = "";
                object.is_collect = false;
            }
            if (message.send_name != null && message.hasOwnProperty("send_name"))
                object.send_name = message.send_name;
            if (message.mail_type != null && message.hasOwnProperty("mail_type"))
                object.mail_type = options.enums === String ? $root.CVP.MailType[message.mail_type] : message.mail_type;
            if (message.receive_id != null && message.hasOwnProperty("receive_id"))
                object.receive_id = message.receive_id;
            if (message.is_read != null && message.hasOwnProperty("is_read"))
                object.is_read = message.is_read;
            if (message.mail_text != null && message.hasOwnProperty("mail_text"))
                object.mail_text = message.mail_text;
            if (message.attachment && message.attachment.length) {
                object.attachment = [];
                for (var j = 0; j < message.attachment.length; ++j)
                    object.attachment[j] = $root.CVP.Attachment.toObject(message.attachment[j], options);
            }
            if (message.is_collect != null && message.hasOwnProperty("is_collect"))
                object.is_collect = message.is_collect;
            return object;
        };

        /**
         * Converts this Inbox to JSON.
         * @function toJSON
         * @memberof CVP.Inbox
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Inbox.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Inbox;
    })();

    CVP.SendAnalysisInfo = (function() {

        /**
         * Properties of a SendAnalysisInfo.
         * @memberof CVP
         * @interface ISendAnalysisInfo
         * @property {string|null} [eventId] SendAnalysisInfo eventId
         * @property {string|null} [eventInfo] SendAnalysisInfo eventInfo
         */

        /**
         * Constructs a new SendAnalysisInfo.
         * @memberof CVP
         * @classdesc Represents a SendAnalysisInfo.
         * @implements ISendAnalysisInfo
         * @constructor
         * @param {CVP.ISendAnalysisInfo=} [properties] Properties to set
         */
        function SendAnalysisInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendAnalysisInfo eventId.
         * @member {string} eventId
         * @memberof CVP.SendAnalysisInfo
         * @instance
         */
        SendAnalysisInfo.prototype.eventId = "";

        /**
         * SendAnalysisInfo eventInfo.
         * @member {string} eventInfo
         * @memberof CVP.SendAnalysisInfo
         * @instance
         */
        SendAnalysisInfo.prototype.eventInfo = "";

        /**
         * Creates a new SendAnalysisInfo instance using the specified properties.
         * @function create
         * @memberof CVP.SendAnalysisInfo
         * @static
         * @param {CVP.ISendAnalysisInfo=} [properties] Properties to set
         * @returns {CVP.SendAnalysisInfo} SendAnalysisInfo instance
         */
        SendAnalysisInfo.create = function create(properties) {
            return new SendAnalysisInfo(properties);
        };

        /**
         * Encodes the specified SendAnalysisInfo message. Does not implicitly {@link CVP.SendAnalysisInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.SendAnalysisInfo
         * @static
         * @param {CVP.ISendAnalysisInfo} message SendAnalysisInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendAnalysisInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.eventId);
            if (message.eventInfo != null && message.hasOwnProperty("eventInfo"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.eventInfo);
            return writer;
        };

        /**
         * Encodes the specified SendAnalysisInfo message, length delimited. Does not implicitly {@link CVP.SendAnalysisInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SendAnalysisInfo
         * @static
         * @param {CVP.ISendAnalysisInfo} message SendAnalysisInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendAnalysisInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendAnalysisInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SendAnalysisInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SendAnalysisInfo} SendAnalysisInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendAnalysisInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SendAnalysisInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventId = reader.string();
                    break;
                case 2:
                    message.eventInfo = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendAnalysisInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SendAnalysisInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SendAnalysisInfo} SendAnalysisInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendAnalysisInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendAnalysisInfo message.
         * @function verify
         * @memberof CVP.SendAnalysisInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendAnalysisInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                if (!$util.isString(message.eventId))
                    return "eventId: string expected";
            if (message.eventInfo != null && message.hasOwnProperty("eventInfo"))
                if (!$util.isString(message.eventInfo))
                    return "eventInfo: string expected";
            return null;
        };

        /**
         * Creates a SendAnalysisInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SendAnalysisInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SendAnalysisInfo} SendAnalysisInfo
         */
        SendAnalysisInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SendAnalysisInfo)
                return object;
            var message = new $root.CVP.SendAnalysisInfo();
            if (object.eventId != null)
                message.eventId = String(object.eventId);
            if (object.eventInfo != null)
                message.eventInfo = String(object.eventInfo);
            return message;
        };

        /**
         * Creates a plain object from a SendAnalysisInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SendAnalysisInfo
         * @static
         * @param {CVP.SendAnalysisInfo} message SendAnalysisInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendAnalysisInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventId = "";
                object.eventInfo = "";
            }
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                object.eventId = message.eventId;
            if (message.eventInfo != null && message.hasOwnProperty("eventInfo"))
                object.eventInfo = message.eventInfo;
            return object;
        };

        /**
         * Converts this SendAnalysisInfo to JSON.
         * @function toJSON
         * @memberof CVP.SendAnalysisInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendAnalysisInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendAnalysisInfo;
    })();

    CVP.SendAnalysisInfoResult = (function() {

        /**
         * Properties of a SendAnalysisInfoResult.
         * @memberof CVP
         * @interface ISendAnalysisInfoResult
         * @property {string|null} [eventId] SendAnalysisInfoResult eventId
         * @property {string|null} [eventInfo] SendAnalysisInfoResult eventInfo
         */

        /**
         * Constructs a new SendAnalysisInfoResult.
         * @memberof CVP
         * @classdesc Represents a SendAnalysisInfoResult.
         * @implements ISendAnalysisInfoResult
         * @constructor
         * @param {CVP.ISendAnalysisInfoResult=} [properties] Properties to set
         */
        function SendAnalysisInfoResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendAnalysisInfoResult eventId.
         * @member {string} eventId
         * @memberof CVP.SendAnalysisInfoResult
         * @instance
         */
        SendAnalysisInfoResult.prototype.eventId = "";

        /**
         * SendAnalysisInfoResult eventInfo.
         * @member {string} eventInfo
         * @memberof CVP.SendAnalysisInfoResult
         * @instance
         */
        SendAnalysisInfoResult.prototype.eventInfo = "";

        /**
         * Creates a new SendAnalysisInfoResult instance using the specified properties.
         * @function create
         * @memberof CVP.SendAnalysisInfoResult
         * @static
         * @param {CVP.ISendAnalysisInfoResult=} [properties] Properties to set
         * @returns {CVP.SendAnalysisInfoResult} SendAnalysisInfoResult instance
         */
        SendAnalysisInfoResult.create = function create(properties) {
            return new SendAnalysisInfoResult(properties);
        };

        /**
         * Encodes the specified SendAnalysisInfoResult message. Does not implicitly {@link CVP.SendAnalysisInfoResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.SendAnalysisInfoResult
         * @static
         * @param {CVP.ISendAnalysisInfoResult} message SendAnalysisInfoResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendAnalysisInfoResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.eventId);
            if (message.eventInfo != null && message.hasOwnProperty("eventInfo"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.eventInfo);
            return writer;
        };

        /**
         * Encodes the specified SendAnalysisInfoResult message, length delimited. Does not implicitly {@link CVP.SendAnalysisInfoResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SendAnalysisInfoResult
         * @static
         * @param {CVP.ISendAnalysisInfoResult} message SendAnalysisInfoResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendAnalysisInfoResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendAnalysisInfoResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SendAnalysisInfoResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SendAnalysisInfoResult} SendAnalysisInfoResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendAnalysisInfoResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SendAnalysisInfoResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventId = reader.string();
                    break;
                case 2:
                    message.eventInfo = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendAnalysisInfoResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SendAnalysisInfoResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SendAnalysisInfoResult} SendAnalysisInfoResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendAnalysisInfoResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendAnalysisInfoResult message.
         * @function verify
         * @memberof CVP.SendAnalysisInfoResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendAnalysisInfoResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                if (!$util.isString(message.eventId))
                    return "eventId: string expected";
            if (message.eventInfo != null && message.hasOwnProperty("eventInfo"))
                if (!$util.isString(message.eventInfo))
                    return "eventInfo: string expected";
            return null;
        };

        /**
         * Creates a SendAnalysisInfoResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SendAnalysisInfoResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SendAnalysisInfoResult} SendAnalysisInfoResult
         */
        SendAnalysisInfoResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SendAnalysisInfoResult)
                return object;
            var message = new $root.CVP.SendAnalysisInfoResult();
            if (object.eventId != null)
                message.eventId = String(object.eventId);
            if (object.eventInfo != null)
                message.eventInfo = String(object.eventInfo);
            return message;
        };

        /**
         * Creates a plain object from a SendAnalysisInfoResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SendAnalysisInfoResult
         * @static
         * @param {CVP.SendAnalysisInfoResult} message SendAnalysisInfoResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendAnalysisInfoResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventId = "";
                object.eventInfo = "";
            }
            if (message.eventId != null && message.hasOwnProperty("eventId"))
                object.eventId = message.eventId;
            if (message.eventInfo != null && message.hasOwnProperty("eventInfo"))
                object.eventInfo = message.eventInfo;
            return object;
        };

        /**
         * Converts this SendAnalysisInfoResult to JSON.
         * @function toJSON
         * @memberof CVP.SendAnalysisInfoResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendAnalysisInfoResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendAnalysisInfoResult;
    })();

    /**
     * BindType enum.
     * @name CVP.BindType
     * @enum {string}
     * @property {number} TRY=0 TRY value
     * @property {number} COVER=1 COVER value
     * @property {number} MERGE=2 MERGE value
     */
    CVP.BindType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "TRY"] = 0;
        values[valuesById[1] = "COVER"] = 1;
        values[valuesById[2] = "MERGE"] = 2;
        return values;
    })();

    /**
     * BindResultState enum.
     * @name CVP.BindResultState
     * @enum {string}
     * @property {number} SUCCEED=0 SUCCEED value
     * @property {number} NEEDMERGE=1 NEEDMERGE value
     * @property {number} NEEDCOVER=2 NEEDCOVER value
     */
    CVP.BindResultState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SUCCEED"] = 0;
        values[valuesById[1] = "NEEDMERGE"] = 1;
        values[valuesById[2] = "NEEDCOVER"] = 2;
        return values;
    })();

    CVP.RequestBind = (function() {

        /**
         * Properties of a RequestBind.
         * @memberof CVP
         * @interface IRequestBind
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestBind commonParams
         * @property {string|null} [facebookId] RequestBind facebookId
         * @property {string|null} [emailId] RequestBind emailId
         * @property {CVP.BindType|null} [bindType] RequestBind bindType
         * @property {CVP.IFacebookInfo|null} [facebookInfo] RequestBind facebookInfo
         * @property {string|null} [emailInfo] RequestBind emailInfo
         */

        /**
         * Constructs a new RequestBind.
         * @memberof CVP
         * @classdesc Represents a RequestBind.
         * @implements IRequestBind
         * @constructor
         * @param {CVP.IRequestBind=} [properties] Properties to set
         */
        function RequestBind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestBind commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestBind
         * @instance
         */
        RequestBind.prototype.commonParams = null;

        /**
         * RequestBind facebookId.
         * @member {string} facebookId
         * @memberof CVP.RequestBind
         * @instance
         */
        RequestBind.prototype.facebookId = "";

        /**
         * RequestBind emailId.
         * @member {string} emailId
         * @memberof CVP.RequestBind
         * @instance
         */
        RequestBind.prototype.emailId = "";

        /**
         * RequestBind bindType.
         * @member {CVP.BindType} bindType
         * @memberof CVP.RequestBind
         * @instance
         */
        RequestBind.prototype.bindType = 0;

        /**
         * RequestBind facebookInfo.
         * @member {CVP.IFacebookInfo|null|undefined} facebookInfo
         * @memberof CVP.RequestBind
         * @instance
         */
        RequestBind.prototype.facebookInfo = null;

        /**
         * RequestBind emailInfo.
         * @member {string} emailInfo
         * @memberof CVP.RequestBind
         * @instance
         */
        RequestBind.prototype.emailInfo = "";

        /**
         * Creates a new RequestBind instance using the specified properties.
         * @function create
         * @memberof CVP.RequestBind
         * @static
         * @param {CVP.IRequestBind=} [properties] Properties to set
         * @returns {CVP.RequestBind} RequestBind instance
         */
        RequestBind.create = function create(properties) {
            return new RequestBind(properties);
        };

        /**
         * Encodes the specified RequestBind message. Does not implicitly {@link CVP.RequestBind.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestBind
         * @static
         * @param {CVP.IRequestBind} message RequestBind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.facebookId != null && message.hasOwnProperty("facebookId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.facebookId);
            if (message.emailId != null && message.hasOwnProperty("emailId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.emailId);
            if (message.bindType != null && message.hasOwnProperty("bindType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.bindType);
            if (message.facebookInfo != null && message.hasOwnProperty("facebookInfo"))
                $root.CVP.FacebookInfo.encode(message.facebookInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.emailInfo != null && message.hasOwnProperty("emailInfo"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.emailInfo);
            return writer;
        };

        /**
         * Encodes the specified RequestBind message, length delimited. Does not implicitly {@link CVP.RequestBind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestBind
         * @static
         * @param {CVP.IRequestBind} message RequestBind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestBind message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestBind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestBind} RequestBind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestBind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.facebookId = reader.string();
                    break;
                case 3:
                    message.emailId = reader.string();
                    break;
                case 4:
                    message.bindType = reader.int32();
                    break;
                case 5:
                    message.facebookInfo = $root.CVP.FacebookInfo.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.emailInfo = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestBind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestBind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestBind} RequestBind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestBind message.
         * @function verify
         * @memberof CVP.RequestBind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestBind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.facebookId != null && message.hasOwnProperty("facebookId"))
                if (!$util.isString(message.facebookId))
                    return "facebookId: string expected";
            if (message.emailId != null && message.hasOwnProperty("emailId"))
                if (!$util.isString(message.emailId))
                    return "emailId: string expected";
            if (message.bindType != null && message.hasOwnProperty("bindType"))
                switch (message.bindType) {
                default:
                    return "bindType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.facebookInfo != null && message.hasOwnProperty("facebookInfo")) {
                var error = $root.CVP.FacebookInfo.verify(message.facebookInfo);
                if (error)
                    return "facebookInfo." + error;
            }
            if (message.emailInfo != null && message.hasOwnProperty("emailInfo"))
                if (!$util.isString(message.emailInfo))
                    return "emailInfo: string expected";
            return null;
        };

        /**
         * Creates a RequestBind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestBind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestBind} RequestBind
         */
        RequestBind.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestBind)
                return object;
            var message = new $root.CVP.RequestBind();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestBind.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.facebookId != null)
                message.facebookId = String(object.facebookId);
            if (object.emailId != null)
                message.emailId = String(object.emailId);
            switch (object.bindType) {
            case "TRY":
            case 0:
                message.bindType = 0;
                break;
            case "COVER":
            case 1:
                message.bindType = 1;
                break;
            case "MERGE":
            case 2:
                message.bindType = 2;
                break;
            }
            if (object.facebookInfo != null) {
                if (typeof object.facebookInfo !== "object")
                    throw TypeError(".CVP.RequestBind.facebookInfo: object expected");
                message.facebookInfo = $root.CVP.FacebookInfo.fromObject(object.facebookInfo);
            }
            if (object.emailInfo != null)
                message.emailInfo = String(object.emailInfo);
            return message;
        };

        /**
         * Creates a plain object from a RequestBind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestBind
         * @static
         * @param {CVP.RequestBind} message RequestBind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestBind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.facebookId = "";
                object.emailId = "";
                object.bindType = options.enums === String ? "TRY" : 0;
                object.facebookInfo = null;
                object.emailInfo = "";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.facebookId != null && message.hasOwnProperty("facebookId"))
                object.facebookId = message.facebookId;
            if (message.emailId != null && message.hasOwnProperty("emailId"))
                object.emailId = message.emailId;
            if (message.bindType != null && message.hasOwnProperty("bindType"))
                object.bindType = options.enums === String ? $root.CVP.BindType[message.bindType] : message.bindType;
            if (message.facebookInfo != null && message.hasOwnProperty("facebookInfo"))
                object.facebookInfo = $root.CVP.FacebookInfo.toObject(message.facebookInfo, options);
            if (message.emailInfo != null && message.hasOwnProperty("emailInfo"))
                object.emailInfo = message.emailInfo;
            return object;
        };

        /**
         * Converts this RequestBind to JSON.
         * @function toJSON
         * @memberof CVP.RequestBind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestBind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestBind;
    })();

    CVP.RequestBindResult = (function() {

        /**
         * Properties of a RequestBindResult.
         * @memberof CVP
         * @interface IRequestBindResult
         * @property {number|null} [bindCash] RequestBindResult bindCash
         * @property {CVP.IUserData|null} [userData] RequestBindResult userData
         * @property {CVP.BindResultState|null} [bindState] RequestBindResult bindState
         */

        /**
         * Constructs a new RequestBindResult.
         * @memberof CVP
         * @classdesc Represents a RequestBindResult.
         * @implements IRequestBindResult
         * @constructor
         * @param {CVP.IRequestBindResult=} [properties] Properties to set
         */
        function RequestBindResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestBindResult bindCash.
         * @member {number} bindCash
         * @memberof CVP.RequestBindResult
         * @instance
         */
        RequestBindResult.prototype.bindCash = 0;

        /**
         * RequestBindResult userData.
         * @member {CVP.IUserData|null|undefined} userData
         * @memberof CVP.RequestBindResult
         * @instance
         */
        RequestBindResult.prototype.userData = null;

        /**
         * RequestBindResult bindState.
         * @member {CVP.BindResultState} bindState
         * @memberof CVP.RequestBindResult
         * @instance
         */
        RequestBindResult.prototype.bindState = 0;

        /**
         * Creates a new RequestBindResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestBindResult
         * @static
         * @param {CVP.IRequestBindResult=} [properties] Properties to set
         * @returns {CVP.RequestBindResult} RequestBindResult instance
         */
        RequestBindResult.create = function create(properties) {
            return new RequestBindResult(properties);
        };

        /**
         * Encodes the specified RequestBindResult message. Does not implicitly {@link CVP.RequestBindResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestBindResult
         * @static
         * @param {CVP.IRequestBindResult} message RequestBindResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBindResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bindCash != null && message.hasOwnProperty("bindCash"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.bindCash);
            if (message.userData != null && message.hasOwnProperty("userData"))
                $root.CVP.UserData.encode(message.userData, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.bindState != null && message.hasOwnProperty("bindState"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.bindState);
            return writer;
        };

        /**
         * Encodes the specified RequestBindResult message, length delimited. Does not implicitly {@link CVP.RequestBindResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestBindResult
         * @static
         * @param {CVP.IRequestBindResult} message RequestBindResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBindResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestBindResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestBindResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestBindResult} RequestBindResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBindResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestBindResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bindCash = reader.double();
                    break;
                case 2:
                    message.userData = $root.CVP.UserData.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.bindState = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestBindResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestBindResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestBindResult} RequestBindResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBindResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestBindResult message.
         * @function verify
         * @memberof CVP.RequestBindResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestBindResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bindCash != null && message.hasOwnProperty("bindCash"))
                if (typeof message.bindCash !== "number")
                    return "bindCash: number expected";
            if (message.userData != null && message.hasOwnProperty("userData")) {
                var error = $root.CVP.UserData.verify(message.userData);
                if (error)
                    return "userData." + error;
            }
            if (message.bindState != null && message.hasOwnProperty("bindState"))
                switch (message.bindState) {
                default:
                    return "bindState: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestBindResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestBindResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestBindResult} RequestBindResult
         */
        RequestBindResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestBindResult)
                return object;
            var message = new $root.CVP.RequestBindResult();
            if (object.bindCash != null)
                message.bindCash = Number(object.bindCash);
            if (object.userData != null) {
                if (typeof object.userData !== "object")
                    throw TypeError(".CVP.RequestBindResult.userData: object expected");
                message.userData = $root.CVP.UserData.fromObject(object.userData);
            }
            switch (object.bindState) {
            case "SUCCEED":
            case 0:
                message.bindState = 0;
                break;
            case "NEEDMERGE":
            case 1:
                message.bindState = 1;
                break;
            case "NEEDCOVER":
            case 2:
                message.bindState = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestBindResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestBindResult
         * @static
         * @param {CVP.RequestBindResult} message RequestBindResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestBindResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.bindCash = 0;
                object.userData = null;
                object.bindState = options.enums === String ? "SUCCEED" : 0;
            }
            if (message.bindCash != null && message.hasOwnProperty("bindCash"))
                object.bindCash = options.json && !isFinite(message.bindCash) ? String(message.bindCash) : message.bindCash;
            if (message.userData != null && message.hasOwnProperty("userData"))
                object.userData = $root.CVP.UserData.toObject(message.userData, options);
            if (message.bindState != null && message.hasOwnProperty("bindState"))
                object.bindState = options.enums === String ? $root.CVP.BindResultState[message.bindState] : message.bindState;
            return object;
        };

        /**
         * Converts this RequestBindResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestBindResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestBindResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestBindResult;
    })();

    /**
     * TutorialState enum.
     * @name CVP.TutorialState
     * @enum {string}
     * @property {number} NEWUSER=1 NEWUSER value
     * @property {number} PROGERSS=2 PROGERSS value
     * @property {number} FINISH=3 FINISH value
     */
    CVP.TutorialState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "NEWUSER"] = 1;
        values[valuesById[2] = "PROGERSS"] = 2;
        values[valuesById[3] = "FINISH"] = 3;
        return values;
    })();

    CVP.RequestVersionData = (function() {

        /**
         * Properties of a RequestVersionData.
         * @memberof CVP
         * @interface IRequestVersionData
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestVersionData commonParams
         * @property {string|null} [baseVersion] RequestVersionData baseVersion
         * @property {string|null} [resVersion] RequestVersionData resVersion
         * @property {string|null} [platformName] RequestVersionData platformName
         * @property {string|null} [packageName] RequestVersionData packageName
         * @property {string|null} [udid] RequestVersionData udid
         */

        /**
         * Constructs a new RequestVersionData.
         * @memberof CVP
         * @classdesc Represents a RequestVersionData.
         * @implements IRequestVersionData
         * @constructor
         * @param {CVP.IRequestVersionData=} [properties] Properties to set
         */
        function RequestVersionData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestVersionData commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestVersionData
         * @instance
         */
        RequestVersionData.prototype.commonParams = null;

        /**
         * RequestVersionData baseVersion.
         * @member {string} baseVersion
         * @memberof CVP.RequestVersionData
         * @instance
         */
        RequestVersionData.prototype.baseVersion = "";

        /**
         * RequestVersionData resVersion.
         * @member {string} resVersion
         * @memberof CVP.RequestVersionData
         * @instance
         */
        RequestVersionData.prototype.resVersion = "";

        /**
         * RequestVersionData platformName.
         * @member {string} platformName
         * @memberof CVP.RequestVersionData
         * @instance
         */
        RequestVersionData.prototype.platformName = "";

        /**
         * RequestVersionData packageName.
         * @member {string} packageName
         * @memberof CVP.RequestVersionData
         * @instance
         */
        RequestVersionData.prototype.packageName = "";

        /**
         * RequestVersionData udid.
         * @member {string} udid
         * @memberof CVP.RequestVersionData
         * @instance
         */
        RequestVersionData.prototype.udid = "";

        /**
         * Creates a new RequestVersionData instance using the specified properties.
         * @function create
         * @memberof CVP.RequestVersionData
         * @static
         * @param {CVP.IRequestVersionData=} [properties] Properties to set
         * @returns {CVP.RequestVersionData} RequestVersionData instance
         */
        RequestVersionData.create = function create(properties) {
            return new RequestVersionData(properties);
        };

        /**
         * Encodes the specified RequestVersionData message. Does not implicitly {@link CVP.RequestVersionData.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestVersionData
         * @static
         * @param {CVP.IRequestVersionData} message RequestVersionData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVersionData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.baseVersion != null && message.hasOwnProperty("baseVersion"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.baseVersion);
            if (message.resVersion != null && message.hasOwnProperty("resVersion"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.resVersion);
            if (message.platformName != null && message.hasOwnProperty("platformName"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.platformName);
            if (message.packageName != null && message.hasOwnProperty("packageName"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.packageName);
            if (message.udid != null && message.hasOwnProperty("udid"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.udid);
            return writer;
        };

        /**
         * Encodes the specified RequestVersionData message, length delimited. Does not implicitly {@link CVP.RequestVersionData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestVersionData
         * @static
         * @param {CVP.IRequestVersionData} message RequestVersionData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVersionData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestVersionData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestVersionData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestVersionData} RequestVersionData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVersionData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestVersionData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.baseVersion = reader.string();
                    break;
                case 3:
                    message.resVersion = reader.string();
                    break;
                case 4:
                    message.platformName = reader.string();
                    break;
                case 5:
                    message.packageName = reader.string();
                    break;
                case 6:
                    message.udid = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestVersionData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestVersionData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestVersionData} RequestVersionData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVersionData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestVersionData message.
         * @function verify
         * @memberof CVP.RequestVersionData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestVersionData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.baseVersion != null && message.hasOwnProperty("baseVersion"))
                if (!$util.isString(message.baseVersion))
                    return "baseVersion: string expected";
            if (message.resVersion != null && message.hasOwnProperty("resVersion"))
                if (!$util.isString(message.resVersion))
                    return "resVersion: string expected";
            if (message.platformName != null && message.hasOwnProperty("platformName"))
                if (!$util.isString(message.platformName))
                    return "platformName: string expected";
            if (message.packageName != null && message.hasOwnProperty("packageName"))
                if (!$util.isString(message.packageName))
                    return "packageName: string expected";
            if (message.udid != null && message.hasOwnProperty("udid"))
                if (!$util.isString(message.udid))
                    return "udid: string expected";
            return null;
        };

        /**
         * Creates a RequestVersionData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestVersionData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestVersionData} RequestVersionData
         */
        RequestVersionData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestVersionData)
                return object;
            var message = new $root.CVP.RequestVersionData();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestVersionData.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.baseVersion != null)
                message.baseVersion = String(object.baseVersion);
            if (object.resVersion != null)
                message.resVersion = String(object.resVersion);
            if (object.platformName != null)
                message.platformName = String(object.platformName);
            if (object.packageName != null)
                message.packageName = String(object.packageName);
            if (object.udid != null)
                message.udid = String(object.udid);
            return message;
        };

        /**
         * Creates a plain object from a RequestVersionData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestVersionData
         * @static
         * @param {CVP.RequestVersionData} message RequestVersionData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestVersionData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.baseVersion = "";
                object.resVersion = "";
                object.platformName = "";
                object.packageName = "";
                object.udid = "";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.baseVersion != null && message.hasOwnProperty("baseVersion"))
                object.baseVersion = message.baseVersion;
            if (message.resVersion != null && message.hasOwnProperty("resVersion"))
                object.resVersion = message.resVersion;
            if (message.platformName != null && message.hasOwnProperty("platformName"))
                object.platformName = message.platformName;
            if (message.packageName != null && message.hasOwnProperty("packageName"))
                object.packageName = message.packageName;
            if (message.udid != null && message.hasOwnProperty("udid"))
                object.udid = message.udid;
            return object;
        };

        /**
         * Converts this RequestVersionData to JSON.
         * @function toJSON
         * @memberof CVP.RequestVersionData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestVersionData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestVersionData;
    })();

    CVP.RequestVersionDataResult = (function() {

        /**
         * Properties of a RequestVersionDataResult.
         * @memberof CVP
         * @interface IRequestVersionDataResult
         * @property {boolean|null} [needUpdate] RequestVersionDataResult needUpdate
         * @property {string|null} [updateMsg] RequestVersionDataResult updateMsg
         * @property {number|null} [updateCash] RequestVersionDataResult updateCash
         * @property {string|null} [resVersion] RequestVersionDataResult resVersion
         * @property {string|null} [bundleVersion] RequestVersionDataResult bundleVersion
         * @property {string|null} [serverVersion] RequestVersionDataResult serverVersion
         * @property {string|null} [serverState] RequestVersionDataResult serverState
         * @property {string|null} [resUrl] RequestVersionDataResult resUrl
         * @property {string|null} [resMd5] RequestVersionDataResult resMd5
         */

        /**
         * Constructs a new RequestVersionDataResult.
         * @memberof CVP
         * @classdesc Represents a RequestVersionDataResult.
         * @implements IRequestVersionDataResult
         * @constructor
         * @param {CVP.IRequestVersionDataResult=} [properties] Properties to set
         */
        function RequestVersionDataResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestVersionDataResult needUpdate.
         * @member {boolean} needUpdate
         * @memberof CVP.RequestVersionDataResult
         * @instance
         */
        RequestVersionDataResult.prototype.needUpdate = false;

        /**
         * RequestVersionDataResult updateMsg.
         * @member {string} updateMsg
         * @memberof CVP.RequestVersionDataResult
         * @instance
         */
        RequestVersionDataResult.prototype.updateMsg = "";

        /**
         * RequestVersionDataResult updateCash.
         * @member {number} updateCash
         * @memberof CVP.RequestVersionDataResult
         * @instance
         */
        RequestVersionDataResult.prototype.updateCash = 0;

        /**
         * RequestVersionDataResult resVersion.
         * @member {string} resVersion
         * @memberof CVP.RequestVersionDataResult
         * @instance
         */
        RequestVersionDataResult.prototype.resVersion = "";

        /**
         * RequestVersionDataResult bundleVersion.
         * @member {string} bundleVersion
         * @memberof CVP.RequestVersionDataResult
         * @instance
         */
        RequestVersionDataResult.prototype.bundleVersion = "";

        /**
         * RequestVersionDataResult serverVersion.
         * @member {string} serverVersion
         * @memberof CVP.RequestVersionDataResult
         * @instance
         */
        RequestVersionDataResult.prototype.serverVersion = "";

        /**
         * RequestVersionDataResult serverState.
         * @member {string} serverState
         * @memberof CVP.RequestVersionDataResult
         * @instance
         */
        RequestVersionDataResult.prototype.serverState = "";

        /**
         * RequestVersionDataResult resUrl.
         * @member {string} resUrl
         * @memberof CVP.RequestVersionDataResult
         * @instance
         */
        RequestVersionDataResult.prototype.resUrl = "";

        /**
         * RequestVersionDataResult resMd5.
         * @member {string} resMd5
         * @memberof CVP.RequestVersionDataResult
         * @instance
         */
        RequestVersionDataResult.prototype.resMd5 = "";

        /**
         * Creates a new RequestVersionDataResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestVersionDataResult
         * @static
         * @param {CVP.IRequestVersionDataResult=} [properties] Properties to set
         * @returns {CVP.RequestVersionDataResult} RequestVersionDataResult instance
         */
        RequestVersionDataResult.create = function create(properties) {
            return new RequestVersionDataResult(properties);
        };

        /**
         * Encodes the specified RequestVersionDataResult message. Does not implicitly {@link CVP.RequestVersionDataResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestVersionDataResult
         * @static
         * @param {CVP.IRequestVersionDataResult} message RequestVersionDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVersionDataResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.needUpdate != null && message.hasOwnProperty("needUpdate"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.needUpdate);
            if (message.updateMsg != null && message.hasOwnProperty("updateMsg"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.updateMsg);
            if (message.updateCash != null && message.hasOwnProperty("updateCash"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.updateCash);
            if (message.resVersion != null && message.hasOwnProperty("resVersion"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.resVersion);
            if (message.bundleVersion != null && message.hasOwnProperty("bundleVersion"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.bundleVersion);
            if (message.serverVersion != null && message.hasOwnProperty("serverVersion"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.serverVersion);
            if (message.serverState != null && message.hasOwnProperty("serverState"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.serverState);
            if (message.resUrl != null && message.hasOwnProperty("resUrl"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.resUrl);
            if (message.resMd5 != null && message.hasOwnProperty("resMd5"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.resMd5);
            return writer;
        };

        /**
         * Encodes the specified RequestVersionDataResult message, length delimited. Does not implicitly {@link CVP.RequestVersionDataResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestVersionDataResult
         * @static
         * @param {CVP.IRequestVersionDataResult} message RequestVersionDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVersionDataResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestVersionDataResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestVersionDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestVersionDataResult} RequestVersionDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVersionDataResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestVersionDataResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.needUpdate = reader.bool();
                    break;
                case 2:
                    message.updateMsg = reader.string();
                    break;
                case 3:
                    message.updateCash = reader.double();
                    break;
                case 4:
                    message.resVersion = reader.string();
                    break;
                case 5:
                    message.bundleVersion = reader.string();
                    break;
                case 6:
                    message.serverVersion = reader.string();
                    break;
                case 7:
                    message.serverState = reader.string();
                    break;
                case 8:
                    message.resUrl = reader.string();
                    break;
                case 9:
                    message.resMd5 = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestVersionDataResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestVersionDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestVersionDataResult} RequestVersionDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVersionDataResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestVersionDataResult message.
         * @function verify
         * @memberof CVP.RequestVersionDataResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestVersionDataResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.needUpdate != null && message.hasOwnProperty("needUpdate"))
                if (typeof message.needUpdate !== "boolean")
                    return "needUpdate: boolean expected";
            if (message.updateMsg != null && message.hasOwnProperty("updateMsg"))
                if (!$util.isString(message.updateMsg))
                    return "updateMsg: string expected";
            if (message.updateCash != null && message.hasOwnProperty("updateCash"))
                if (typeof message.updateCash !== "number")
                    return "updateCash: number expected";
            if (message.resVersion != null && message.hasOwnProperty("resVersion"))
                if (!$util.isString(message.resVersion))
                    return "resVersion: string expected";
            if (message.bundleVersion != null && message.hasOwnProperty("bundleVersion"))
                if (!$util.isString(message.bundleVersion))
                    return "bundleVersion: string expected";
            if (message.serverVersion != null && message.hasOwnProperty("serverVersion"))
                if (!$util.isString(message.serverVersion))
                    return "serverVersion: string expected";
            if (message.serverState != null && message.hasOwnProperty("serverState"))
                if (!$util.isString(message.serverState))
                    return "serverState: string expected";
            if (message.resUrl != null && message.hasOwnProperty("resUrl"))
                if (!$util.isString(message.resUrl))
                    return "resUrl: string expected";
            if (message.resMd5 != null && message.hasOwnProperty("resMd5"))
                if (!$util.isString(message.resMd5))
                    return "resMd5: string expected";
            return null;
        };

        /**
         * Creates a RequestVersionDataResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestVersionDataResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestVersionDataResult} RequestVersionDataResult
         */
        RequestVersionDataResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestVersionDataResult)
                return object;
            var message = new $root.CVP.RequestVersionDataResult();
            if (object.needUpdate != null)
                message.needUpdate = Boolean(object.needUpdate);
            if (object.updateMsg != null)
                message.updateMsg = String(object.updateMsg);
            if (object.updateCash != null)
                message.updateCash = Number(object.updateCash);
            if (object.resVersion != null)
                message.resVersion = String(object.resVersion);
            if (object.bundleVersion != null)
                message.bundleVersion = String(object.bundleVersion);
            if (object.serverVersion != null)
                message.serverVersion = String(object.serverVersion);
            if (object.serverState != null)
                message.serverState = String(object.serverState);
            if (object.resUrl != null)
                message.resUrl = String(object.resUrl);
            if (object.resMd5 != null)
                message.resMd5 = String(object.resMd5);
            return message;
        };

        /**
         * Creates a plain object from a RequestVersionDataResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestVersionDataResult
         * @static
         * @param {CVP.RequestVersionDataResult} message RequestVersionDataResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestVersionDataResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.needUpdate = false;
                object.updateMsg = "";
                object.updateCash = 0;
                object.resVersion = "";
                object.bundleVersion = "";
                object.serverVersion = "";
                object.serverState = "";
                object.resUrl = "";
                object.resMd5 = "";
            }
            if (message.needUpdate != null && message.hasOwnProperty("needUpdate"))
                object.needUpdate = message.needUpdate;
            if (message.updateMsg != null && message.hasOwnProperty("updateMsg"))
                object.updateMsg = message.updateMsg;
            if (message.updateCash != null && message.hasOwnProperty("updateCash"))
                object.updateCash = options.json && !isFinite(message.updateCash) ? String(message.updateCash) : message.updateCash;
            if (message.resVersion != null && message.hasOwnProperty("resVersion"))
                object.resVersion = message.resVersion;
            if (message.bundleVersion != null && message.hasOwnProperty("bundleVersion"))
                object.bundleVersion = message.bundleVersion;
            if (message.serverVersion != null && message.hasOwnProperty("serverVersion"))
                object.serverVersion = message.serverVersion;
            if (message.serverState != null && message.hasOwnProperty("serverState"))
                object.serverState = message.serverState;
            if (message.resUrl != null && message.hasOwnProperty("resUrl"))
                object.resUrl = message.resUrl;
            if (message.resMd5 != null && message.hasOwnProperty("resMd5"))
                object.resMd5 = message.resMd5;
            return object;
        };

        /**
         * Converts this RequestVersionDataResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestVersionDataResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestVersionDataResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestVersionDataResult;
    })();

    CVP.RequestLogin = (function() {

        /**
         * Properties of a RequestLogin.
         * @memberof CVP
         * @interface IRequestLogin
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestLogin commonParams
         * @property {string|null} [emailId] RequestLogin emailId
         * @property {string|null} [facebookId] RequestLogin facebookId
         * @property {string|null} [deviceId] RequestLogin deviceId
         * @property {string|null} [channel] RequestLogin channel
         * @property {CVP.ILoginClientToken|null} [loginClientToken] RequestLogin loginClientToken
         * @property {CVP.IFacebookInfo|null} [facebookInfo] RequestLogin facebookInfo
         * @property {string|null} [emailInfo] RequestLogin emailInfo
         */

        /**
         * Constructs a new RequestLogin.
         * @memberof CVP
         * @classdesc Represents a RequestLogin.
         * @implements IRequestLogin
         * @constructor
         * @param {CVP.IRequestLogin=} [properties] Properties to set
         */
        function RequestLogin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestLogin commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestLogin
         * @instance
         */
        RequestLogin.prototype.commonParams = null;

        /**
         * RequestLogin emailId.
         * @member {string} emailId
         * @memberof CVP.RequestLogin
         * @instance
         */
        RequestLogin.prototype.emailId = "";

        /**
         * RequestLogin facebookId.
         * @member {string} facebookId
         * @memberof CVP.RequestLogin
         * @instance
         */
        RequestLogin.prototype.facebookId = "";

        /**
         * RequestLogin deviceId.
         * @member {string} deviceId
         * @memberof CVP.RequestLogin
         * @instance
         */
        RequestLogin.prototype.deviceId = "";

        /**
         * RequestLogin channel.
         * @member {string} channel
         * @memberof CVP.RequestLogin
         * @instance
         */
        RequestLogin.prototype.channel = "";

        /**
         * RequestLogin loginClientToken.
         * @member {CVP.ILoginClientToken|null|undefined} loginClientToken
         * @memberof CVP.RequestLogin
         * @instance
         */
        RequestLogin.prototype.loginClientToken = null;

        /**
         * RequestLogin facebookInfo.
         * @member {CVP.IFacebookInfo|null|undefined} facebookInfo
         * @memberof CVP.RequestLogin
         * @instance
         */
        RequestLogin.prototype.facebookInfo = null;

        /**
         * RequestLogin emailInfo.
         * @member {string} emailInfo
         * @memberof CVP.RequestLogin
         * @instance
         */
        RequestLogin.prototype.emailInfo = "";

        /**
         * Creates a new RequestLogin instance using the specified properties.
         * @function create
         * @memberof CVP.RequestLogin
         * @static
         * @param {CVP.IRequestLogin=} [properties] Properties to set
         * @returns {CVP.RequestLogin} RequestLogin instance
         */
        RequestLogin.create = function create(properties) {
            return new RequestLogin(properties);
        };

        /**
         * Encodes the specified RequestLogin message. Does not implicitly {@link CVP.RequestLogin.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestLogin
         * @static
         * @param {CVP.IRequestLogin} message RequestLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLogin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.emailId != null && message.hasOwnProperty("emailId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.emailId);
            if (message.facebookId != null && message.hasOwnProperty("facebookId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.facebookId);
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.deviceId);
            if (message.channel != null && message.hasOwnProperty("channel"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.channel);
            if (message.loginClientToken != null && message.hasOwnProperty("loginClientToken"))
                $root.CVP.LoginClientToken.encode(message.loginClientToken, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.facebookInfo != null && message.hasOwnProperty("facebookInfo"))
                $root.CVP.FacebookInfo.encode(message.facebookInfo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.emailInfo != null && message.hasOwnProperty("emailInfo"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.emailInfo);
            return writer;
        };

        /**
         * Encodes the specified RequestLogin message, length delimited. Does not implicitly {@link CVP.RequestLogin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestLogin
         * @static
         * @param {CVP.IRequestLogin} message RequestLogin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLogin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestLogin message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestLogin} RequestLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLogin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestLogin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.emailId = reader.string();
                    break;
                case 3:
                    message.facebookId = reader.string();
                    break;
                case 4:
                    message.deviceId = reader.string();
                    break;
                case 5:
                    message.channel = reader.string();
                    break;
                case 6:
                    message.loginClientToken = $root.CVP.LoginClientToken.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.facebookInfo = $root.CVP.FacebookInfo.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.emailInfo = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestLogin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestLogin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestLogin} RequestLogin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLogin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestLogin message.
         * @function verify
         * @memberof CVP.RequestLogin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestLogin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.emailId != null && message.hasOwnProperty("emailId"))
                if (!$util.isString(message.emailId))
                    return "emailId: string expected";
            if (message.facebookId != null && message.hasOwnProperty("facebookId"))
                if (!$util.isString(message.facebookId))
                    return "facebookId: string expected";
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                if (!$util.isString(message.deviceId))
                    return "deviceId: string expected";
            if (message.channel != null && message.hasOwnProperty("channel"))
                if (!$util.isString(message.channel))
                    return "channel: string expected";
            if (message.loginClientToken != null && message.hasOwnProperty("loginClientToken")) {
                var error = $root.CVP.LoginClientToken.verify(message.loginClientToken);
                if (error)
                    return "loginClientToken." + error;
            }
            if (message.facebookInfo != null && message.hasOwnProperty("facebookInfo")) {
                var error = $root.CVP.FacebookInfo.verify(message.facebookInfo);
                if (error)
                    return "facebookInfo." + error;
            }
            if (message.emailInfo != null && message.hasOwnProperty("emailInfo"))
                if (!$util.isString(message.emailInfo))
                    return "emailInfo: string expected";
            return null;
        };

        /**
         * Creates a RequestLogin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestLogin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestLogin} RequestLogin
         */
        RequestLogin.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestLogin)
                return object;
            var message = new $root.CVP.RequestLogin();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestLogin.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.emailId != null)
                message.emailId = String(object.emailId);
            if (object.facebookId != null)
                message.facebookId = String(object.facebookId);
            if (object.deviceId != null)
                message.deviceId = String(object.deviceId);
            if (object.channel != null)
                message.channel = String(object.channel);
            if (object.loginClientToken != null) {
                if (typeof object.loginClientToken !== "object")
                    throw TypeError(".CVP.RequestLogin.loginClientToken: object expected");
                message.loginClientToken = $root.CVP.LoginClientToken.fromObject(object.loginClientToken);
            }
            if (object.facebookInfo != null) {
                if (typeof object.facebookInfo !== "object")
                    throw TypeError(".CVP.RequestLogin.facebookInfo: object expected");
                message.facebookInfo = $root.CVP.FacebookInfo.fromObject(object.facebookInfo);
            }
            if (object.emailInfo != null)
                message.emailInfo = String(object.emailInfo);
            return message;
        };

        /**
         * Creates a plain object from a RequestLogin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestLogin
         * @static
         * @param {CVP.RequestLogin} message RequestLogin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestLogin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.emailId = "";
                object.facebookId = "";
                object.deviceId = "";
                object.channel = "";
                object.loginClientToken = null;
                object.facebookInfo = null;
                object.emailInfo = "";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.emailId != null && message.hasOwnProperty("emailId"))
                object.emailId = message.emailId;
            if (message.facebookId != null && message.hasOwnProperty("facebookId"))
                object.facebookId = message.facebookId;
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                object.deviceId = message.deviceId;
            if (message.channel != null && message.hasOwnProperty("channel"))
                object.channel = message.channel;
            if (message.loginClientToken != null && message.hasOwnProperty("loginClientToken"))
                object.loginClientToken = $root.CVP.LoginClientToken.toObject(message.loginClientToken, options);
            if (message.facebookInfo != null && message.hasOwnProperty("facebookInfo"))
                object.facebookInfo = $root.CVP.FacebookInfo.toObject(message.facebookInfo, options);
            if (message.emailInfo != null && message.hasOwnProperty("emailInfo"))
                object.emailInfo = message.emailInfo;
            return object;
        };

        /**
         * Converts this RequestLogin to JSON.
         * @function toJSON
         * @memberof CVP.RequestLogin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestLogin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLogin;
    })();

    CVP.FacebookInfo = (function() {

        /**
         * Properties of a FacebookInfo.
         * @memberof CVP
         * @interface IFacebookInfo
         * @property {string|null} [avatarUrl] FacebookInfo avatarUrl
         * @property {string|null} [name] FacebookInfo name
         */

        /**
         * Constructs a new FacebookInfo.
         * @memberof CVP
         * @classdesc Represents a FacebookInfo.
         * @implements IFacebookInfo
         * @constructor
         * @param {CVP.IFacebookInfo=} [properties] Properties to set
         */
        function FacebookInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FacebookInfo avatarUrl.
         * @member {string} avatarUrl
         * @memberof CVP.FacebookInfo
         * @instance
         */
        FacebookInfo.prototype.avatarUrl = "";

        /**
         * FacebookInfo name.
         * @member {string} name
         * @memberof CVP.FacebookInfo
         * @instance
         */
        FacebookInfo.prototype.name = "";

        /**
         * Creates a new FacebookInfo instance using the specified properties.
         * @function create
         * @memberof CVP.FacebookInfo
         * @static
         * @param {CVP.IFacebookInfo=} [properties] Properties to set
         * @returns {CVP.FacebookInfo} FacebookInfo instance
         */
        FacebookInfo.create = function create(properties) {
            return new FacebookInfo(properties);
        };

        /**
         * Encodes the specified FacebookInfo message. Does not implicitly {@link CVP.FacebookInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.FacebookInfo
         * @static
         * @param {CVP.IFacebookInfo} message FacebookInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FacebookInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.avatarUrl);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified FacebookInfo message, length delimited. Does not implicitly {@link CVP.FacebookInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.FacebookInfo
         * @static
         * @param {CVP.IFacebookInfo} message FacebookInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FacebookInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FacebookInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.FacebookInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.FacebookInfo} FacebookInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FacebookInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.FacebookInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.avatarUrl = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FacebookInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.FacebookInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.FacebookInfo} FacebookInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FacebookInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FacebookInfo message.
         * @function verify
         * @memberof CVP.FacebookInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FacebookInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
                if (!$util.isString(message.avatarUrl))
                    return "avatarUrl: string expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a FacebookInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.FacebookInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.FacebookInfo} FacebookInfo
         */
        FacebookInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.FacebookInfo)
                return object;
            var message = new $root.CVP.FacebookInfo();
            if (object.avatarUrl != null)
                message.avatarUrl = String(object.avatarUrl);
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a FacebookInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.FacebookInfo
         * @static
         * @param {CVP.FacebookInfo} message FacebookInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FacebookInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.avatarUrl = "";
                object.name = "";
            }
            if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
                object.avatarUrl = message.avatarUrl;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this FacebookInfo to JSON.
         * @function toJSON
         * @memberof CVP.FacebookInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FacebookInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FacebookInfo;
    })();

    CVP.LoginClientToken = (function() {

        /**
         * Properties of a LoginClientToken.
         * @memberof CVP
         * @interface ILoginClientToken
         * @property {string|null} [adjustAdid] LoginClientToken adjustAdid
         * @property {string|null} [adjustIdfa] LoginClientToken adjustIdfa
         * @property {string|null} [adjustGpsAdid] LoginClientToken adjustGpsAdid
         * @property {string|null} [fbSource] LoginClientToken fbSource
         * @property {string|null} [fbQuery] LoginClientToken fbQuery
         * @property {string|null} [installChannel] LoginClientToken installChannel
         * @property {string|null} [pushUserId] LoginClientToken pushUserId
         * @property {string|null} [clientVersion] LoginClientToken clientVersion
         * @property {string|null} [systemLanguage] LoginClientToken systemLanguage
         */

        /**
         * Constructs a new LoginClientToken.
         * @memberof CVP
         * @classdesc Represents a LoginClientToken.
         * @implements ILoginClientToken
         * @constructor
         * @param {CVP.ILoginClientToken=} [properties] Properties to set
         */
        function LoginClientToken(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoginClientToken adjustAdid.
         * @member {string} adjustAdid
         * @memberof CVP.LoginClientToken
         * @instance
         */
        LoginClientToken.prototype.adjustAdid = "";

        /**
         * LoginClientToken adjustIdfa.
         * @member {string} adjustIdfa
         * @memberof CVP.LoginClientToken
         * @instance
         */
        LoginClientToken.prototype.adjustIdfa = "";

        /**
         * LoginClientToken adjustGpsAdid.
         * @member {string} adjustGpsAdid
         * @memberof CVP.LoginClientToken
         * @instance
         */
        LoginClientToken.prototype.adjustGpsAdid = "";

        /**
         * LoginClientToken fbSource.
         * @member {string} fbSource
         * @memberof CVP.LoginClientToken
         * @instance
         */
        LoginClientToken.prototype.fbSource = "";

        /**
         * LoginClientToken fbQuery.
         * @member {string} fbQuery
         * @memberof CVP.LoginClientToken
         * @instance
         */
        LoginClientToken.prototype.fbQuery = "";

        /**
         * LoginClientToken installChannel.
         * @member {string} installChannel
         * @memberof CVP.LoginClientToken
         * @instance
         */
        LoginClientToken.prototype.installChannel = "";

        /**
         * LoginClientToken pushUserId.
         * @member {string} pushUserId
         * @memberof CVP.LoginClientToken
         * @instance
         */
        LoginClientToken.prototype.pushUserId = "";

        /**
         * LoginClientToken clientVersion.
         * @member {string} clientVersion
         * @memberof CVP.LoginClientToken
         * @instance
         */
        LoginClientToken.prototype.clientVersion = "";

        /**
         * LoginClientToken systemLanguage.
         * @member {string} systemLanguage
         * @memberof CVP.LoginClientToken
         * @instance
         */
        LoginClientToken.prototype.systemLanguage = "";

        /**
         * Creates a new LoginClientToken instance using the specified properties.
         * @function create
         * @memberof CVP.LoginClientToken
         * @static
         * @param {CVP.ILoginClientToken=} [properties] Properties to set
         * @returns {CVP.LoginClientToken} LoginClientToken instance
         */
        LoginClientToken.create = function create(properties) {
            return new LoginClientToken(properties);
        };

        /**
         * Encodes the specified LoginClientToken message. Does not implicitly {@link CVP.LoginClientToken.verify|verify} messages.
         * @function encode
         * @memberof CVP.LoginClientToken
         * @static
         * @param {CVP.ILoginClientToken} message LoginClientToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoginClientToken.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.adjustAdid != null && message.hasOwnProperty("adjustAdid"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.adjustAdid);
            if (message.adjustIdfa != null && message.hasOwnProperty("adjustIdfa"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.adjustIdfa);
            if (message.adjustGpsAdid != null && message.hasOwnProperty("adjustGpsAdid"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.adjustGpsAdid);
            if (message.fbSource != null && message.hasOwnProperty("fbSource"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.fbSource);
            if (message.fbQuery != null && message.hasOwnProperty("fbQuery"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.fbQuery);
            if (message.installChannel != null && message.hasOwnProperty("installChannel"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.installChannel);
            if (message.pushUserId != null && message.hasOwnProperty("pushUserId"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.pushUserId);
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.clientVersion);
            if (message.systemLanguage != null && message.hasOwnProperty("systemLanguage"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.systemLanguage);
            return writer;
        };

        /**
         * Encodes the specified LoginClientToken message, length delimited. Does not implicitly {@link CVP.LoginClientToken.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.LoginClientToken
         * @static
         * @param {CVP.ILoginClientToken} message LoginClientToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoginClientToken.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoginClientToken message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.LoginClientToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.LoginClientToken} LoginClientToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoginClientToken.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.LoginClientToken();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.adjustAdid = reader.string();
                    break;
                case 2:
                    message.adjustIdfa = reader.string();
                    break;
                case 3:
                    message.adjustGpsAdid = reader.string();
                    break;
                case 4:
                    message.fbSource = reader.string();
                    break;
                case 5:
                    message.fbQuery = reader.string();
                    break;
                case 6:
                    message.installChannel = reader.string();
                    break;
                case 7:
                    message.pushUserId = reader.string();
                    break;
                case 8:
                    message.clientVersion = reader.string();
                    break;
                case 9:
                    message.systemLanguage = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoginClientToken message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.LoginClientToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.LoginClientToken} LoginClientToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoginClientToken.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoginClientToken message.
         * @function verify
         * @memberof CVP.LoginClientToken
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoginClientToken.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.adjustAdid != null && message.hasOwnProperty("adjustAdid"))
                if (!$util.isString(message.adjustAdid))
                    return "adjustAdid: string expected";
            if (message.adjustIdfa != null && message.hasOwnProperty("adjustIdfa"))
                if (!$util.isString(message.adjustIdfa))
                    return "adjustIdfa: string expected";
            if (message.adjustGpsAdid != null && message.hasOwnProperty("adjustGpsAdid"))
                if (!$util.isString(message.adjustGpsAdid))
                    return "adjustGpsAdid: string expected";
            if (message.fbSource != null && message.hasOwnProperty("fbSource"))
                if (!$util.isString(message.fbSource))
                    return "fbSource: string expected";
            if (message.fbQuery != null && message.hasOwnProperty("fbQuery"))
                if (!$util.isString(message.fbQuery))
                    return "fbQuery: string expected";
            if (message.installChannel != null && message.hasOwnProperty("installChannel"))
                if (!$util.isString(message.installChannel))
                    return "installChannel: string expected";
            if (message.pushUserId != null && message.hasOwnProperty("pushUserId"))
                if (!$util.isString(message.pushUserId))
                    return "pushUserId: string expected";
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!$util.isString(message.clientVersion))
                    return "clientVersion: string expected";
            if (message.systemLanguage != null && message.hasOwnProperty("systemLanguage"))
                if (!$util.isString(message.systemLanguage))
                    return "systemLanguage: string expected";
            return null;
        };

        /**
         * Creates a LoginClientToken message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.LoginClientToken
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.LoginClientToken} LoginClientToken
         */
        LoginClientToken.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.LoginClientToken)
                return object;
            var message = new $root.CVP.LoginClientToken();
            if (object.adjustAdid != null)
                message.adjustAdid = String(object.adjustAdid);
            if (object.adjustIdfa != null)
                message.adjustIdfa = String(object.adjustIdfa);
            if (object.adjustGpsAdid != null)
                message.adjustGpsAdid = String(object.adjustGpsAdid);
            if (object.fbSource != null)
                message.fbSource = String(object.fbSource);
            if (object.fbQuery != null)
                message.fbQuery = String(object.fbQuery);
            if (object.installChannel != null)
                message.installChannel = String(object.installChannel);
            if (object.pushUserId != null)
                message.pushUserId = String(object.pushUserId);
            if (object.clientVersion != null)
                message.clientVersion = String(object.clientVersion);
            if (object.systemLanguage != null)
                message.systemLanguage = String(object.systemLanguage);
            return message;
        };

        /**
         * Creates a plain object from a LoginClientToken message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.LoginClientToken
         * @static
         * @param {CVP.LoginClientToken} message LoginClientToken
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoginClientToken.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.adjustAdid = "";
                object.adjustIdfa = "";
                object.adjustGpsAdid = "";
                object.fbSource = "";
                object.fbQuery = "";
                object.installChannel = "";
                object.pushUserId = "";
                object.clientVersion = "";
                object.systemLanguage = "";
            }
            if (message.adjustAdid != null && message.hasOwnProperty("adjustAdid"))
                object.adjustAdid = message.adjustAdid;
            if (message.adjustIdfa != null && message.hasOwnProperty("adjustIdfa"))
                object.adjustIdfa = message.adjustIdfa;
            if (message.adjustGpsAdid != null && message.hasOwnProperty("adjustGpsAdid"))
                object.adjustGpsAdid = message.adjustGpsAdid;
            if (message.fbSource != null && message.hasOwnProperty("fbSource"))
                object.fbSource = message.fbSource;
            if (message.fbQuery != null && message.hasOwnProperty("fbQuery"))
                object.fbQuery = message.fbQuery;
            if (message.installChannel != null && message.hasOwnProperty("installChannel"))
                object.installChannel = message.installChannel;
            if (message.pushUserId != null && message.hasOwnProperty("pushUserId"))
                object.pushUserId = message.pushUserId;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = message.clientVersion;
            if (message.systemLanguage != null && message.hasOwnProperty("systemLanguage"))
                object.systemLanguage = message.systemLanguage;
            return object;
        };

        /**
         * Converts this LoginClientToken to JSON.
         * @function toJSON
         * @memberof CVP.LoginClientToken
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoginClientToken.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoginClientToken;
    })();

    CVP.RequestLoginResult = (function() {

        /**
         * Properties of a RequestLoginResult.
         * @memberof CVP
         * @interface IRequestLoginResult
         * @property {CVP.IUserData} userData RequestLoginResult userData
         */

        /**
         * Constructs a new RequestLoginResult.
         * @memberof CVP
         * @classdesc Represents a RequestLoginResult.
         * @implements IRequestLoginResult
         * @constructor
         * @param {CVP.IRequestLoginResult=} [properties] Properties to set
         */
        function RequestLoginResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestLoginResult userData.
         * @member {CVP.IUserData} userData
         * @memberof CVP.RequestLoginResult
         * @instance
         */
        RequestLoginResult.prototype.userData = null;

        /**
         * Creates a new RequestLoginResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestLoginResult
         * @static
         * @param {CVP.IRequestLoginResult=} [properties] Properties to set
         * @returns {CVP.RequestLoginResult} RequestLoginResult instance
         */
        RequestLoginResult.create = function create(properties) {
            return new RequestLoginResult(properties);
        };

        /**
         * Encodes the specified RequestLoginResult message. Does not implicitly {@link CVP.RequestLoginResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestLoginResult
         * @static
         * @param {CVP.IRequestLoginResult} message RequestLoginResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLoginResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            $root.CVP.UserData.encode(message.userData, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestLoginResult message, length delimited. Does not implicitly {@link CVP.RequestLoginResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestLoginResult
         * @static
         * @param {CVP.IRequestLoginResult} message RequestLoginResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLoginResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestLoginResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestLoginResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestLoginResult} RequestLoginResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLoginResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestLoginResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userData = $root.CVP.UserData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("userData"))
                throw $util.ProtocolError("missing required 'userData'", { instance: message });
            return message;
        };

        /**
         * Decodes a RequestLoginResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestLoginResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestLoginResult} RequestLoginResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLoginResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestLoginResult message.
         * @function verify
         * @memberof CVP.RequestLoginResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestLoginResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            {
                var error = $root.CVP.UserData.verify(message.userData);
                if (error)
                    return "userData." + error;
            }
            return null;
        };

        /**
         * Creates a RequestLoginResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestLoginResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestLoginResult} RequestLoginResult
         */
        RequestLoginResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestLoginResult)
                return object;
            var message = new $root.CVP.RequestLoginResult();
            if (object.userData != null) {
                if (typeof object.userData !== "object")
                    throw TypeError(".CVP.RequestLoginResult.userData: object expected");
                message.userData = $root.CVP.UserData.fromObject(object.userData);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestLoginResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestLoginResult
         * @static
         * @param {CVP.RequestLoginResult} message RequestLoginResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestLoginResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.userData = null;
            if (message.userData != null && message.hasOwnProperty("userData"))
                object.userData = $root.CVP.UserData.toObject(message.userData, options);
            return object;
        };

        /**
         * Converts this RequestLoginResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestLoginResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestLoginResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLoginResult;
    })();

    CVP.BindData = (function() {

        /**
         * Properties of a BindData.
         * @memberof CVP
         * @interface IBindData
         * @property {string|null} [facebookId] BindData facebookId
         * @property {string|null} [emailId] BindData emailId
         */

        /**
         * Constructs a new BindData.
         * @memberof CVP
         * @classdesc Represents a BindData.
         * @implements IBindData
         * @constructor
         * @param {CVP.IBindData=} [properties] Properties to set
         */
        function BindData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BindData facebookId.
         * @member {string} facebookId
         * @memberof CVP.BindData
         * @instance
         */
        BindData.prototype.facebookId = "";

        /**
         * BindData emailId.
         * @member {string} emailId
         * @memberof CVP.BindData
         * @instance
         */
        BindData.prototype.emailId = "";

        /**
         * Creates a new BindData instance using the specified properties.
         * @function create
         * @memberof CVP.BindData
         * @static
         * @param {CVP.IBindData=} [properties] Properties to set
         * @returns {CVP.BindData} BindData instance
         */
        BindData.create = function create(properties) {
            return new BindData(properties);
        };

        /**
         * Encodes the specified BindData message. Does not implicitly {@link CVP.BindData.verify|verify} messages.
         * @function encode
         * @memberof CVP.BindData
         * @static
         * @param {CVP.IBindData} message BindData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BindData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.facebookId != null && message.hasOwnProperty("facebookId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.facebookId);
            if (message.emailId != null && message.hasOwnProperty("emailId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.emailId);
            return writer;
        };

        /**
         * Encodes the specified BindData message, length delimited. Does not implicitly {@link CVP.BindData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.BindData
         * @static
         * @param {CVP.IBindData} message BindData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BindData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BindData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.BindData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.BindData} BindData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BindData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.BindData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.facebookId = reader.string();
                    break;
                case 2:
                    message.emailId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BindData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.BindData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.BindData} BindData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BindData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BindData message.
         * @function verify
         * @memberof CVP.BindData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BindData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.facebookId != null && message.hasOwnProperty("facebookId"))
                if (!$util.isString(message.facebookId))
                    return "facebookId: string expected";
            if (message.emailId != null && message.hasOwnProperty("emailId"))
                if (!$util.isString(message.emailId))
                    return "emailId: string expected";
            return null;
        };

        /**
         * Creates a BindData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.BindData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.BindData} BindData
         */
        BindData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.BindData)
                return object;
            var message = new $root.CVP.BindData();
            if (object.facebookId != null)
                message.facebookId = String(object.facebookId);
            if (object.emailId != null)
                message.emailId = String(object.emailId);
            return message;
        };

        /**
         * Creates a plain object from a BindData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.BindData
         * @static
         * @param {CVP.BindData} message BindData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BindData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.facebookId = "";
                object.emailId = "";
            }
            if (message.facebookId != null && message.hasOwnProperty("facebookId"))
                object.facebookId = message.facebookId;
            if (message.emailId != null && message.hasOwnProperty("emailId"))
                object.emailId = message.emailId;
            return object;
        };

        /**
         * Converts this BindData to JSON.
         * @function toJSON
         * @memberof CVP.BindData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BindData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BindData;
    })();

    CVP.UserData = (function() {

        /**
         * Properties of a UserData.
         * @memberof CVP
         * @interface IUserData
         * @property {string|null} [name] UserData name
         * @property {number|null} [level] UserData level
         * @property {number|null} [curExp] UserData curExp
         * @property {number|Long|null} [nextExp] UserData nextExp
         * @property {number|Long|null} [monentsCoin] UserData monentsCoin
         * @property {number|null} [cash] UserData cash
         * @property {number|Long|null} [vipExp] UserData vipExp
         * @property {number|Long|null} [vipNextExp] UserData vipNextExp
         * @property {number|null} [vipLevel] UserData vipLevel
         * @property {number|null} [iconId] UserData iconId
         * @property {number|Long|null} [userId] UserData userId
         * @property {CVP.IBindData|null} [bindData] UserData bindData
         * @property {number|null} [vaultKey] UserData vaultKey
         * @property {string|null} [headSp] UserData headSp
         * @property {CVP.SexType|null} [sex] UserData sex
         * @property {number|null} [scratchCards] UserData scratchCards
         * @property {CVP.IFacebookInfo|null} [facebbookInfo] UserData facebbookInfo
         * @property {boolean|null} [isDebugUser] UserData isDebugUser
         * @property {CVP.TutorialState|null} [tutorialState] UserData tutorialState
         * @property {boolean|null} [isPaid] UserData isPaid
         * @property {string|null} [registerDate] UserData registerDate
         * @property {string|null} [country] UserData country
         * @property {boolean|null} [isSubscribe] UserData isSubscribe
         * @property {number|null} [loginDays] UserData loginDays
         */

        /**
         * Constructs a new UserData.
         * @memberof CVP
         * @classdesc Represents a UserData.
         * @implements IUserData
         * @constructor
         * @param {CVP.IUserData=} [properties] Properties to set
         */
        function UserData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserData name.
         * @member {string} name
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.name = "";

        /**
         * UserData level.
         * @member {number} level
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.level = 0;

        /**
         * UserData curExp.
         * @member {number} curExp
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.curExp = 0;

        /**
         * UserData nextExp.
         * @member {number|Long} nextExp
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.nextExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserData monentsCoin.
         * @member {number|Long} monentsCoin
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.monentsCoin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserData cash.
         * @member {number} cash
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.cash = 0;

        /**
         * UserData vipExp.
         * @member {number|Long} vipExp
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.vipExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserData vipNextExp.
         * @member {number|Long} vipNextExp
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.vipNextExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserData vipLevel.
         * @member {number} vipLevel
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.vipLevel = 0;

        /**
         * UserData iconId.
         * @member {number} iconId
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.iconId = 0;

        /**
         * UserData userId.
         * @member {number|Long} userId
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserData bindData.
         * @member {CVP.IBindData|null|undefined} bindData
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.bindData = null;

        /**
         * UserData vaultKey.
         * @member {number} vaultKey
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.vaultKey = 0;

        /**
         * UserData headSp.
         * @member {string} headSp
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.headSp = "";

        /**
         * UserData sex.
         * @member {CVP.SexType} sex
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.sex = 1;

        /**
         * UserData scratchCards.
         * @member {number} scratchCards
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.scratchCards = 0;

        /**
         * UserData facebbookInfo.
         * @member {CVP.IFacebookInfo|null|undefined} facebbookInfo
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.facebbookInfo = null;

        /**
         * UserData isDebugUser.
         * @member {boolean} isDebugUser
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.isDebugUser = false;

        /**
         * UserData tutorialState.
         * @member {CVP.TutorialState} tutorialState
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.tutorialState = 1;

        /**
         * UserData isPaid.
         * @member {boolean} isPaid
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.isPaid = false;

        /**
         * UserData registerDate.
         * @member {string} registerDate
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.registerDate = "";

        /**
         * UserData country.
         * @member {string} country
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.country = "";

        /**
         * UserData isSubscribe.
         * @member {boolean} isSubscribe
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.isSubscribe = false;

        /**
         * UserData loginDays.
         * @member {number} loginDays
         * @memberof CVP.UserData
         * @instance
         */
        UserData.prototype.loginDays = 0;

        /**
         * Creates a new UserData instance using the specified properties.
         * @function create
         * @memberof CVP.UserData
         * @static
         * @param {CVP.IUserData=} [properties] Properties to set
         * @returns {CVP.UserData} UserData instance
         */
        UserData.create = function create(properties) {
            return new UserData(properties);
        };

        /**
         * Encodes the specified UserData message. Does not implicitly {@link CVP.UserData.verify|verify} messages.
         * @function encode
         * @memberof CVP.UserData
         * @static
         * @param {CVP.IUserData} message UserData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.level);
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.curExp);
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.nextExp);
            if (message.monentsCoin != null && message.hasOwnProperty("monentsCoin"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.monentsCoin);
            if (message.cash != null && message.hasOwnProperty("cash"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.cash);
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.vipExp);
            if (message.vipNextExp != null && message.hasOwnProperty("vipNextExp"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.vipNextExp);
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.vipLevel);
            if (message.iconId != null && message.hasOwnProperty("iconId"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.iconId);
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 11, wireType 0 =*/88).int64(message.userId);
            if (message.bindData != null && message.hasOwnProperty("bindData"))
                $root.CVP.BindData.encode(message.bindData, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.vaultKey != null && message.hasOwnProperty("vaultKey"))
                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.vaultKey);
            if (message.headSp != null && message.hasOwnProperty("headSp"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.headSp);
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.sex);
            if (message.scratchCards != null && message.hasOwnProperty("scratchCards"))
                writer.uint32(/* id 16, wireType 0 =*/128).int32(message.scratchCards);
            if (message.facebbookInfo != null && message.hasOwnProperty("facebbookInfo"))
                $root.CVP.FacebookInfo.encode(message.facebbookInfo, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            if (message.isDebugUser != null && message.hasOwnProperty("isDebugUser"))
                writer.uint32(/* id 18, wireType 0 =*/144).bool(message.isDebugUser);
            if (message.tutorialState != null && message.hasOwnProperty("tutorialState"))
                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.tutorialState);
            if (message.isPaid != null && message.hasOwnProperty("isPaid"))
                writer.uint32(/* id 20, wireType 0 =*/160).bool(message.isPaid);
            if (message.registerDate != null && message.hasOwnProperty("registerDate"))
                writer.uint32(/* id 21, wireType 2 =*/170).string(message.registerDate);
            if (message.country != null && message.hasOwnProperty("country"))
                writer.uint32(/* id 22, wireType 2 =*/178).string(message.country);
            if (message.isSubscribe != null && message.hasOwnProperty("isSubscribe"))
                writer.uint32(/* id 23, wireType 0 =*/184).bool(message.isSubscribe);
            if (message.loginDays != null && message.hasOwnProperty("loginDays"))
                writer.uint32(/* id 24, wireType 0 =*/192).int32(message.loginDays);
            return writer;
        };

        /**
         * Encodes the specified UserData message, length delimited. Does not implicitly {@link CVP.UserData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UserData
         * @static
         * @param {CVP.IUserData} message UserData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UserData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UserData} UserData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UserData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.level = reader.int32();
                    break;
                case 3:
                    message.curExp = reader.double();
                    break;
                case 4:
                    message.nextExp = reader.int64();
                    break;
                case 5:
                    message.monentsCoin = reader.int64();
                    break;
                case 6:
                    message.cash = reader.double();
                    break;
                case 7:
                    message.vipExp = reader.int64();
                    break;
                case 8:
                    message.vipNextExp = reader.int64();
                    break;
                case 9:
                    message.vipLevel = reader.int32();
                    break;
                case 10:
                    message.iconId = reader.int32();
                    break;
                case 11:
                    message.userId = reader.int64();
                    break;
                case 12:
                    message.bindData = $root.CVP.BindData.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.vaultKey = reader.int32();
                    break;
                case 14:
                    message.headSp = reader.string();
                    break;
                case 15:
                    message.sex = reader.int32();
                    break;
                case 16:
                    message.scratchCards = reader.int32();
                    break;
                case 17:
                    message.facebbookInfo = $root.CVP.FacebookInfo.decode(reader, reader.uint32());
                    break;
                case 18:
                    message.isDebugUser = reader.bool();
                    break;
                case 19:
                    message.tutorialState = reader.int32();
                    break;
                case 20:
                    message.isPaid = reader.bool();
                    break;
                case 21:
                    message.registerDate = reader.string();
                    break;
                case 22:
                    message.country = reader.string();
                    break;
                case 23:
                    message.isSubscribe = reader.bool();
                    break;
                case 24:
                    message.loginDays = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UserData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UserData} UserData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserData message.
         * @function verify
         * @memberof CVP.UserData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                if (typeof message.curExp !== "number")
                    return "curExp: number expected";
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                if (!$util.isInteger(message.nextExp) && !(message.nextExp && $util.isInteger(message.nextExp.low) && $util.isInteger(message.nextExp.high)))
                    return "nextExp: integer|Long expected";
            if (message.monentsCoin != null && message.hasOwnProperty("monentsCoin"))
                if (!$util.isInteger(message.monentsCoin) && !(message.monentsCoin && $util.isInteger(message.monentsCoin.low) && $util.isInteger(message.monentsCoin.high)))
                    return "monentsCoin: integer|Long expected";
            if (message.cash != null && message.hasOwnProperty("cash"))
                if (typeof message.cash !== "number")
                    return "cash: number expected";
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                if (!$util.isInteger(message.vipExp) && !(message.vipExp && $util.isInteger(message.vipExp.low) && $util.isInteger(message.vipExp.high)))
                    return "vipExp: integer|Long expected";
            if (message.vipNextExp != null && message.hasOwnProperty("vipNextExp"))
                if (!$util.isInteger(message.vipNextExp) && !(message.vipNextExp && $util.isInteger(message.vipNextExp.low) && $util.isInteger(message.vipNextExp.high)))
                    return "vipNextExp: integer|Long expected";
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                if (!$util.isInteger(message.vipLevel))
                    return "vipLevel: integer expected";
            if (message.iconId != null && message.hasOwnProperty("iconId"))
                if (!$util.isInteger(message.iconId))
                    return "iconId: integer expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.bindData != null && message.hasOwnProperty("bindData")) {
                var error = $root.CVP.BindData.verify(message.bindData);
                if (error)
                    return "bindData." + error;
            }
            if (message.vaultKey != null && message.hasOwnProperty("vaultKey"))
                if (!$util.isInteger(message.vaultKey))
                    return "vaultKey: integer expected";
            if (message.headSp != null && message.hasOwnProperty("headSp"))
                if (!$util.isString(message.headSp))
                    return "headSp: string expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                switch (message.sex) {
                default:
                    return "sex: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.scratchCards != null && message.hasOwnProperty("scratchCards"))
                if (!$util.isInteger(message.scratchCards))
                    return "scratchCards: integer expected";
            if (message.facebbookInfo != null && message.hasOwnProperty("facebbookInfo")) {
                var error = $root.CVP.FacebookInfo.verify(message.facebbookInfo);
                if (error)
                    return "facebbookInfo." + error;
            }
            if (message.isDebugUser != null && message.hasOwnProperty("isDebugUser"))
                if (typeof message.isDebugUser !== "boolean")
                    return "isDebugUser: boolean expected";
            if (message.tutorialState != null && message.hasOwnProperty("tutorialState"))
                switch (message.tutorialState) {
                default:
                    return "tutorialState: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.isPaid != null && message.hasOwnProperty("isPaid"))
                if (typeof message.isPaid !== "boolean")
                    return "isPaid: boolean expected";
            if (message.registerDate != null && message.hasOwnProperty("registerDate"))
                if (!$util.isString(message.registerDate))
                    return "registerDate: string expected";
            if (message.country != null && message.hasOwnProperty("country"))
                if (!$util.isString(message.country))
                    return "country: string expected";
            if (message.isSubscribe != null && message.hasOwnProperty("isSubscribe"))
                if (typeof message.isSubscribe !== "boolean")
                    return "isSubscribe: boolean expected";
            if (message.loginDays != null && message.hasOwnProperty("loginDays"))
                if (!$util.isInteger(message.loginDays))
                    return "loginDays: integer expected";
            return null;
        };

        /**
         * Creates a UserData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UserData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UserData} UserData
         */
        UserData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UserData)
                return object;
            var message = new $root.CVP.UserData();
            if (object.name != null)
                message.name = String(object.name);
            if (object.level != null)
                message.level = object.level | 0;
            if (object.curExp != null)
                message.curExp = Number(object.curExp);
            if (object.nextExp != null)
                if ($util.Long)
                    (message.nextExp = $util.Long.fromValue(object.nextExp)).unsigned = false;
                else if (typeof object.nextExp === "string")
                    message.nextExp = parseInt(object.nextExp, 10);
                else if (typeof object.nextExp === "number")
                    message.nextExp = object.nextExp;
                else if (typeof object.nextExp === "object")
                    message.nextExp = new $util.LongBits(object.nextExp.low >>> 0, object.nextExp.high >>> 0).toNumber();
            if (object.monentsCoin != null)
                if ($util.Long)
                    (message.monentsCoin = $util.Long.fromValue(object.monentsCoin)).unsigned = false;
                else if (typeof object.monentsCoin === "string")
                    message.monentsCoin = parseInt(object.monentsCoin, 10);
                else if (typeof object.monentsCoin === "number")
                    message.monentsCoin = object.monentsCoin;
                else if (typeof object.monentsCoin === "object")
                    message.monentsCoin = new $util.LongBits(object.monentsCoin.low >>> 0, object.monentsCoin.high >>> 0).toNumber();
            if (object.cash != null)
                message.cash = Number(object.cash);
            if (object.vipExp != null)
                if ($util.Long)
                    (message.vipExp = $util.Long.fromValue(object.vipExp)).unsigned = false;
                else if (typeof object.vipExp === "string")
                    message.vipExp = parseInt(object.vipExp, 10);
                else if (typeof object.vipExp === "number")
                    message.vipExp = object.vipExp;
                else if (typeof object.vipExp === "object")
                    message.vipExp = new $util.LongBits(object.vipExp.low >>> 0, object.vipExp.high >>> 0).toNumber();
            if (object.vipNextExp != null)
                if ($util.Long)
                    (message.vipNextExp = $util.Long.fromValue(object.vipNextExp)).unsigned = false;
                else if (typeof object.vipNextExp === "string")
                    message.vipNextExp = parseInt(object.vipNextExp, 10);
                else if (typeof object.vipNextExp === "number")
                    message.vipNextExp = object.vipNextExp;
                else if (typeof object.vipNextExp === "object")
                    message.vipNextExp = new $util.LongBits(object.vipNextExp.low >>> 0, object.vipNextExp.high >>> 0).toNumber();
            if (object.vipLevel != null)
                message.vipLevel = object.vipLevel | 0;
            if (object.iconId != null)
                message.iconId = object.iconId | 0;
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.bindData != null) {
                if (typeof object.bindData !== "object")
                    throw TypeError(".CVP.UserData.bindData: object expected");
                message.bindData = $root.CVP.BindData.fromObject(object.bindData);
            }
            if (object.vaultKey != null)
                message.vaultKey = object.vaultKey | 0;
            if (object.headSp != null)
                message.headSp = String(object.headSp);
            switch (object.sex) {
            case "male":
            case 1:
                message.sex = 1;
                break;
            case "female":
            case 2:
                message.sex = 2;
                break;
            case "hide":
            case 3:
                message.sex = 3;
                break;
            }
            if (object.scratchCards != null)
                message.scratchCards = object.scratchCards | 0;
            if (object.facebbookInfo != null) {
                if (typeof object.facebbookInfo !== "object")
                    throw TypeError(".CVP.UserData.facebbookInfo: object expected");
                message.facebbookInfo = $root.CVP.FacebookInfo.fromObject(object.facebbookInfo);
            }
            if (object.isDebugUser != null)
                message.isDebugUser = Boolean(object.isDebugUser);
            switch (object.tutorialState) {
            case "NEWUSER":
            case 1:
                message.tutorialState = 1;
                break;
            case "PROGERSS":
            case 2:
                message.tutorialState = 2;
                break;
            case "FINISH":
            case 3:
                message.tutorialState = 3;
                break;
            }
            if (object.isPaid != null)
                message.isPaid = Boolean(object.isPaid);
            if (object.registerDate != null)
                message.registerDate = String(object.registerDate);
            if (object.country != null)
                message.country = String(object.country);
            if (object.isSubscribe != null)
                message.isSubscribe = Boolean(object.isSubscribe);
            if (object.loginDays != null)
                message.loginDays = object.loginDays | 0;
            return message;
        };

        /**
         * Creates a plain object from a UserData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UserData
         * @static
         * @param {CVP.UserData} message UserData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.level = 0;
                object.curExp = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.nextExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.nextExp = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.monentsCoin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.monentsCoin = options.longs === String ? "0" : 0;
                object.cash = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.vipExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.vipExp = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.vipNextExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.vipNextExp = options.longs === String ? "0" : 0;
                object.vipLevel = 0;
                object.iconId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.bindData = null;
                object.vaultKey = 0;
                object.headSp = "";
                object.sex = options.enums === String ? "male" : 1;
                object.scratchCards = 0;
                object.facebbookInfo = null;
                object.isDebugUser = false;
                object.tutorialState = options.enums === String ? "NEWUSER" : 1;
                object.isPaid = false;
                object.registerDate = "";
                object.country = "";
                object.isSubscribe = false;
                object.loginDays = 0;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                object.curExp = options.json && !isFinite(message.curExp) ? String(message.curExp) : message.curExp;
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                if (typeof message.nextExp === "number")
                    object.nextExp = options.longs === String ? String(message.nextExp) : message.nextExp;
                else
                    object.nextExp = options.longs === String ? $util.Long.prototype.toString.call(message.nextExp) : options.longs === Number ? new $util.LongBits(message.nextExp.low >>> 0, message.nextExp.high >>> 0).toNumber() : message.nextExp;
            if (message.monentsCoin != null && message.hasOwnProperty("monentsCoin"))
                if (typeof message.monentsCoin === "number")
                    object.monentsCoin = options.longs === String ? String(message.monentsCoin) : message.monentsCoin;
                else
                    object.monentsCoin = options.longs === String ? $util.Long.prototype.toString.call(message.monentsCoin) : options.longs === Number ? new $util.LongBits(message.monentsCoin.low >>> 0, message.monentsCoin.high >>> 0).toNumber() : message.monentsCoin;
            if (message.cash != null && message.hasOwnProperty("cash"))
                object.cash = options.json && !isFinite(message.cash) ? String(message.cash) : message.cash;
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                if (typeof message.vipExp === "number")
                    object.vipExp = options.longs === String ? String(message.vipExp) : message.vipExp;
                else
                    object.vipExp = options.longs === String ? $util.Long.prototype.toString.call(message.vipExp) : options.longs === Number ? new $util.LongBits(message.vipExp.low >>> 0, message.vipExp.high >>> 0).toNumber() : message.vipExp;
            if (message.vipNextExp != null && message.hasOwnProperty("vipNextExp"))
                if (typeof message.vipNextExp === "number")
                    object.vipNextExp = options.longs === String ? String(message.vipNextExp) : message.vipNextExp;
                else
                    object.vipNextExp = options.longs === String ? $util.Long.prototype.toString.call(message.vipNextExp) : options.longs === Number ? new $util.LongBits(message.vipNextExp.low >>> 0, message.vipNextExp.high >>> 0).toNumber() : message.vipNextExp;
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                object.vipLevel = message.vipLevel;
            if (message.iconId != null && message.hasOwnProperty("iconId"))
                object.iconId = message.iconId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.bindData != null && message.hasOwnProperty("bindData"))
                object.bindData = $root.CVP.BindData.toObject(message.bindData, options);
            if (message.vaultKey != null && message.hasOwnProperty("vaultKey"))
                object.vaultKey = message.vaultKey;
            if (message.headSp != null && message.hasOwnProperty("headSp"))
                object.headSp = message.headSp;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = options.enums === String ? $root.CVP.SexType[message.sex] : message.sex;
            if (message.scratchCards != null && message.hasOwnProperty("scratchCards"))
                object.scratchCards = message.scratchCards;
            if (message.facebbookInfo != null && message.hasOwnProperty("facebbookInfo"))
                object.facebbookInfo = $root.CVP.FacebookInfo.toObject(message.facebbookInfo, options);
            if (message.isDebugUser != null && message.hasOwnProperty("isDebugUser"))
                object.isDebugUser = message.isDebugUser;
            if (message.tutorialState != null && message.hasOwnProperty("tutorialState"))
                object.tutorialState = options.enums === String ? $root.CVP.TutorialState[message.tutorialState] : message.tutorialState;
            if (message.isPaid != null && message.hasOwnProperty("isPaid"))
                object.isPaid = message.isPaid;
            if (message.registerDate != null && message.hasOwnProperty("registerDate"))
                object.registerDate = message.registerDate;
            if (message.country != null && message.hasOwnProperty("country"))
                object.country = message.country;
            if (message.isSubscribe != null && message.hasOwnProperty("isSubscribe"))
                object.isSubscribe = message.isSubscribe;
            if (message.loginDays != null && message.hasOwnProperty("loginDays"))
                object.loginDays = message.loginDays;
            return object;
        };

        /**
         * Converts this UserData to JSON.
         * @function toJSON
         * @memberof CVP.UserData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserData;
    })();

    /**
     * OfflineType enum.
     * @name CVP.OfflineType
     * @enum {string}
     * @property {number} CHANGEBIND=1 CHANGEBIND value
     * @property {number} REPEATLOGIN=2 REPEATLOGIN value
     */
    CVP.OfflineType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "CHANGEBIND"] = 1;
        values[valuesById[2] = "REPEATLOGIN"] = 2;
        return values;
    })();

    CVP.UpdataMakeOffline = (function() {

        /**
         * Properties of an UpdataMakeOffline.
         * @memberof CVP
         * @interface IUpdataMakeOffline
         * @property {CVP.OfflineType|null} [offlineType] UpdataMakeOffline offlineType
         */

        /**
         * Constructs a new UpdataMakeOffline.
         * @memberof CVP
         * @classdesc Represents an UpdataMakeOffline.
         * @implements IUpdataMakeOffline
         * @constructor
         * @param {CVP.IUpdataMakeOffline=} [properties] Properties to set
         */
        function UpdataMakeOffline(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdataMakeOffline offlineType.
         * @member {CVP.OfflineType} offlineType
         * @memberof CVP.UpdataMakeOffline
         * @instance
         */
        UpdataMakeOffline.prototype.offlineType = 1;

        /**
         * Creates a new UpdataMakeOffline instance using the specified properties.
         * @function create
         * @memberof CVP.UpdataMakeOffline
         * @static
         * @param {CVP.IUpdataMakeOffline=} [properties] Properties to set
         * @returns {CVP.UpdataMakeOffline} UpdataMakeOffline instance
         */
        UpdataMakeOffline.create = function create(properties) {
            return new UpdataMakeOffline(properties);
        };

        /**
         * Encodes the specified UpdataMakeOffline message. Does not implicitly {@link CVP.UpdataMakeOffline.verify|verify} messages.
         * @function encode
         * @memberof CVP.UpdataMakeOffline
         * @static
         * @param {CVP.IUpdataMakeOffline} message UpdataMakeOffline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdataMakeOffline.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.offlineType != null && message.hasOwnProperty("offlineType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.offlineType);
            return writer;
        };

        /**
         * Encodes the specified UpdataMakeOffline message, length delimited. Does not implicitly {@link CVP.UpdataMakeOffline.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UpdataMakeOffline
         * @static
         * @param {CVP.IUpdataMakeOffline} message UpdataMakeOffline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdataMakeOffline.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdataMakeOffline message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UpdataMakeOffline
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UpdataMakeOffline} UpdataMakeOffline
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdataMakeOffline.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UpdataMakeOffline();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.offlineType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdataMakeOffline message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UpdataMakeOffline
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UpdataMakeOffline} UpdataMakeOffline
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdataMakeOffline.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdataMakeOffline message.
         * @function verify
         * @memberof CVP.UpdataMakeOffline
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdataMakeOffline.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.offlineType != null && message.hasOwnProperty("offlineType"))
                switch (message.offlineType) {
                default:
                    return "offlineType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates an UpdataMakeOffline message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UpdataMakeOffline
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UpdataMakeOffline} UpdataMakeOffline
         */
        UpdataMakeOffline.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UpdataMakeOffline)
                return object;
            var message = new $root.CVP.UpdataMakeOffline();
            switch (object.offlineType) {
            case "CHANGEBIND":
            case 1:
                message.offlineType = 1;
                break;
            case "REPEATLOGIN":
            case 2:
                message.offlineType = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an UpdataMakeOffline message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UpdataMakeOffline
         * @static
         * @param {CVP.UpdataMakeOffline} message UpdataMakeOffline
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdataMakeOffline.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.offlineType = options.enums === String ? "CHANGEBIND" : 1;
            if (message.offlineType != null && message.hasOwnProperty("offlineType"))
                object.offlineType = options.enums === String ? $root.CVP.OfflineType[message.offlineType] : message.offlineType;
            return object;
        };

        /**
         * Converts this UpdataMakeOffline to JSON.
         * @function toJSON
         * @memberof CVP.UpdataMakeOffline
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdataMakeOffline.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdataMakeOffline;
    })();

    CVP.ping = (function() {

        /**
         * Properties of a ping.
         * @memberof CVP
         * @interface Iping
         */

        /**
         * Constructs a new ping.
         * @memberof CVP
         * @classdesc Represents a ping.
         * @implements Iping
         * @constructor
         * @param {CVP.Iping=} [properties] Properties to set
         */
        function ping(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ping instance using the specified properties.
         * @function create
         * @memberof CVP.ping
         * @static
         * @param {CVP.Iping=} [properties] Properties to set
         * @returns {CVP.ping} ping instance
         */
        ping.create = function create(properties) {
            return new ping(properties);
        };

        /**
         * Encodes the specified ping message. Does not implicitly {@link CVP.ping.verify|verify} messages.
         * @function encode
         * @memberof CVP.ping
         * @static
         * @param {CVP.Iping} message ping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ping.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ping message, length delimited. Does not implicitly {@link CVP.ping.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.ping
         * @static
         * @param {CVP.Iping} message ping message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ping.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ping message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.ping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.ping} ping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ping.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.ping();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ping message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.ping
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.ping} ping
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ping.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ping message.
         * @function verify
         * @memberof CVP.ping
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ping.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ping message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.ping
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.ping} ping
         */
        ping.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.ping)
                return object;
            return new $root.CVP.ping();
        };

        /**
         * Creates a plain object from a ping message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.ping
         * @static
         * @param {CVP.ping} message ping
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ping.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ping to JSON.
         * @function toJSON
         * @memberof CVP.ping
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ping.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ping;
    })();

    CVP.pong = (function() {

        /**
         * Properties of a pong.
         * @memberof CVP
         * @interface Ipong
         */

        /**
         * Constructs a new pong.
         * @memberof CVP
         * @classdesc Represents a pong.
         * @implements Ipong
         * @constructor
         * @param {CVP.Ipong=} [properties] Properties to set
         */
        function pong(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new pong instance using the specified properties.
         * @function create
         * @memberof CVP.pong
         * @static
         * @param {CVP.Ipong=} [properties] Properties to set
         * @returns {CVP.pong} pong instance
         */
        pong.create = function create(properties) {
            return new pong(properties);
        };

        /**
         * Encodes the specified pong message. Does not implicitly {@link CVP.pong.verify|verify} messages.
         * @function encode
         * @memberof CVP.pong
         * @static
         * @param {CVP.Ipong} message pong message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pong.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified pong message, length delimited. Does not implicitly {@link CVP.pong.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.pong
         * @static
         * @param {CVP.Ipong} message pong message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        pong.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a pong message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.pong
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.pong} pong
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        pong.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.pong();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a pong message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.pong
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.pong} pong
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        pong.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a pong message.
         * @function verify
         * @memberof CVP.pong
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        pong.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a pong message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.pong
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.pong} pong
         */
        pong.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.pong)
                return object;
            return new $root.CVP.pong();
        };

        /**
         * Creates a plain object from a pong message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.pong
         * @static
         * @param {CVP.pong} message pong
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        pong.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this pong to JSON.
         * @function toJSON
         * @memberof CVP.pong
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        pong.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return pong;
    })();

    CVP.RequestProfileData = (function() {

        /**
         * Properties of a RequestProfileData.
         * @memberof CVP
         * @interface IRequestProfileData
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestProfileData commonParams
         */

        /**
         * Constructs a new RequestProfileData.
         * @memberof CVP
         * @classdesc Represents a RequestProfileData.
         * @implements IRequestProfileData
         * @constructor
         * @param {CVP.IRequestProfileData=} [properties] Properties to set
         */
        function RequestProfileData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestProfileData commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestProfileData
         * @instance
         */
        RequestProfileData.prototype.commonParams = null;

        /**
         * Creates a new RequestProfileData instance using the specified properties.
         * @function create
         * @memberof CVP.RequestProfileData
         * @static
         * @param {CVP.IRequestProfileData=} [properties] Properties to set
         * @returns {CVP.RequestProfileData} RequestProfileData instance
         */
        RequestProfileData.create = function create(properties) {
            return new RequestProfileData(properties);
        };

        /**
         * Encodes the specified RequestProfileData message. Does not implicitly {@link CVP.RequestProfileData.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestProfileData
         * @static
         * @param {CVP.IRequestProfileData} message RequestProfileData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestProfileData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestProfileData message, length delimited. Does not implicitly {@link CVP.RequestProfileData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestProfileData
         * @static
         * @param {CVP.IRequestProfileData} message RequestProfileData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestProfileData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestProfileData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestProfileData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestProfileData} RequestProfileData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestProfileData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestProfileData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestProfileData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestProfileData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestProfileData} RequestProfileData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestProfileData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestProfileData message.
         * @function verify
         * @memberof CVP.RequestProfileData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestProfileData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestProfileData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestProfileData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestProfileData} RequestProfileData
         */
        RequestProfileData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestProfileData)
                return object;
            var message = new $root.CVP.RequestProfileData();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestProfileData.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestProfileData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestProfileData
         * @static
         * @param {CVP.RequestProfileData} message RequestProfileData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestProfileData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestProfileData to JSON.
         * @function toJSON
         * @memberof CVP.RequestProfileData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestProfileData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestProfileData;
    })();

    /**
     * AvatarState enum.
     * @name CVP.AvatarState
     * @enum {string}
     * @property {number} USING=1 USING value
     * @property {number} OWNED=2 OWNED value
     * @property {number} NOHAVE=3 NOHAVE value
     */
    CVP.AvatarState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "USING"] = 1;
        values[valuesById[2] = "OWNED"] = 2;
        values[valuesById[3] = "NOHAVE"] = 3;
        return values;
    })();

    /**
     * NationState enum.
     * @name CVP.NationState
     * @enum {string}
     * @property {number} USING=1 USING value
     * @property {number} OWNED=2 OWNED value
     */
    CVP.NationState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "USING"] = 1;
        values[valuesById[2] = "OWNED"] = 2;
        return values;
    })();

    /**
     * SexType enum.
     * @name CVP.SexType
     * @enum {string}
     * @property {number} male=1 male value
     * @property {number} female=2 female value
     * @property {number} hide=3 hide value
     */
    CVP.SexType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "male"] = 1;
        values[valuesById[2] = "female"] = 2;
        values[valuesById[3] = "hide"] = 3;
        return values;
    })();

    CVP.RequestProfileDataResult = (function() {

        /**
         * Properties of a RequestProfileDataResult.
         * @memberof CVP
         * @interface IRequestProfileDataResult
         * @property {number|null} [spinNum] RequestProfileDataResult spinNum
         * @property {number|null} [winNum] RequestProfileDataResult winNum
         * @property {number|null} [gameTime] RequestProfileDataResult gameTime
         * @property {number|null} [winCoins] RequestProfileDataResult winCoins
         * @property {Array.<CVP.INation>|null} [nationList] RequestProfileDataResult nationList
         * @property {Array.<CVP.IAvatar>|null} [avatarList] RequestProfileDataResult avatarList
         * @property {CVP.INation|null} [myNation] RequestProfileDataResult myNation
         * @property {CVP.IAvatar|null} [myAvatar] RequestProfileDataResult myAvatar
         * @property {Array.<CVP.IRecords>|null} [records] RequestProfileDataResult records
         * @property {CVP.SexType|null} [sex] RequestProfileDataResult sex
         * @property {Array.<CVP.IVipData>|null} [VipDataList] RequestProfileDataResult VipDataList
         */

        /**
         * Constructs a new RequestProfileDataResult.
         * @memberof CVP
         * @classdesc Represents a RequestProfileDataResult.
         * @implements IRequestProfileDataResult
         * @constructor
         * @param {CVP.IRequestProfileDataResult=} [properties] Properties to set
         */
        function RequestProfileDataResult(properties) {
            this.nationList = [];
            this.avatarList = [];
            this.records = [];
            this.VipDataList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestProfileDataResult spinNum.
         * @member {number} spinNum
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.spinNum = 0;

        /**
         * RequestProfileDataResult winNum.
         * @member {number} winNum
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.winNum = 0;

        /**
         * RequestProfileDataResult gameTime.
         * @member {number} gameTime
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.gameTime = 0;

        /**
         * RequestProfileDataResult winCoins.
         * @member {number} winCoins
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.winCoins = 0;

        /**
         * RequestProfileDataResult nationList.
         * @member {Array.<CVP.INation>} nationList
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.nationList = $util.emptyArray;

        /**
         * RequestProfileDataResult avatarList.
         * @member {Array.<CVP.IAvatar>} avatarList
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.avatarList = $util.emptyArray;

        /**
         * RequestProfileDataResult myNation.
         * @member {CVP.INation|null|undefined} myNation
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.myNation = null;

        /**
         * RequestProfileDataResult myAvatar.
         * @member {CVP.IAvatar|null|undefined} myAvatar
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.myAvatar = null;

        /**
         * RequestProfileDataResult records.
         * @member {Array.<CVP.IRecords>} records
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.records = $util.emptyArray;

        /**
         * RequestProfileDataResult sex.
         * @member {CVP.SexType} sex
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.sex = 1;

        /**
         * RequestProfileDataResult VipDataList.
         * @member {Array.<CVP.IVipData>} VipDataList
         * @memberof CVP.RequestProfileDataResult
         * @instance
         */
        RequestProfileDataResult.prototype.VipDataList = $util.emptyArray;

        /**
         * Creates a new RequestProfileDataResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestProfileDataResult
         * @static
         * @param {CVP.IRequestProfileDataResult=} [properties] Properties to set
         * @returns {CVP.RequestProfileDataResult} RequestProfileDataResult instance
         */
        RequestProfileDataResult.create = function create(properties) {
            return new RequestProfileDataResult(properties);
        };

        /**
         * Encodes the specified RequestProfileDataResult message. Does not implicitly {@link CVP.RequestProfileDataResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestProfileDataResult
         * @static
         * @param {CVP.IRequestProfileDataResult} message RequestProfileDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestProfileDataResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.spinNum != null && message.hasOwnProperty("spinNum"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.spinNum);
            if (message.winNum != null && message.hasOwnProperty("winNum"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.winNum);
            if (message.gameTime != null && message.hasOwnProperty("gameTime"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameTime);
            if (message.winCoins != null && message.hasOwnProperty("winCoins"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.winCoins);
            if (message.nationList != null && message.nationList.length)
                for (var i = 0; i < message.nationList.length; ++i)
                    $root.CVP.Nation.encode(message.nationList[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.avatarList != null && message.avatarList.length)
                for (var i = 0; i < message.avatarList.length; ++i)
                    $root.CVP.Avatar.encode(message.avatarList[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.myNation != null && message.hasOwnProperty("myNation"))
                $root.CVP.Nation.encode(message.myNation, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.myAvatar != null && message.hasOwnProperty("myAvatar"))
                $root.CVP.Avatar.encode(message.myAvatar, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.records != null && message.records.length)
                for (var i = 0; i < message.records.length; ++i)
                    $root.CVP.Records.encode(message.records[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.sex);
            if (message.VipDataList != null && message.VipDataList.length)
                for (var i = 0; i < message.VipDataList.length; ++i)
                    $root.CVP.VipData.encode(message.VipDataList[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestProfileDataResult message, length delimited. Does not implicitly {@link CVP.RequestProfileDataResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestProfileDataResult
         * @static
         * @param {CVP.IRequestProfileDataResult} message RequestProfileDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestProfileDataResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestProfileDataResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestProfileDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestProfileDataResult} RequestProfileDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestProfileDataResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestProfileDataResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.spinNum = reader.int32();
                    break;
                case 2:
                    message.winNum = reader.double();
                    break;
                case 3:
                    message.gameTime = reader.int32();
                    break;
                case 4:
                    message.winCoins = reader.double();
                    break;
                case 5:
                    if (!(message.nationList && message.nationList.length))
                        message.nationList = [];
                    message.nationList.push($root.CVP.Nation.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.avatarList && message.avatarList.length))
                        message.avatarList = [];
                    message.avatarList.push($root.CVP.Avatar.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.myNation = $root.CVP.Nation.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.myAvatar = $root.CVP.Avatar.decode(reader, reader.uint32());
                    break;
                case 9:
                    if (!(message.records && message.records.length))
                        message.records = [];
                    message.records.push($root.CVP.Records.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.sex = reader.int32();
                    break;
                case 11:
                    if (!(message.VipDataList && message.VipDataList.length))
                        message.VipDataList = [];
                    message.VipDataList.push($root.CVP.VipData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestProfileDataResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestProfileDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestProfileDataResult} RequestProfileDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestProfileDataResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestProfileDataResult message.
         * @function verify
         * @memberof CVP.RequestProfileDataResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestProfileDataResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.spinNum != null && message.hasOwnProperty("spinNum"))
                if (!$util.isInteger(message.spinNum))
                    return "spinNum: integer expected";
            if (message.winNum != null && message.hasOwnProperty("winNum"))
                if (typeof message.winNum !== "number")
                    return "winNum: number expected";
            if (message.gameTime != null && message.hasOwnProperty("gameTime"))
                if (!$util.isInteger(message.gameTime))
                    return "gameTime: integer expected";
            if (message.winCoins != null && message.hasOwnProperty("winCoins"))
                if (typeof message.winCoins !== "number")
                    return "winCoins: number expected";
            if (message.nationList != null && message.hasOwnProperty("nationList")) {
                if (!Array.isArray(message.nationList))
                    return "nationList: array expected";
                for (var i = 0; i < message.nationList.length; ++i) {
                    var error = $root.CVP.Nation.verify(message.nationList[i]);
                    if (error)
                        return "nationList." + error;
                }
            }
            if (message.avatarList != null && message.hasOwnProperty("avatarList")) {
                if (!Array.isArray(message.avatarList))
                    return "avatarList: array expected";
                for (var i = 0; i < message.avatarList.length; ++i) {
                    var error = $root.CVP.Avatar.verify(message.avatarList[i]);
                    if (error)
                        return "avatarList." + error;
                }
            }
            if (message.myNation != null && message.hasOwnProperty("myNation")) {
                var error = $root.CVP.Nation.verify(message.myNation);
                if (error)
                    return "myNation." + error;
            }
            if (message.myAvatar != null && message.hasOwnProperty("myAvatar")) {
                var error = $root.CVP.Avatar.verify(message.myAvatar);
                if (error)
                    return "myAvatar." + error;
            }
            if (message.records != null && message.hasOwnProperty("records")) {
                if (!Array.isArray(message.records))
                    return "records: array expected";
                for (var i = 0; i < message.records.length; ++i) {
                    var error = $root.CVP.Records.verify(message.records[i]);
                    if (error)
                        return "records." + error;
                }
            }
            if (message.sex != null && message.hasOwnProperty("sex"))
                switch (message.sex) {
                default:
                    return "sex: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.VipDataList != null && message.hasOwnProperty("VipDataList")) {
                if (!Array.isArray(message.VipDataList))
                    return "VipDataList: array expected";
                for (var i = 0; i < message.VipDataList.length; ++i) {
                    var error = $root.CVP.VipData.verify(message.VipDataList[i]);
                    if (error)
                        return "VipDataList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestProfileDataResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestProfileDataResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestProfileDataResult} RequestProfileDataResult
         */
        RequestProfileDataResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestProfileDataResult)
                return object;
            var message = new $root.CVP.RequestProfileDataResult();
            if (object.spinNum != null)
                message.spinNum = object.spinNum | 0;
            if (object.winNum != null)
                message.winNum = Number(object.winNum);
            if (object.gameTime != null)
                message.gameTime = object.gameTime | 0;
            if (object.winCoins != null)
                message.winCoins = Number(object.winCoins);
            if (object.nationList) {
                if (!Array.isArray(object.nationList))
                    throw TypeError(".CVP.RequestProfileDataResult.nationList: array expected");
                message.nationList = [];
                for (var i = 0; i < object.nationList.length; ++i) {
                    if (typeof object.nationList[i] !== "object")
                        throw TypeError(".CVP.RequestProfileDataResult.nationList: object expected");
                    message.nationList[i] = $root.CVP.Nation.fromObject(object.nationList[i]);
                }
            }
            if (object.avatarList) {
                if (!Array.isArray(object.avatarList))
                    throw TypeError(".CVP.RequestProfileDataResult.avatarList: array expected");
                message.avatarList = [];
                for (var i = 0; i < object.avatarList.length; ++i) {
                    if (typeof object.avatarList[i] !== "object")
                        throw TypeError(".CVP.RequestProfileDataResult.avatarList: object expected");
                    message.avatarList[i] = $root.CVP.Avatar.fromObject(object.avatarList[i]);
                }
            }
            if (object.myNation != null) {
                if (typeof object.myNation !== "object")
                    throw TypeError(".CVP.RequestProfileDataResult.myNation: object expected");
                message.myNation = $root.CVP.Nation.fromObject(object.myNation);
            }
            if (object.myAvatar != null) {
                if (typeof object.myAvatar !== "object")
                    throw TypeError(".CVP.RequestProfileDataResult.myAvatar: object expected");
                message.myAvatar = $root.CVP.Avatar.fromObject(object.myAvatar);
            }
            if (object.records) {
                if (!Array.isArray(object.records))
                    throw TypeError(".CVP.RequestProfileDataResult.records: array expected");
                message.records = [];
                for (var i = 0; i < object.records.length; ++i) {
                    if (typeof object.records[i] !== "object")
                        throw TypeError(".CVP.RequestProfileDataResult.records: object expected");
                    message.records[i] = $root.CVP.Records.fromObject(object.records[i]);
                }
            }
            switch (object.sex) {
            case "male":
            case 1:
                message.sex = 1;
                break;
            case "female":
            case 2:
                message.sex = 2;
                break;
            case "hide":
            case 3:
                message.sex = 3;
                break;
            }
            if (object.VipDataList) {
                if (!Array.isArray(object.VipDataList))
                    throw TypeError(".CVP.RequestProfileDataResult.VipDataList: array expected");
                message.VipDataList = [];
                for (var i = 0; i < object.VipDataList.length; ++i) {
                    if (typeof object.VipDataList[i] !== "object")
                        throw TypeError(".CVP.RequestProfileDataResult.VipDataList: object expected");
                    message.VipDataList[i] = $root.CVP.VipData.fromObject(object.VipDataList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestProfileDataResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestProfileDataResult
         * @static
         * @param {CVP.RequestProfileDataResult} message RequestProfileDataResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestProfileDataResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.nationList = [];
                object.avatarList = [];
                object.records = [];
                object.VipDataList = [];
            }
            if (options.defaults) {
                object.spinNum = 0;
                object.winNum = 0;
                object.gameTime = 0;
                object.winCoins = 0;
                object.myNation = null;
                object.myAvatar = null;
                object.sex = options.enums === String ? "male" : 1;
            }
            if (message.spinNum != null && message.hasOwnProperty("spinNum"))
                object.spinNum = message.spinNum;
            if (message.winNum != null && message.hasOwnProperty("winNum"))
                object.winNum = options.json && !isFinite(message.winNum) ? String(message.winNum) : message.winNum;
            if (message.gameTime != null && message.hasOwnProperty("gameTime"))
                object.gameTime = message.gameTime;
            if (message.winCoins != null && message.hasOwnProperty("winCoins"))
                object.winCoins = options.json && !isFinite(message.winCoins) ? String(message.winCoins) : message.winCoins;
            if (message.nationList && message.nationList.length) {
                object.nationList = [];
                for (var j = 0; j < message.nationList.length; ++j)
                    object.nationList[j] = $root.CVP.Nation.toObject(message.nationList[j], options);
            }
            if (message.avatarList && message.avatarList.length) {
                object.avatarList = [];
                for (var j = 0; j < message.avatarList.length; ++j)
                    object.avatarList[j] = $root.CVP.Avatar.toObject(message.avatarList[j], options);
            }
            if (message.myNation != null && message.hasOwnProperty("myNation"))
                object.myNation = $root.CVP.Nation.toObject(message.myNation, options);
            if (message.myAvatar != null && message.hasOwnProperty("myAvatar"))
                object.myAvatar = $root.CVP.Avatar.toObject(message.myAvatar, options);
            if (message.records && message.records.length) {
                object.records = [];
                for (var j = 0; j < message.records.length; ++j)
                    object.records[j] = $root.CVP.Records.toObject(message.records[j], options);
            }
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = options.enums === String ? $root.CVP.SexType[message.sex] : message.sex;
            if (message.VipDataList && message.VipDataList.length) {
                object.VipDataList = [];
                for (var j = 0; j < message.VipDataList.length; ++j)
                    object.VipDataList[j] = $root.CVP.VipData.toObject(message.VipDataList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestProfileDataResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestProfileDataResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestProfileDataResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestProfileDataResult;
    })();

    CVP.Records = (function() {

        /**
         * Properties of a Records.
         * @memberof CVP
         * @interface IRecords
         * @property {Array.<string>|null} [pokerList] Records pokerList
         * @property {number|null} [winNum] Records winNum
         * @property {number|null} [stage] Records stage
         * @property {string|null} [name] Records name
         * @property {string|null} [time] Records time
         */

        /**
         * Constructs a new Records.
         * @memberof CVP
         * @classdesc Represents a Records.
         * @implements IRecords
         * @constructor
         * @param {CVP.IRecords=} [properties] Properties to set
         */
        function Records(properties) {
            this.pokerList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Records pokerList.
         * @member {Array.<string>} pokerList
         * @memberof CVP.Records
         * @instance
         */
        Records.prototype.pokerList = $util.emptyArray;

        /**
         * Records winNum.
         * @member {number} winNum
         * @memberof CVP.Records
         * @instance
         */
        Records.prototype.winNum = 0;

        /**
         * Records stage.
         * @member {number} stage
         * @memberof CVP.Records
         * @instance
         */
        Records.prototype.stage = 0;

        /**
         * Records name.
         * @member {string} name
         * @memberof CVP.Records
         * @instance
         */
        Records.prototype.name = "";

        /**
         * Records time.
         * @member {string} time
         * @memberof CVP.Records
         * @instance
         */
        Records.prototype.time = "";

        /**
         * Creates a new Records instance using the specified properties.
         * @function create
         * @memberof CVP.Records
         * @static
         * @param {CVP.IRecords=} [properties] Properties to set
         * @returns {CVP.Records} Records instance
         */
        Records.create = function create(properties) {
            return new Records(properties);
        };

        /**
         * Encodes the specified Records message. Does not implicitly {@link CVP.Records.verify|verify} messages.
         * @function encode
         * @memberof CVP.Records
         * @static
         * @param {CVP.IRecords} message Records message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Records.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pokerList != null && message.pokerList.length)
                for (var i = 0; i < message.pokerList.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.pokerList[i]);
            if (message.winNum != null && message.hasOwnProperty("winNum"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.winNum);
            if (message.stage != null && message.hasOwnProperty("stage"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.stage);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.time);
            return writer;
        };

        /**
         * Encodes the specified Records message, length delimited. Does not implicitly {@link CVP.Records.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.Records
         * @static
         * @param {CVP.IRecords} message Records message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Records.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Records message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.Records
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.Records} Records
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Records.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.Records();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.pokerList && message.pokerList.length))
                        message.pokerList = [];
                    message.pokerList.push(reader.string());
                    break;
                case 2:
                    message.winNum = reader.double();
                    break;
                case 3:
                    message.stage = reader.int32();
                    break;
                case 4:
                    message.name = reader.string();
                    break;
                case 5:
                    message.time = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Records message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.Records
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.Records} Records
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Records.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Records message.
         * @function verify
         * @memberof CVP.Records
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Records.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pokerList != null && message.hasOwnProperty("pokerList")) {
                if (!Array.isArray(message.pokerList))
                    return "pokerList: array expected";
                for (var i = 0; i < message.pokerList.length; ++i)
                    if (!$util.isString(message.pokerList[i]))
                        return "pokerList: string[] expected";
            }
            if (message.winNum != null && message.hasOwnProperty("winNum"))
                if (typeof message.winNum !== "number")
                    return "winNum: number expected";
            if (message.stage != null && message.hasOwnProperty("stage"))
                if (!$util.isInteger(message.stage))
                    return "stage: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isString(message.time))
                    return "time: string expected";
            return null;
        };

        /**
         * Creates a Records message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.Records
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.Records} Records
         */
        Records.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.Records)
                return object;
            var message = new $root.CVP.Records();
            if (object.pokerList) {
                if (!Array.isArray(object.pokerList))
                    throw TypeError(".CVP.Records.pokerList: array expected");
                message.pokerList = [];
                for (var i = 0; i < object.pokerList.length; ++i)
                    message.pokerList[i] = String(object.pokerList[i]);
            }
            if (object.winNum != null)
                message.winNum = Number(object.winNum);
            if (object.stage != null)
                message.stage = object.stage | 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.time != null)
                message.time = String(object.time);
            return message;
        };

        /**
         * Creates a plain object from a Records message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.Records
         * @static
         * @param {CVP.Records} message Records
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Records.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pokerList = [];
            if (options.defaults) {
                object.winNum = 0;
                object.stage = 0;
                object.name = "";
                object.time = "";
            }
            if (message.pokerList && message.pokerList.length) {
                object.pokerList = [];
                for (var j = 0; j < message.pokerList.length; ++j)
                    object.pokerList[j] = message.pokerList[j];
            }
            if (message.winNum != null && message.hasOwnProperty("winNum"))
                object.winNum = options.json && !isFinite(message.winNum) ? String(message.winNum) : message.winNum;
            if (message.stage != null && message.hasOwnProperty("stage"))
                object.stage = message.stage;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            return object;
        };

        /**
         * Converts this Records to JSON.
         * @function toJSON
         * @memberof CVP.Records
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Records.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Records;
    })();

    CVP.Nation = (function() {

        /**
         * Properties of a Nation.
         * @memberof CVP
         * @interface INation
         * @property {number|null} [id] Nation id
         * @property {CVP.NationState|null} [state] Nation state
         */

        /**
         * Constructs a new Nation.
         * @memberof CVP
         * @classdesc Represents a Nation.
         * @implements INation
         * @constructor
         * @param {CVP.INation=} [properties] Properties to set
         */
        function Nation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Nation id.
         * @member {number} id
         * @memberof CVP.Nation
         * @instance
         */
        Nation.prototype.id = 0;

        /**
         * Nation state.
         * @member {CVP.NationState} state
         * @memberof CVP.Nation
         * @instance
         */
        Nation.prototype.state = 1;

        /**
         * Creates a new Nation instance using the specified properties.
         * @function create
         * @memberof CVP.Nation
         * @static
         * @param {CVP.INation=} [properties] Properties to set
         * @returns {CVP.Nation} Nation instance
         */
        Nation.create = function create(properties) {
            return new Nation(properties);
        };

        /**
         * Encodes the specified Nation message. Does not implicitly {@link CVP.Nation.verify|verify} messages.
         * @function encode
         * @memberof CVP.Nation
         * @static
         * @param {CVP.INation} message Nation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Nation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
            return writer;
        };

        /**
         * Encodes the specified Nation message, length delimited. Does not implicitly {@link CVP.Nation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.Nation
         * @static
         * @param {CVP.INation} message Nation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Nation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Nation message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.Nation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.Nation} Nation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Nation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.Nation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    message.state = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Nation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.Nation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.Nation} Nation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Nation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Nation message.
         * @function verify
         * @memberof CVP.Nation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Nation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                switch (message.state) {
                default:
                    return "state: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a Nation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.Nation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.Nation} Nation
         */
        Nation.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.Nation)
                return object;
            var message = new $root.CVP.Nation();
            if (object.id != null)
                message.id = object.id | 0;
            switch (object.state) {
            case "USING":
            case 1:
                message.state = 1;
                break;
            case "OWNED":
            case 2:
                message.state = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a Nation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.Nation
         * @static
         * @param {CVP.Nation} message Nation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Nation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.state = options.enums === String ? "USING" : 1;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = options.enums === String ? $root.CVP.NationState[message.state] : message.state;
            return object;
        };

        /**
         * Converts this Nation to JSON.
         * @function toJSON
         * @memberof CVP.Nation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Nation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Nation;
    })();

    CVP.Avatar = (function() {

        /**
         * Properties of an Avatar.
         * @memberof CVP
         * @interface IAvatar
         * @property {number|null} [id] Avatar id
         * @property {CVP.AvatarState|null} [state] Avatar state
         * @property {number|null} [coins] Avatar coins
         * @property {number|null} [level] Avatar level
         */

        /**
         * Constructs a new Avatar.
         * @memberof CVP
         * @classdesc Represents an Avatar.
         * @implements IAvatar
         * @constructor
         * @param {CVP.IAvatar=} [properties] Properties to set
         */
        function Avatar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Avatar id.
         * @member {number} id
         * @memberof CVP.Avatar
         * @instance
         */
        Avatar.prototype.id = 0;

        /**
         * Avatar state.
         * @member {CVP.AvatarState} state
         * @memberof CVP.Avatar
         * @instance
         */
        Avatar.prototype.state = 1;

        /**
         * Avatar coins.
         * @member {number} coins
         * @memberof CVP.Avatar
         * @instance
         */
        Avatar.prototype.coins = 0;

        /**
         * Avatar level.
         * @member {number} level
         * @memberof CVP.Avatar
         * @instance
         */
        Avatar.prototype.level = 0;

        /**
         * Creates a new Avatar instance using the specified properties.
         * @function create
         * @memberof CVP.Avatar
         * @static
         * @param {CVP.IAvatar=} [properties] Properties to set
         * @returns {CVP.Avatar} Avatar instance
         */
        Avatar.create = function create(properties) {
            return new Avatar(properties);
        };

        /**
         * Encodes the specified Avatar message. Does not implicitly {@link CVP.Avatar.verify|verify} messages.
         * @function encode
         * @memberof CVP.Avatar
         * @static
         * @param {CVP.IAvatar} message Avatar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Avatar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.coins);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
            return writer;
        };

        /**
         * Encodes the specified Avatar message, length delimited. Does not implicitly {@link CVP.Avatar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.Avatar
         * @static
         * @param {CVP.IAvatar} message Avatar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Avatar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Avatar message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.Avatar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.Avatar} Avatar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Avatar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.Avatar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    message.state = reader.int32();
                    break;
                case 3:
                    message.coins = reader.int32();
                    break;
                case 4:
                    message.level = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Avatar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.Avatar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.Avatar} Avatar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Avatar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Avatar message.
         * @function verify
         * @memberof CVP.Avatar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Avatar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                switch (message.state) {
                default:
                    return "state: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (!$util.isInteger(message.coins))
                    return "coins: integer expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            return null;
        };

        /**
         * Creates an Avatar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.Avatar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.Avatar} Avatar
         */
        Avatar.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.Avatar)
                return object;
            var message = new $root.CVP.Avatar();
            if (object.id != null)
                message.id = object.id | 0;
            switch (object.state) {
            case "USING":
            case 1:
                message.state = 1;
                break;
            case "OWNED":
            case 2:
                message.state = 2;
                break;
            case "NOHAVE":
            case 3:
                message.state = 3;
                break;
            }
            if (object.coins != null)
                message.coins = object.coins | 0;
            if (object.level != null)
                message.level = object.level | 0;
            return message;
        };

        /**
         * Creates a plain object from an Avatar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.Avatar
         * @static
         * @param {CVP.Avatar} message Avatar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Avatar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.state = options.enums === String ? "USING" : 1;
                object.coins = 0;
                object.level = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = options.enums === String ? $root.CVP.AvatarState[message.state] : message.state;
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = message.coins;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            return object;
        };

        /**
         * Converts this Avatar to JSON.
         * @function toJSON
         * @memberof CVP.Avatar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Avatar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Avatar;
    })();

    CVP.RequestChangeAvatar = (function() {

        /**
         * Properties of a RequestChangeAvatar.
         * @memberof CVP
         * @interface IRequestChangeAvatar
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestChangeAvatar commonParams
         * @property {number|null} [id] RequestChangeAvatar id
         */

        /**
         * Constructs a new RequestChangeAvatar.
         * @memberof CVP
         * @classdesc Represents a RequestChangeAvatar.
         * @implements IRequestChangeAvatar
         * @constructor
         * @param {CVP.IRequestChangeAvatar=} [properties] Properties to set
         */
        function RequestChangeAvatar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestChangeAvatar commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestChangeAvatar
         * @instance
         */
        RequestChangeAvatar.prototype.commonParams = null;

        /**
         * RequestChangeAvatar id.
         * @member {number} id
         * @memberof CVP.RequestChangeAvatar
         * @instance
         */
        RequestChangeAvatar.prototype.id = 0;

        /**
         * Creates a new RequestChangeAvatar instance using the specified properties.
         * @function create
         * @memberof CVP.RequestChangeAvatar
         * @static
         * @param {CVP.IRequestChangeAvatar=} [properties] Properties to set
         * @returns {CVP.RequestChangeAvatar} RequestChangeAvatar instance
         */
        RequestChangeAvatar.create = function create(properties) {
            return new RequestChangeAvatar(properties);
        };

        /**
         * Encodes the specified RequestChangeAvatar message. Does not implicitly {@link CVP.RequestChangeAvatar.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestChangeAvatar
         * @static
         * @param {CVP.IRequestChangeAvatar} message RequestChangeAvatar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeAvatar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified RequestChangeAvatar message, length delimited. Does not implicitly {@link CVP.RequestChangeAvatar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestChangeAvatar
         * @static
         * @param {CVP.IRequestChangeAvatar} message RequestChangeAvatar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeAvatar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestChangeAvatar message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestChangeAvatar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestChangeAvatar} RequestChangeAvatar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeAvatar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestChangeAvatar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.id = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestChangeAvatar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestChangeAvatar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestChangeAvatar} RequestChangeAvatar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeAvatar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestChangeAvatar message.
         * @function verify
         * @memberof CVP.RequestChangeAvatar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestChangeAvatar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a RequestChangeAvatar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestChangeAvatar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestChangeAvatar} RequestChangeAvatar
         */
        RequestChangeAvatar.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestChangeAvatar)
                return object;
            var message = new $root.CVP.RequestChangeAvatar();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestChangeAvatar.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestChangeAvatar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestChangeAvatar
         * @static
         * @param {CVP.RequestChangeAvatar} message RequestChangeAvatar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestChangeAvatar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.id = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this RequestChangeAvatar to JSON.
         * @function toJSON
         * @memberof CVP.RequestChangeAvatar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestChangeAvatar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestChangeAvatar;
    })();

    CVP.RequestChangeAvatarResult = (function() {

        /**
         * Properties of a RequestChangeAvatarResult.
         * @memberof CVP
         * @interface IRequestChangeAvatarResult
         * @property {number|null} [id] RequestChangeAvatarResult id
         * @property {Array.<CVP.IAvatar>|null} [avatarList] RequestChangeAvatarResult avatarList
         */

        /**
         * Constructs a new RequestChangeAvatarResult.
         * @memberof CVP
         * @classdesc Represents a RequestChangeAvatarResult.
         * @implements IRequestChangeAvatarResult
         * @constructor
         * @param {CVP.IRequestChangeAvatarResult=} [properties] Properties to set
         */
        function RequestChangeAvatarResult(properties) {
            this.avatarList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestChangeAvatarResult id.
         * @member {number} id
         * @memberof CVP.RequestChangeAvatarResult
         * @instance
         */
        RequestChangeAvatarResult.prototype.id = 0;

        /**
         * RequestChangeAvatarResult avatarList.
         * @member {Array.<CVP.IAvatar>} avatarList
         * @memberof CVP.RequestChangeAvatarResult
         * @instance
         */
        RequestChangeAvatarResult.prototype.avatarList = $util.emptyArray;

        /**
         * Creates a new RequestChangeAvatarResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestChangeAvatarResult
         * @static
         * @param {CVP.IRequestChangeAvatarResult=} [properties] Properties to set
         * @returns {CVP.RequestChangeAvatarResult} RequestChangeAvatarResult instance
         */
        RequestChangeAvatarResult.create = function create(properties) {
            return new RequestChangeAvatarResult(properties);
        };

        /**
         * Encodes the specified RequestChangeAvatarResult message. Does not implicitly {@link CVP.RequestChangeAvatarResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestChangeAvatarResult
         * @static
         * @param {CVP.IRequestChangeAvatarResult} message RequestChangeAvatarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeAvatarResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.avatarList != null && message.avatarList.length)
                for (var i = 0; i < message.avatarList.length; ++i)
                    $root.CVP.Avatar.encode(message.avatarList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestChangeAvatarResult message, length delimited. Does not implicitly {@link CVP.RequestChangeAvatarResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestChangeAvatarResult
         * @static
         * @param {CVP.IRequestChangeAvatarResult} message RequestChangeAvatarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeAvatarResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestChangeAvatarResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestChangeAvatarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestChangeAvatarResult} RequestChangeAvatarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeAvatarResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestChangeAvatarResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    if (!(message.avatarList && message.avatarList.length))
                        message.avatarList = [];
                    message.avatarList.push($root.CVP.Avatar.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestChangeAvatarResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestChangeAvatarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestChangeAvatarResult} RequestChangeAvatarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeAvatarResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestChangeAvatarResult message.
         * @function verify
         * @memberof CVP.RequestChangeAvatarResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestChangeAvatarResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.avatarList != null && message.hasOwnProperty("avatarList")) {
                if (!Array.isArray(message.avatarList))
                    return "avatarList: array expected";
                for (var i = 0; i < message.avatarList.length; ++i) {
                    var error = $root.CVP.Avatar.verify(message.avatarList[i]);
                    if (error)
                        return "avatarList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestChangeAvatarResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestChangeAvatarResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestChangeAvatarResult} RequestChangeAvatarResult
         */
        RequestChangeAvatarResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestChangeAvatarResult)
                return object;
            var message = new $root.CVP.RequestChangeAvatarResult();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.avatarList) {
                if (!Array.isArray(object.avatarList))
                    throw TypeError(".CVP.RequestChangeAvatarResult.avatarList: array expected");
                message.avatarList = [];
                for (var i = 0; i < object.avatarList.length; ++i) {
                    if (typeof object.avatarList[i] !== "object")
                        throw TypeError(".CVP.RequestChangeAvatarResult.avatarList: object expected");
                    message.avatarList[i] = $root.CVP.Avatar.fromObject(object.avatarList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestChangeAvatarResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestChangeAvatarResult
         * @static
         * @param {CVP.RequestChangeAvatarResult} message RequestChangeAvatarResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestChangeAvatarResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.avatarList = [];
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.avatarList && message.avatarList.length) {
                object.avatarList = [];
                for (var j = 0; j < message.avatarList.length; ++j)
                    object.avatarList[j] = $root.CVP.Avatar.toObject(message.avatarList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestChangeAvatarResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestChangeAvatarResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestChangeAvatarResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestChangeAvatarResult;
    })();

    CVP.RequestChangeNation = (function() {

        /**
         * Properties of a RequestChangeNation.
         * @memberof CVP
         * @interface IRequestChangeNation
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestChangeNation commonParams
         * @property {number|null} [id] RequestChangeNation id
         */

        /**
         * Constructs a new RequestChangeNation.
         * @memberof CVP
         * @classdesc Represents a RequestChangeNation.
         * @implements IRequestChangeNation
         * @constructor
         * @param {CVP.IRequestChangeNation=} [properties] Properties to set
         */
        function RequestChangeNation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestChangeNation commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestChangeNation
         * @instance
         */
        RequestChangeNation.prototype.commonParams = null;

        /**
         * RequestChangeNation id.
         * @member {number} id
         * @memberof CVP.RequestChangeNation
         * @instance
         */
        RequestChangeNation.prototype.id = 0;

        /**
         * Creates a new RequestChangeNation instance using the specified properties.
         * @function create
         * @memberof CVP.RequestChangeNation
         * @static
         * @param {CVP.IRequestChangeNation=} [properties] Properties to set
         * @returns {CVP.RequestChangeNation} RequestChangeNation instance
         */
        RequestChangeNation.create = function create(properties) {
            return new RequestChangeNation(properties);
        };

        /**
         * Encodes the specified RequestChangeNation message. Does not implicitly {@link CVP.RequestChangeNation.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestChangeNation
         * @static
         * @param {CVP.IRequestChangeNation} message RequestChangeNation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeNation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified RequestChangeNation message, length delimited. Does not implicitly {@link CVP.RequestChangeNation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestChangeNation
         * @static
         * @param {CVP.IRequestChangeNation} message RequestChangeNation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeNation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestChangeNation message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestChangeNation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestChangeNation} RequestChangeNation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeNation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestChangeNation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.id = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestChangeNation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestChangeNation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestChangeNation} RequestChangeNation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeNation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestChangeNation message.
         * @function verify
         * @memberof CVP.RequestChangeNation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestChangeNation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a RequestChangeNation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestChangeNation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestChangeNation} RequestChangeNation
         */
        RequestChangeNation.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestChangeNation)
                return object;
            var message = new $root.CVP.RequestChangeNation();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestChangeNation.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestChangeNation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestChangeNation
         * @static
         * @param {CVP.RequestChangeNation} message RequestChangeNation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestChangeNation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.id = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this RequestChangeNation to JSON.
         * @function toJSON
         * @memberof CVP.RequestChangeNation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestChangeNation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestChangeNation;
    })();

    CVP.RequestChangeNationResult = (function() {

        /**
         * Properties of a RequestChangeNationResult.
         * @memberof CVP
         * @interface IRequestChangeNationResult
         * @property {number|null} [id] RequestChangeNationResult id
         * @property {Array.<CVP.INation>|null} [nationList] RequestChangeNationResult nationList
         */

        /**
         * Constructs a new RequestChangeNationResult.
         * @memberof CVP
         * @classdesc Represents a RequestChangeNationResult.
         * @implements IRequestChangeNationResult
         * @constructor
         * @param {CVP.IRequestChangeNationResult=} [properties] Properties to set
         */
        function RequestChangeNationResult(properties) {
            this.nationList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestChangeNationResult id.
         * @member {number} id
         * @memberof CVP.RequestChangeNationResult
         * @instance
         */
        RequestChangeNationResult.prototype.id = 0;

        /**
         * RequestChangeNationResult nationList.
         * @member {Array.<CVP.INation>} nationList
         * @memberof CVP.RequestChangeNationResult
         * @instance
         */
        RequestChangeNationResult.prototype.nationList = $util.emptyArray;

        /**
         * Creates a new RequestChangeNationResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestChangeNationResult
         * @static
         * @param {CVP.IRequestChangeNationResult=} [properties] Properties to set
         * @returns {CVP.RequestChangeNationResult} RequestChangeNationResult instance
         */
        RequestChangeNationResult.create = function create(properties) {
            return new RequestChangeNationResult(properties);
        };

        /**
         * Encodes the specified RequestChangeNationResult message. Does not implicitly {@link CVP.RequestChangeNationResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestChangeNationResult
         * @static
         * @param {CVP.IRequestChangeNationResult} message RequestChangeNationResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeNationResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.nationList != null && message.nationList.length)
                for (var i = 0; i < message.nationList.length; ++i)
                    $root.CVP.Nation.encode(message.nationList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestChangeNationResult message, length delimited. Does not implicitly {@link CVP.RequestChangeNationResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestChangeNationResult
         * @static
         * @param {CVP.IRequestChangeNationResult} message RequestChangeNationResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeNationResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestChangeNationResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestChangeNationResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestChangeNationResult} RequestChangeNationResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeNationResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestChangeNationResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    if (!(message.nationList && message.nationList.length))
                        message.nationList = [];
                    message.nationList.push($root.CVP.Nation.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestChangeNationResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestChangeNationResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestChangeNationResult} RequestChangeNationResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeNationResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestChangeNationResult message.
         * @function verify
         * @memberof CVP.RequestChangeNationResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestChangeNationResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.nationList != null && message.hasOwnProperty("nationList")) {
                if (!Array.isArray(message.nationList))
                    return "nationList: array expected";
                for (var i = 0; i < message.nationList.length; ++i) {
                    var error = $root.CVP.Nation.verify(message.nationList[i]);
                    if (error)
                        return "nationList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestChangeNationResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestChangeNationResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestChangeNationResult} RequestChangeNationResult
         */
        RequestChangeNationResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestChangeNationResult)
                return object;
            var message = new $root.CVP.RequestChangeNationResult();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.nationList) {
                if (!Array.isArray(object.nationList))
                    throw TypeError(".CVP.RequestChangeNationResult.nationList: array expected");
                message.nationList = [];
                for (var i = 0; i < object.nationList.length; ++i) {
                    if (typeof object.nationList[i] !== "object")
                        throw TypeError(".CVP.RequestChangeNationResult.nationList: object expected");
                    message.nationList[i] = $root.CVP.Nation.fromObject(object.nationList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestChangeNationResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestChangeNationResult
         * @static
         * @param {CVP.RequestChangeNationResult} message RequestChangeNationResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestChangeNationResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.nationList = [];
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.nationList && message.nationList.length) {
                object.nationList = [];
                for (var j = 0; j < message.nationList.length; ++j)
                    object.nationList[j] = $root.CVP.Nation.toObject(message.nationList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestChangeNationResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestChangeNationResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestChangeNationResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestChangeNationResult;
    })();

    CVP.RequestChangeMyName = (function() {

        /**
         * Properties of a RequestChangeMyName.
         * @memberof CVP
         * @interface IRequestChangeMyName
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestChangeMyName commonParams
         * @property {string|null} [name] RequestChangeMyName name
         */

        /**
         * Constructs a new RequestChangeMyName.
         * @memberof CVP
         * @classdesc Represents a RequestChangeMyName.
         * @implements IRequestChangeMyName
         * @constructor
         * @param {CVP.IRequestChangeMyName=} [properties] Properties to set
         */
        function RequestChangeMyName(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestChangeMyName commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestChangeMyName
         * @instance
         */
        RequestChangeMyName.prototype.commonParams = null;

        /**
         * RequestChangeMyName name.
         * @member {string} name
         * @memberof CVP.RequestChangeMyName
         * @instance
         */
        RequestChangeMyName.prototype.name = "";

        /**
         * Creates a new RequestChangeMyName instance using the specified properties.
         * @function create
         * @memberof CVP.RequestChangeMyName
         * @static
         * @param {CVP.IRequestChangeMyName=} [properties] Properties to set
         * @returns {CVP.RequestChangeMyName} RequestChangeMyName instance
         */
        RequestChangeMyName.create = function create(properties) {
            return new RequestChangeMyName(properties);
        };

        /**
         * Encodes the specified RequestChangeMyName message. Does not implicitly {@link CVP.RequestChangeMyName.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestChangeMyName
         * @static
         * @param {CVP.IRequestChangeMyName} message RequestChangeMyName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeMyName.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified RequestChangeMyName message, length delimited. Does not implicitly {@link CVP.RequestChangeMyName.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestChangeMyName
         * @static
         * @param {CVP.IRequestChangeMyName} message RequestChangeMyName message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeMyName.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestChangeMyName message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestChangeMyName
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestChangeMyName} RequestChangeMyName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeMyName.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestChangeMyName();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestChangeMyName message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestChangeMyName
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestChangeMyName} RequestChangeMyName
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeMyName.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestChangeMyName message.
         * @function verify
         * @memberof CVP.RequestChangeMyName
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestChangeMyName.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a RequestChangeMyName message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestChangeMyName
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestChangeMyName} RequestChangeMyName
         */
        RequestChangeMyName.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestChangeMyName)
                return object;
            var message = new $root.CVP.RequestChangeMyName();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestChangeMyName.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a RequestChangeMyName message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestChangeMyName
         * @static
         * @param {CVP.RequestChangeMyName} message RequestChangeMyName
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestChangeMyName.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.name = "";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this RequestChangeMyName to JSON.
         * @function toJSON
         * @memberof CVP.RequestChangeMyName
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestChangeMyName.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestChangeMyName;
    })();

    CVP.RequestChangeMyNameResult = (function() {

        /**
         * Properties of a RequestChangeMyNameResult.
         * @memberof CVP
         * @interface IRequestChangeMyNameResult
         * @property {string|null} [name] RequestChangeMyNameResult name
         */

        /**
         * Constructs a new RequestChangeMyNameResult.
         * @memberof CVP
         * @classdesc Represents a RequestChangeMyNameResult.
         * @implements IRequestChangeMyNameResult
         * @constructor
         * @param {CVP.IRequestChangeMyNameResult=} [properties] Properties to set
         */
        function RequestChangeMyNameResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestChangeMyNameResult name.
         * @member {string} name
         * @memberof CVP.RequestChangeMyNameResult
         * @instance
         */
        RequestChangeMyNameResult.prototype.name = "";

        /**
         * Creates a new RequestChangeMyNameResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestChangeMyNameResult
         * @static
         * @param {CVP.IRequestChangeMyNameResult=} [properties] Properties to set
         * @returns {CVP.RequestChangeMyNameResult} RequestChangeMyNameResult instance
         */
        RequestChangeMyNameResult.create = function create(properties) {
            return new RequestChangeMyNameResult(properties);
        };

        /**
         * Encodes the specified RequestChangeMyNameResult message. Does not implicitly {@link CVP.RequestChangeMyNameResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestChangeMyNameResult
         * @static
         * @param {CVP.IRequestChangeMyNameResult} message RequestChangeMyNameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeMyNameResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified RequestChangeMyNameResult message, length delimited. Does not implicitly {@link CVP.RequestChangeMyNameResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestChangeMyNameResult
         * @static
         * @param {CVP.IRequestChangeMyNameResult} message RequestChangeMyNameResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeMyNameResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestChangeMyNameResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestChangeMyNameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestChangeMyNameResult} RequestChangeMyNameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeMyNameResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestChangeMyNameResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestChangeMyNameResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestChangeMyNameResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestChangeMyNameResult} RequestChangeMyNameResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeMyNameResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestChangeMyNameResult message.
         * @function verify
         * @memberof CVP.RequestChangeMyNameResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestChangeMyNameResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a RequestChangeMyNameResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestChangeMyNameResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestChangeMyNameResult} RequestChangeMyNameResult
         */
        RequestChangeMyNameResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestChangeMyNameResult)
                return object;
            var message = new $root.CVP.RequestChangeMyNameResult();
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a RequestChangeMyNameResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestChangeMyNameResult
         * @static
         * @param {CVP.RequestChangeMyNameResult} message RequestChangeMyNameResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestChangeMyNameResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.name = "";
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this RequestChangeMyNameResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestChangeMyNameResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestChangeMyNameResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestChangeMyNameResult;
    })();

    CVP.RequestChangeSex = (function() {

        /**
         * Properties of a RequestChangeSex.
         * @memberof CVP
         * @interface IRequestChangeSex
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestChangeSex commonParams
         * @property {CVP.SexType|null} [sex] RequestChangeSex sex
         */

        /**
         * Constructs a new RequestChangeSex.
         * @memberof CVP
         * @classdesc Represents a RequestChangeSex.
         * @implements IRequestChangeSex
         * @constructor
         * @param {CVP.IRequestChangeSex=} [properties] Properties to set
         */
        function RequestChangeSex(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestChangeSex commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestChangeSex
         * @instance
         */
        RequestChangeSex.prototype.commonParams = null;

        /**
         * RequestChangeSex sex.
         * @member {CVP.SexType} sex
         * @memberof CVP.RequestChangeSex
         * @instance
         */
        RequestChangeSex.prototype.sex = 1;

        /**
         * Creates a new RequestChangeSex instance using the specified properties.
         * @function create
         * @memberof CVP.RequestChangeSex
         * @static
         * @param {CVP.IRequestChangeSex=} [properties] Properties to set
         * @returns {CVP.RequestChangeSex} RequestChangeSex instance
         */
        RequestChangeSex.create = function create(properties) {
            return new RequestChangeSex(properties);
        };

        /**
         * Encodes the specified RequestChangeSex message. Does not implicitly {@link CVP.RequestChangeSex.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestChangeSex
         * @static
         * @param {CVP.IRequestChangeSex} message RequestChangeSex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeSex.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sex);
            return writer;
        };

        /**
         * Encodes the specified RequestChangeSex message, length delimited. Does not implicitly {@link CVP.RequestChangeSex.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestChangeSex
         * @static
         * @param {CVP.IRequestChangeSex} message RequestChangeSex message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeSex.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestChangeSex message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestChangeSex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestChangeSex} RequestChangeSex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeSex.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestChangeSex();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.sex = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestChangeSex message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestChangeSex
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestChangeSex} RequestChangeSex
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeSex.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestChangeSex message.
         * @function verify
         * @memberof CVP.RequestChangeSex
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestChangeSex.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.sex != null && message.hasOwnProperty("sex"))
                switch (message.sex) {
                default:
                    return "sex: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestChangeSex message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestChangeSex
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestChangeSex} RequestChangeSex
         */
        RequestChangeSex.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestChangeSex)
                return object;
            var message = new $root.CVP.RequestChangeSex();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestChangeSex.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            switch (object.sex) {
            case "male":
            case 1:
                message.sex = 1;
                break;
            case "female":
            case 2:
                message.sex = 2;
                break;
            case "hide":
            case 3:
                message.sex = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestChangeSex message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestChangeSex
         * @static
         * @param {CVP.RequestChangeSex} message RequestChangeSex
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestChangeSex.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.sex = options.enums === String ? "male" : 1;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = options.enums === String ? $root.CVP.SexType[message.sex] : message.sex;
            return object;
        };

        /**
         * Converts this RequestChangeSex to JSON.
         * @function toJSON
         * @memberof CVP.RequestChangeSex
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestChangeSex.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestChangeSex;
    })();

    CVP.RequestChangeSexResult = (function() {

        /**
         * Properties of a RequestChangeSexResult.
         * @memberof CVP
         * @interface IRequestChangeSexResult
         * @property {CVP.SexType|null} [sex] RequestChangeSexResult sex
         */

        /**
         * Constructs a new RequestChangeSexResult.
         * @memberof CVP
         * @classdesc Represents a RequestChangeSexResult.
         * @implements IRequestChangeSexResult
         * @constructor
         * @param {CVP.IRequestChangeSexResult=} [properties] Properties to set
         */
        function RequestChangeSexResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestChangeSexResult sex.
         * @member {CVP.SexType} sex
         * @memberof CVP.RequestChangeSexResult
         * @instance
         */
        RequestChangeSexResult.prototype.sex = 1;

        /**
         * Creates a new RequestChangeSexResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestChangeSexResult
         * @static
         * @param {CVP.IRequestChangeSexResult=} [properties] Properties to set
         * @returns {CVP.RequestChangeSexResult} RequestChangeSexResult instance
         */
        RequestChangeSexResult.create = function create(properties) {
            return new RequestChangeSexResult(properties);
        };

        /**
         * Encodes the specified RequestChangeSexResult message. Does not implicitly {@link CVP.RequestChangeSexResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestChangeSexResult
         * @static
         * @param {CVP.IRequestChangeSexResult} message RequestChangeSexResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeSexResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sex);
            return writer;
        };

        /**
         * Encodes the specified RequestChangeSexResult message, length delimited. Does not implicitly {@link CVP.RequestChangeSexResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestChangeSexResult
         * @static
         * @param {CVP.IRequestChangeSexResult} message RequestChangeSexResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestChangeSexResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestChangeSexResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestChangeSexResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestChangeSexResult} RequestChangeSexResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeSexResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestChangeSexResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sex = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestChangeSexResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestChangeSexResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestChangeSexResult} RequestChangeSexResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestChangeSexResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestChangeSexResult message.
         * @function verify
         * @memberof CVP.RequestChangeSexResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestChangeSexResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                switch (message.sex) {
                default:
                    return "sex: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestChangeSexResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestChangeSexResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestChangeSexResult} RequestChangeSexResult
         */
        RequestChangeSexResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestChangeSexResult)
                return object;
            var message = new $root.CVP.RequestChangeSexResult();
            switch (object.sex) {
            case "male":
            case 1:
                message.sex = 1;
                break;
            case "female":
            case 2:
                message.sex = 2;
                break;
            case "hide":
            case 3:
                message.sex = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestChangeSexResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestChangeSexResult
         * @static
         * @param {CVP.RequestChangeSexResult} message RequestChangeSexResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestChangeSexResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.sex = options.enums === String ? "male" : 1;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = options.enums === String ? $root.CVP.SexType[message.sex] : message.sex;
            return object;
        };

        /**
         * Converts this RequestChangeSexResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestChangeSexResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestChangeSexResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestChangeSexResult;
    })();

    CVP.RequestBuyAvatar = (function() {

        /**
         * Properties of a RequestBuyAvatar.
         * @memberof CVP
         * @interface IRequestBuyAvatar
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestBuyAvatar commonParams
         * @property {number|null} [id] RequestBuyAvatar id
         */

        /**
         * Constructs a new RequestBuyAvatar.
         * @memberof CVP
         * @classdesc Represents a RequestBuyAvatar.
         * @implements IRequestBuyAvatar
         * @constructor
         * @param {CVP.IRequestBuyAvatar=} [properties] Properties to set
         */
        function RequestBuyAvatar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestBuyAvatar commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestBuyAvatar
         * @instance
         */
        RequestBuyAvatar.prototype.commonParams = null;

        /**
         * RequestBuyAvatar id.
         * @member {number} id
         * @memberof CVP.RequestBuyAvatar
         * @instance
         */
        RequestBuyAvatar.prototype.id = 0;

        /**
         * Creates a new RequestBuyAvatar instance using the specified properties.
         * @function create
         * @memberof CVP.RequestBuyAvatar
         * @static
         * @param {CVP.IRequestBuyAvatar=} [properties] Properties to set
         * @returns {CVP.RequestBuyAvatar} RequestBuyAvatar instance
         */
        RequestBuyAvatar.create = function create(properties) {
            return new RequestBuyAvatar(properties);
        };

        /**
         * Encodes the specified RequestBuyAvatar message. Does not implicitly {@link CVP.RequestBuyAvatar.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestBuyAvatar
         * @static
         * @param {CVP.IRequestBuyAvatar} message RequestBuyAvatar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBuyAvatar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
            return writer;
        };

        /**
         * Encodes the specified RequestBuyAvatar message, length delimited. Does not implicitly {@link CVP.RequestBuyAvatar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestBuyAvatar
         * @static
         * @param {CVP.IRequestBuyAvatar} message RequestBuyAvatar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBuyAvatar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestBuyAvatar message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestBuyAvatar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestBuyAvatar} RequestBuyAvatar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBuyAvatar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestBuyAvatar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.id = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestBuyAvatar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestBuyAvatar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestBuyAvatar} RequestBuyAvatar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBuyAvatar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestBuyAvatar message.
         * @function verify
         * @memberof CVP.RequestBuyAvatar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestBuyAvatar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            return null;
        };

        /**
         * Creates a RequestBuyAvatar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestBuyAvatar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestBuyAvatar} RequestBuyAvatar
         */
        RequestBuyAvatar.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestBuyAvatar)
                return object;
            var message = new $root.CVP.RequestBuyAvatar();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestBuyAvatar.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.id != null)
                message.id = object.id | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestBuyAvatar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestBuyAvatar
         * @static
         * @param {CVP.RequestBuyAvatar} message RequestBuyAvatar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestBuyAvatar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.id = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            return object;
        };

        /**
         * Converts this RequestBuyAvatar to JSON.
         * @function toJSON
         * @memberof CVP.RequestBuyAvatar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestBuyAvatar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestBuyAvatar;
    })();

    CVP.RequestBuyAvatarResult = (function() {

        /**
         * Properties of a RequestBuyAvatarResult.
         * @memberof CVP
         * @interface IRequestBuyAvatarResult
         * @property {number|null} [id] RequestBuyAvatarResult id
         * @property {Array.<CVP.IAvatar>|null} [avatarList] RequestBuyAvatarResult avatarList
         */

        /**
         * Constructs a new RequestBuyAvatarResult.
         * @memberof CVP
         * @classdesc Represents a RequestBuyAvatarResult.
         * @implements IRequestBuyAvatarResult
         * @constructor
         * @param {CVP.IRequestBuyAvatarResult=} [properties] Properties to set
         */
        function RequestBuyAvatarResult(properties) {
            this.avatarList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestBuyAvatarResult id.
         * @member {number} id
         * @memberof CVP.RequestBuyAvatarResult
         * @instance
         */
        RequestBuyAvatarResult.prototype.id = 0;

        /**
         * RequestBuyAvatarResult avatarList.
         * @member {Array.<CVP.IAvatar>} avatarList
         * @memberof CVP.RequestBuyAvatarResult
         * @instance
         */
        RequestBuyAvatarResult.prototype.avatarList = $util.emptyArray;

        /**
         * Creates a new RequestBuyAvatarResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestBuyAvatarResult
         * @static
         * @param {CVP.IRequestBuyAvatarResult=} [properties] Properties to set
         * @returns {CVP.RequestBuyAvatarResult} RequestBuyAvatarResult instance
         */
        RequestBuyAvatarResult.create = function create(properties) {
            return new RequestBuyAvatarResult(properties);
        };

        /**
         * Encodes the specified RequestBuyAvatarResult message. Does not implicitly {@link CVP.RequestBuyAvatarResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestBuyAvatarResult
         * @static
         * @param {CVP.IRequestBuyAvatarResult} message RequestBuyAvatarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBuyAvatarResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.avatarList != null && message.avatarList.length)
                for (var i = 0; i < message.avatarList.length; ++i)
                    $root.CVP.Avatar.encode(message.avatarList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestBuyAvatarResult message, length delimited. Does not implicitly {@link CVP.RequestBuyAvatarResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestBuyAvatarResult
         * @static
         * @param {CVP.IRequestBuyAvatarResult} message RequestBuyAvatarResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBuyAvatarResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestBuyAvatarResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestBuyAvatarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestBuyAvatarResult} RequestBuyAvatarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBuyAvatarResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestBuyAvatarResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    if (!(message.avatarList && message.avatarList.length))
                        message.avatarList = [];
                    message.avatarList.push($root.CVP.Avatar.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestBuyAvatarResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestBuyAvatarResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestBuyAvatarResult} RequestBuyAvatarResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBuyAvatarResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestBuyAvatarResult message.
         * @function verify
         * @memberof CVP.RequestBuyAvatarResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestBuyAvatarResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.avatarList != null && message.hasOwnProperty("avatarList")) {
                if (!Array.isArray(message.avatarList))
                    return "avatarList: array expected";
                for (var i = 0; i < message.avatarList.length; ++i) {
                    var error = $root.CVP.Avatar.verify(message.avatarList[i]);
                    if (error)
                        return "avatarList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestBuyAvatarResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestBuyAvatarResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestBuyAvatarResult} RequestBuyAvatarResult
         */
        RequestBuyAvatarResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestBuyAvatarResult)
                return object;
            var message = new $root.CVP.RequestBuyAvatarResult();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.avatarList) {
                if (!Array.isArray(object.avatarList))
                    throw TypeError(".CVP.RequestBuyAvatarResult.avatarList: array expected");
                message.avatarList = [];
                for (var i = 0; i < object.avatarList.length; ++i) {
                    if (typeof object.avatarList[i] !== "object")
                        throw TypeError(".CVP.RequestBuyAvatarResult.avatarList: object expected");
                    message.avatarList[i] = $root.CVP.Avatar.fromObject(object.avatarList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestBuyAvatarResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestBuyAvatarResult
         * @static
         * @param {CVP.RequestBuyAvatarResult} message RequestBuyAvatarResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestBuyAvatarResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.avatarList = [];
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.avatarList && message.avatarList.length) {
                object.avatarList = [];
                for (var j = 0; j < message.avatarList.length; ++j)
                    object.avatarList[j] = $root.CVP.Avatar.toObject(message.avatarList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestBuyAvatarResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestBuyAvatarResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestBuyAvatarResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestBuyAvatarResult;
    })();

    CVP.VipData = (function() {

        /**
         * Properties of a VipData.
         * @memberof CVP
         * @interface IVipData
         * @property {number|null} [levelUpGifts] VipData levelUpGifts
         * @property {number|null} [casinoGifts] VipData casinoGifts
         * @property {number|null} [dailyGifts] VipData dailyGifts
         * @property {number|null} [bonusGifts] VipData bonusGifts
         * @property {number|null} [doubleOrNothing] VipData doubleOrNothing
         * @property {number|null} [purchaseGifts] VipData purchaseGifts
         */

        /**
         * Constructs a new VipData.
         * @memberof CVP
         * @classdesc Represents a VipData.
         * @implements IVipData
         * @constructor
         * @param {CVP.IVipData=} [properties] Properties to set
         */
        function VipData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * VipData levelUpGifts.
         * @member {number} levelUpGifts
         * @memberof CVP.VipData
         * @instance
         */
        VipData.prototype.levelUpGifts = 0;

        /**
         * VipData casinoGifts.
         * @member {number} casinoGifts
         * @memberof CVP.VipData
         * @instance
         */
        VipData.prototype.casinoGifts = 0;

        /**
         * VipData dailyGifts.
         * @member {number} dailyGifts
         * @memberof CVP.VipData
         * @instance
         */
        VipData.prototype.dailyGifts = 0;

        /**
         * VipData bonusGifts.
         * @member {number} bonusGifts
         * @memberof CVP.VipData
         * @instance
         */
        VipData.prototype.bonusGifts = 0;

        /**
         * VipData doubleOrNothing.
         * @member {number} doubleOrNothing
         * @memberof CVP.VipData
         * @instance
         */
        VipData.prototype.doubleOrNothing = 0;

        /**
         * VipData purchaseGifts.
         * @member {number} purchaseGifts
         * @memberof CVP.VipData
         * @instance
         */
        VipData.prototype.purchaseGifts = 0;

        /**
         * Creates a new VipData instance using the specified properties.
         * @function create
         * @memberof CVP.VipData
         * @static
         * @param {CVP.IVipData=} [properties] Properties to set
         * @returns {CVP.VipData} VipData instance
         */
        VipData.create = function create(properties) {
            return new VipData(properties);
        };

        /**
         * Encodes the specified VipData message. Does not implicitly {@link CVP.VipData.verify|verify} messages.
         * @function encode
         * @memberof CVP.VipData
         * @static
         * @param {CVP.IVipData} message VipData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VipData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.levelUpGifts != null && message.hasOwnProperty("levelUpGifts"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.levelUpGifts);
            if (message.casinoGifts != null && message.hasOwnProperty("casinoGifts"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.casinoGifts);
            if (message.dailyGifts != null && message.hasOwnProperty("dailyGifts"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.dailyGifts);
            if (message.bonusGifts != null && message.hasOwnProperty("bonusGifts"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.bonusGifts);
            if (message.doubleOrNothing != null && message.hasOwnProperty("doubleOrNothing"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.doubleOrNothing);
            if (message.purchaseGifts != null && message.hasOwnProperty("purchaseGifts"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.purchaseGifts);
            return writer;
        };

        /**
         * Encodes the specified VipData message, length delimited. Does not implicitly {@link CVP.VipData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.VipData
         * @static
         * @param {CVP.IVipData} message VipData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VipData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VipData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.VipData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.VipData} VipData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VipData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.VipData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.levelUpGifts = reader.double();
                    break;
                case 2:
                    message.casinoGifts = reader.double();
                    break;
                case 3:
                    message.dailyGifts = reader.double();
                    break;
                case 4:
                    message.bonusGifts = reader.double();
                    break;
                case 5:
                    message.doubleOrNothing = reader.double();
                    break;
                case 6:
                    message.purchaseGifts = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a VipData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.VipData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.VipData} VipData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VipData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VipData message.
         * @function verify
         * @memberof CVP.VipData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VipData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.levelUpGifts != null && message.hasOwnProperty("levelUpGifts"))
                if (typeof message.levelUpGifts !== "number")
                    return "levelUpGifts: number expected";
            if (message.casinoGifts != null && message.hasOwnProperty("casinoGifts"))
                if (typeof message.casinoGifts !== "number")
                    return "casinoGifts: number expected";
            if (message.dailyGifts != null && message.hasOwnProperty("dailyGifts"))
                if (typeof message.dailyGifts !== "number")
                    return "dailyGifts: number expected";
            if (message.bonusGifts != null && message.hasOwnProperty("bonusGifts"))
                if (typeof message.bonusGifts !== "number")
                    return "bonusGifts: number expected";
            if (message.doubleOrNothing != null && message.hasOwnProperty("doubleOrNothing"))
                if (typeof message.doubleOrNothing !== "number")
                    return "doubleOrNothing: number expected";
            if (message.purchaseGifts != null && message.hasOwnProperty("purchaseGifts"))
                if (typeof message.purchaseGifts !== "number")
                    return "purchaseGifts: number expected";
            return null;
        };

        /**
         * Creates a VipData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.VipData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.VipData} VipData
         */
        VipData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.VipData)
                return object;
            var message = new $root.CVP.VipData();
            if (object.levelUpGifts != null)
                message.levelUpGifts = Number(object.levelUpGifts);
            if (object.casinoGifts != null)
                message.casinoGifts = Number(object.casinoGifts);
            if (object.dailyGifts != null)
                message.dailyGifts = Number(object.dailyGifts);
            if (object.bonusGifts != null)
                message.bonusGifts = Number(object.bonusGifts);
            if (object.doubleOrNothing != null)
                message.doubleOrNothing = Number(object.doubleOrNothing);
            if (object.purchaseGifts != null)
                message.purchaseGifts = Number(object.purchaseGifts);
            return message;
        };

        /**
         * Creates a plain object from a VipData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.VipData
         * @static
         * @param {CVP.VipData} message VipData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VipData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.levelUpGifts = 0;
                object.casinoGifts = 0;
                object.dailyGifts = 0;
                object.bonusGifts = 0;
                object.doubleOrNothing = 0;
                object.purchaseGifts = 0;
            }
            if (message.levelUpGifts != null && message.hasOwnProperty("levelUpGifts"))
                object.levelUpGifts = options.json && !isFinite(message.levelUpGifts) ? String(message.levelUpGifts) : message.levelUpGifts;
            if (message.casinoGifts != null && message.hasOwnProperty("casinoGifts"))
                object.casinoGifts = options.json && !isFinite(message.casinoGifts) ? String(message.casinoGifts) : message.casinoGifts;
            if (message.dailyGifts != null && message.hasOwnProperty("dailyGifts"))
                object.dailyGifts = options.json && !isFinite(message.dailyGifts) ? String(message.dailyGifts) : message.dailyGifts;
            if (message.bonusGifts != null && message.hasOwnProperty("bonusGifts"))
                object.bonusGifts = options.json && !isFinite(message.bonusGifts) ? String(message.bonusGifts) : message.bonusGifts;
            if (message.doubleOrNothing != null && message.hasOwnProperty("doubleOrNothing"))
                object.doubleOrNothing = options.json && !isFinite(message.doubleOrNothing) ? String(message.doubleOrNothing) : message.doubleOrNothing;
            if (message.purchaseGifts != null && message.hasOwnProperty("purchaseGifts"))
                object.purchaseGifts = options.json && !isFinite(message.purchaseGifts) ? String(message.purchaseGifts) : message.purchaseGifts;
            return object;
        };

        /**
         * Converts this VipData to JSON.
         * @function toJSON
         * @memberof CVP.VipData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VipData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VipData;
    })();

    CVP.UpdateVipLevel = (function() {

        /**
         * Properties of an UpdateVipLevel.
         * @memberof CVP
         * @interface IUpdateVipLevel
         * @property {number|null} [vipLevel] UpdateVipLevel vipLevel
         * @property {number|Long|null} [vipExp] UpdateVipLevel vipExp
         * @property {number|Long|null} [vipNextExp] UpdateVipLevel vipNextExp
         */

        /**
         * Constructs a new UpdateVipLevel.
         * @memberof CVP
         * @classdesc Represents an UpdateVipLevel.
         * @implements IUpdateVipLevel
         * @constructor
         * @param {CVP.IUpdateVipLevel=} [properties] Properties to set
         */
        function UpdateVipLevel(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdateVipLevel vipLevel.
         * @member {number} vipLevel
         * @memberof CVP.UpdateVipLevel
         * @instance
         */
        UpdateVipLevel.prototype.vipLevel = 0;

        /**
         * UpdateVipLevel vipExp.
         * @member {number|Long} vipExp
         * @memberof CVP.UpdateVipLevel
         * @instance
         */
        UpdateVipLevel.prototype.vipExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UpdateVipLevel vipNextExp.
         * @member {number|Long} vipNextExp
         * @memberof CVP.UpdateVipLevel
         * @instance
         */
        UpdateVipLevel.prototype.vipNextExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new UpdateVipLevel instance using the specified properties.
         * @function create
         * @memberof CVP.UpdateVipLevel
         * @static
         * @param {CVP.IUpdateVipLevel=} [properties] Properties to set
         * @returns {CVP.UpdateVipLevel} UpdateVipLevel instance
         */
        UpdateVipLevel.create = function create(properties) {
            return new UpdateVipLevel(properties);
        };

        /**
         * Encodes the specified UpdateVipLevel message. Does not implicitly {@link CVP.UpdateVipLevel.verify|verify} messages.
         * @function encode
         * @memberof CVP.UpdateVipLevel
         * @static
         * @param {CVP.IUpdateVipLevel} message UpdateVipLevel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateVipLevel.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.vipLevel);
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.vipExp);
            if (message.vipNextExp != null && message.hasOwnProperty("vipNextExp"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.vipNextExp);
            return writer;
        };

        /**
         * Encodes the specified UpdateVipLevel message, length delimited. Does not implicitly {@link CVP.UpdateVipLevel.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UpdateVipLevel
         * @static
         * @param {CVP.IUpdateVipLevel} message UpdateVipLevel message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateVipLevel.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdateVipLevel message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UpdateVipLevel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UpdateVipLevel} UpdateVipLevel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateVipLevel.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UpdateVipLevel();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.vipLevel = reader.int32();
                    break;
                case 2:
                    message.vipExp = reader.int64();
                    break;
                case 3:
                    message.vipNextExp = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdateVipLevel message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UpdateVipLevel
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UpdateVipLevel} UpdateVipLevel
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateVipLevel.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdateVipLevel message.
         * @function verify
         * @memberof CVP.UpdateVipLevel
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdateVipLevel.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                if (!$util.isInteger(message.vipLevel))
                    return "vipLevel: integer expected";
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                if (!$util.isInteger(message.vipExp) && !(message.vipExp && $util.isInteger(message.vipExp.low) && $util.isInteger(message.vipExp.high)))
                    return "vipExp: integer|Long expected";
            if (message.vipNextExp != null && message.hasOwnProperty("vipNextExp"))
                if (!$util.isInteger(message.vipNextExp) && !(message.vipNextExp && $util.isInteger(message.vipNextExp.low) && $util.isInteger(message.vipNextExp.high)))
                    return "vipNextExp: integer|Long expected";
            return null;
        };

        /**
         * Creates an UpdateVipLevel message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UpdateVipLevel
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UpdateVipLevel} UpdateVipLevel
         */
        UpdateVipLevel.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UpdateVipLevel)
                return object;
            var message = new $root.CVP.UpdateVipLevel();
            if (object.vipLevel != null)
                message.vipLevel = object.vipLevel | 0;
            if (object.vipExp != null)
                if ($util.Long)
                    (message.vipExp = $util.Long.fromValue(object.vipExp)).unsigned = false;
                else if (typeof object.vipExp === "string")
                    message.vipExp = parseInt(object.vipExp, 10);
                else if (typeof object.vipExp === "number")
                    message.vipExp = object.vipExp;
                else if (typeof object.vipExp === "object")
                    message.vipExp = new $util.LongBits(object.vipExp.low >>> 0, object.vipExp.high >>> 0).toNumber();
            if (object.vipNextExp != null)
                if ($util.Long)
                    (message.vipNextExp = $util.Long.fromValue(object.vipNextExp)).unsigned = false;
                else if (typeof object.vipNextExp === "string")
                    message.vipNextExp = parseInt(object.vipNextExp, 10);
                else if (typeof object.vipNextExp === "number")
                    message.vipNextExp = object.vipNextExp;
                else if (typeof object.vipNextExp === "object")
                    message.vipNextExp = new $util.LongBits(object.vipNextExp.low >>> 0, object.vipNextExp.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from an UpdateVipLevel message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UpdateVipLevel
         * @static
         * @param {CVP.UpdateVipLevel} message UpdateVipLevel
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdateVipLevel.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.vipLevel = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.vipExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.vipExp = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.vipNextExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.vipNextExp = options.longs === String ? "0" : 0;
            }
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                object.vipLevel = message.vipLevel;
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                if (typeof message.vipExp === "number")
                    object.vipExp = options.longs === String ? String(message.vipExp) : message.vipExp;
                else
                    object.vipExp = options.longs === String ? $util.Long.prototype.toString.call(message.vipExp) : options.longs === Number ? new $util.LongBits(message.vipExp.low >>> 0, message.vipExp.high >>> 0).toNumber() : message.vipExp;
            if (message.vipNextExp != null && message.hasOwnProperty("vipNextExp"))
                if (typeof message.vipNextExp === "number")
                    object.vipNextExp = options.longs === String ? String(message.vipNextExp) : message.vipNextExp;
                else
                    object.vipNextExp = options.longs === String ? $util.Long.prototype.toString.call(message.vipNextExp) : options.longs === Number ? new $util.LongBits(message.vipNextExp.low >>> 0, message.vipNextExp.high >>> 0).toNumber() : message.vipNextExp;
            return object;
        };

        /**
         * Converts this UpdateVipLevel to JSON.
         * @function toJSON
         * @memberof CVP.UpdateVipLevel
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdateVipLevel.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateVipLevel;
    })();

    /**
     * DealType enum.
     * @name CVP.DealType
     * @enum {string}
     * @property {number} SPECIAL_DEAL=1 SPECIAL_DEAL value
     * @property {number} PERSONAL_DEAL=2 PERSONAL_DEAL value
     * @property {number} INVITATION_DEAL=3 INVITATION_DEAL value
     */
    CVP.DealType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "SPECIAL_DEAL"] = 1;
        values[valuesById[2] = "PERSONAL_DEAL"] = 2;
        values[valuesById[3] = "INVITATION_DEAL"] = 3;
        return values;
    })();

    CVP.RequestHotDeal = (function() {

        /**
         * Properties of a RequestHotDeal.
         * @memberof CVP
         * @interface IRequestHotDeal
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestHotDeal commonParams
         * @property {CVP.DealType|null} [dealType] RequestHotDeal dealType
         */

        /**
         * Constructs a new RequestHotDeal.
         * @memberof CVP
         * @classdesc Represents a RequestHotDeal.
         * @implements IRequestHotDeal
         * @constructor
         * @param {CVP.IRequestHotDeal=} [properties] Properties to set
         */
        function RequestHotDeal(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestHotDeal commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestHotDeal
         * @instance
         */
        RequestHotDeal.prototype.commonParams = null;

        /**
         * RequestHotDeal dealType.
         * @member {CVP.DealType} dealType
         * @memberof CVP.RequestHotDeal
         * @instance
         */
        RequestHotDeal.prototype.dealType = 1;

        /**
         * Creates a new RequestHotDeal instance using the specified properties.
         * @function create
         * @memberof CVP.RequestHotDeal
         * @static
         * @param {CVP.IRequestHotDeal=} [properties] Properties to set
         * @returns {CVP.RequestHotDeal} RequestHotDeal instance
         */
        RequestHotDeal.create = function create(properties) {
            return new RequestHotDeal(properties);
        };

        /**
         * Encodes the specified RequestHotDeal message. Does not implicitly {@link CVP.RequestHotDeal.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestHotDeal
         * @static
         * @param {CVP.IRequestHotDeal} message RequestHotDeal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestHotDeal.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.dealType != null && message.hasOwnProperty("dealType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dealType);
            return writer;
        };

        /**
         * Encodes the specified RequestHotDeal message, length delimited. Does not implicitly {@link CVP.RequestHotDeal.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestHotDeal
         * @static
         * @param {CVP.IRequestHotDeal} message RequestHotDeal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestHotDeal.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestHotDeal message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestHotDeal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestHotDeal} RequestHotDeal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestHotDeal.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestHotDeal();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.dealType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestHotDeal message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestHotDeal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestHotDeal} RequestHotDeal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestHotDeal.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestHotDeal message.
         * @function verify
         * @memberof CVP.RequestHotDeal
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestHotDeal.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.dealType != null && message.hasOwnProperty("dealType"))
                switch (message.dealType) {
                default:
                    return "dealType: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestHotDeal message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestHotDeal
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestHotDeal} RequestHotDeal
         */
        RequestHotDeal.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestHotDeal)
                return object;
            var message = new $root.CVP.RequestHotDeal();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestHotDeal.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            switch (object.dealType) {
            case "SPECIAL_DEAL":
            case 1:
                message.dealType = 1;
                break;
            case "PERSONAL_DEAL":
            case 2:
                message.dealType = 2;
                break;
            case "INVITATION_DEAL":
            case 3:
                message.dealType = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestHotDeal message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestHotDeal
         * @static
         * @param {CVP.RequestHotDeal} message RequestHotDeal
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestHotDeal.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.dealType = options.enums === String ? "SPECIAL_DEAL" : 1;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.dealType != null && message.hasOwnProperty("dealType"))
                object.dealType = options.enums === String ? $root.CVP.DealType[message.dealType] : message.dealType;
            return object;
        };

        /**
         * Converts this RequestHotDeal to JSON.
         * @function toJSON
         * @memberof CVP.RequestHotDeal
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestHotDeal.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestHotDeal;
    })();

    CVP.RequestHotDealResult = (function() {

        /**
         * Properties of a RequestHotDealResult.
         * @memberof CVP
         * @interface IRequestHotDealResult
         * @property {number|null} [dealId] RequestHotDealResult dealId
         * @property {number|null} [time] RequestHotDealResult time
         * @property {CVP.IItemInfo|null} [dealInfo] RequestHotDealResult dealInfo
         * @property {number|null} [freePercent] RequestHotDealResult freePercent
         */

        /**
         * Constructs a new RequestHotDealResult.
         * @memberof CVP
         * @classdesc Represents a RequestHotDealResult.
         * @implements IRequestHotDealResult
         * @constructor
         * @param {CVP.IRequestHotDealResult=} [properties] Properties to set
         */
        function RequestHotDealResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestHotDealResult dealId.
         * @member {number} dealId
         * @memberof CVP.RequestHotDealResult
         * @instance
         */
        RequestHotDealResult.prototype.dealId = 0;

        /**
         * RequestHotDealResult time.
         * @member {number} time
         * @memberof CVP.RequestHotDealResult
         * @instance
         */
        RequestHotDealResult.prototype.time = 0;

        /**
         * RequestHotDealResult dealInfo.
         * @member {CVP.IItemInfo|null|undefined} dealInfo
         * @memberof CVP.RequestHotDealResult
         * @instance
         */
        RequestHotDealResult.prototype.dealInfo = null;

        /**
         * RequestHotDealResult freePercent.
         * @member {number} freePercent
         * @memberof CVP.RequestHotDealResult
         * @instance
         */
        RequestHotDealResult.prototype.freePercent = 0;

        /**
         * Creates a new RequestHotDealResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestHotDealResult
         * @static
         * @param {CVP.IRequestHotDealResult=} [properties] Properties to set
         * @returns {CVP.RequestHotDealResult} RequestHotDealResult instance
         */
        RequestHotDealResult.create = function create(properties) {
            return new RequestHotDealResult(properties);
        };

        /**
         * Encodes the specified RequestHotDealResult message. Does not implicitly {@link CVP.RequestHotDealResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestHotDealResult
         * @static
         * @param {CVP.IRequestHotDealResult} message RequestHotDealResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestHotDealResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.dealId);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.time);
            if (message.dealInfo != null && message.hasOwnProperty("dealInfo"))
                $root.CVP.ItemInfo.encode(message.dealInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.freePercent != null && message.hasOwnProperty("freePercent"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.freePercent);
            return writer;
        };

        /**
         * Encodes the specified RequestHotDealResult message, length delimited. Does not implicitly {@link CVP.RequestHotDealResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestHotDealResult
         * @static
         * @param {CVP.IRequestHotDealResult} message RequestHotDealResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestHotDealResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestHotDealResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestHotDealResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestHotDealResult} RequestHotDealResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestHotDealResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestHotDealResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.dealId = reader.int32();
                    break;
                case 2:
                    message.time = reader.int32();
                    break;
                case 3:
                    message.dealInfo = $root.CVP.ItemInfo.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.freePercent = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestHotDealResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestHotDealResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestHotDealResult} RequestHotDealResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestHotDealResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestHotDealResult message.
         * @function verify
         * @memberof CVP.RequestHotDealResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestHotDealResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                if (!$util.isInteger(message.dealId))
                    return "dealId: integer expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time))
                    return "time: integer expected";
            if (message.dealInfo != null && message.hasOwnProperty("dealInfo")) {
                var error = $root.CVP.ItemInfo.verify(message.dealInfo);
                if (error)
                    return "dealInfo." + error;
            }
            if (message.freePercent != null && message.hasOwnProperty("freePercent"))
                if (typeof message.freePercent !== "number")
                    return "freePercent: number expected";
            return null;
        };

        /**
         * Creates a RequestHotDealResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestHotDealResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestHotDealResult} RequestHotDealResult
         */
        RequestHotDealResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestHotDealResult)
                return object;
            var message = new $root.CVP.RequestHotDealResult();
            if (object.dealId != null)
                message.dealId = object.dealId | 0;
            if (object.time != null)
                message.time = object.time | 0;
            if (object.dealInfo != null) {
                if (typeof object.dealInfo !== "object")
                    throw TypeError(".CVP.RequestHotDealResult.dealInfo: object expected");
                message.dealInfo = $root.CVP.ItemInfo.fromObject(object.dealInfo);
            }
            if (object.freePercent != null)
                message.freePercent = Number(object.freePercent);
            return message;
        };

        /**
         * Creates a plain object from a RequestHotDealResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestHotDealResult
         * @static
         * @param {CVP.RequestHotDealResult} message RequestHotDealResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestHotDealResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.dealId = 0;
                object.time = 0;
                object.dealInfo = null;
                object.freePercent = 0;
            }
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                object.dealId = message.dealId;
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            if (message.dealInfo != null && message.hasOwnProperty("dealInfo"))
                object.dealInfo = $root.CVP.ItemInfo.toObject(message.dealInfo, options);
            if (message.freePercent != null && message.hasOwnProperty("freePercent"))
                object.freePercent = options.json && !isFinite(message.freePercent) ? String(message.freePercent) : message.freePercent;
            return object;
        };

        /**
         * Converts this RequestHotDealResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestHotDealResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestHotDealResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestHotDealResult;
    })();

    /**
     * DEEPLINKTYPE enum.
     * @name CVP.DEEPLINKTYPE
     * @enum {string}
     * @property {number} RECEIVE=1 RECEIVE value
     * @property {number} RECEIVED=2 RECEIVED value
     * @property {number} TIMEOUT=3 TIMEOUT value
     * @property {number} NOPERMISSION=4 NOPERMISSION value
     */
    CVP.DEEPLINKTYPE = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "RECEIVE"] = 1;
        values[valuesById[2] = "RECEIVED"] = 2;
        values[valuesById[3] = "TIMEOUT"] = 3;
        values[valuesById[4] = "NOPERMISSION"] = 4;
        return values;
    })();

    CVP.RequestDeepLinkType = (function() {

        /**
         * Properties of a RequestDeepLinkType.
         * @memberof CVP
         * @interface IRequestDeepLinkType
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestDeepLinkType commonParams
         * @property {string|null} [code] RequestDeepLinkType code
         * @property {string|null} [channel] RequestDeepLinkType channel
         */

        /**
         * Constructs a new RequestDeepLinkType.
         * @memberof CVP
         * @classdesc Represents a RequestDeepLinkType.
         * @implements IRequestDeepLinkType
         * @constructor
         * @param {CVP.IRequestDeepLinkType=} [properties] Properties to set
         */
        function RequestDeepLinkType(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDeepLinkType commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestDeepLinkType
         * @instance
         */
        RequestDeepLinkType.prototype.commonParams = null;

        /**
         * RequestDeepLinkType code.
         * @member {string} code
         * @memberof CVP.RequestDeepLinkType
         * @instance
         */
        RequestDeepLinkType.prototype.code = "";

        /**
         * RequestDeepLinkType channel.
         * @member {string} channel
         * @memberof CVP.RequestDeepLinkType
         * @instance
         */
        RequestDeepLinkType.prototype.channel = "";

        /**
         * Creates a new RequestDeepLinkType instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDeepLinkType
         * @static
         * @param {CVP.IRequestDeepLinkType=} [properties] Properties to set
         * @returns {CVP.RequestDeepLinkType} RequestDeepLinkType instance
         */
        RequestDeepLinkType.create = function create(properties) {
            return new RequestDeepLinkType(properties);
        };

        /**
         * Encodes the specified RequestDeepLinkType message. Does not implicitly {@link CVP.RequestDeepLinkType.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDeepLinkType
         * @static
         * @param {CVP.IRequestDeepLinkType} message RequestDeepLinkType message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeepLinkType.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.code != null && message.hasOwnProperty("code"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
            if (message.channel != null && message.hasOwnProperty("channel"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.channel);
            return writer;
        };

        /**
         * Encodes the specified RequestDeepLinkType message, length delimited. Does not implicitly {@link CVP.RequestDeepLinkType.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDeepLinkType
         * @static
         * @param {CVP.IRequestDeepLinkType} message RequestDeepLinkType message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeepLinkType.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDeepLinkType message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDeepLinkType
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDeepLinkType} RequestDeepLinkType
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeepLinkType.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDeepLinkType();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.code = reader.string();
                    break;
                case 3:
                    message.channel = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDeepLinkType message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDeepLinkType
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDeepLinkType} RequestDeepLinkType
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeepLinkType.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDeepLinkType message.
         * @function verify
         * @memberof CVP.RequestDeepLinkType
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDeepLinkType.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isString(message.code))
                    return "code: string expected";
            if (message.channel != null && message.hasOwnProperty("channel"))
                if (!$util.isString(message.channel))
                    return "channel: string expected";
            return null;
        };

        /**
         * Creates a RequestDeepLinkType message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDeepLinkType
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDeepLinkType} RequestDeepLinkType
         */
        RequestDeepLinkType.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDeepLinkType)
                return object;
            var message = new $root.CVP.RequestDeepLinkType();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestDeepLinkType.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.code != null)
                message.code = String(object.code);
            if (object.channel != null)
                message.channel = String(object.channel);
            return message;
        };

        /**
         * Creates a plain object from a RequestDeepLinkType message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDeepLinkType
         * @static
         * @param {CVP.RequestDeepLinkType} message RequestDeepLinkType
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDeepLinkType.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.code = "";
                object.channel = "";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.channel != null && message.hasOwnProperty("channel"))
                object.channel = message.channel;
            return object;
        };

        /**
         * Converts this RequestDeepLinkType to JSON.
         * @function toJSON
         * @memberof CVP.RequestDeepLinkType
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDeepLinkType.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDeepLinkType;
    })();

    CVP.RequestDeepLinkTypeResult = (function() {

        /**
         * Properties of a RequestDeepLinkTypeResult.
         * @memberof CVP
         * @interface IRequestDeepLinkTypeResult
         * @property {CVP.DEEPLINKTYPE|null} [result_type] RequestDeepLinkTypeResult result_type
         * @property {Array.<CVP.IRewardInfo>|null} [rewardInfo] RequestDeepLinkTypeResult rewardInfo
         */

        /**
         * Constructs a new RequestDeepLinkTypeResult.
         * @memberof CVP
         * @classdesc Represents a RequestDeepLinkTypeResult.
         * @implements IRequestDeepLinkTypeResult
         * @constructor
         * @param {CVP.IRequestDeepLinkTypeResult=} [properties] Properties to set
         */
        function RequestDeepLinkTypeResult(properties) {
            this.rewardInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDeepLinkTypeResult result_type.
         * @member {CVP.DEEPLINKTYPE} result_type
         * @memberof CVP.RequestDeepLinkTypeResult
         * @instance
         */
        RequestDeepLinkTypeResult.prototype.result_type = 1;

        /**
         * RequestDeepLinkTypeResult rewardInfo.
         * @member {Array.<CVP.IRewardInfo>} rewardInfo
         * @memberof CVP.RequestDeepLinkTypeResult
         * @instance
         */
        RequestDeepLinkTypeResult.prototype.rewardInfo = $util.emptyArray;

        /**
         * Creates a new RequestDeepLinkTypeResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDeepLinkTypeResult
         * @static
         * @param {CVP.IRequestDeepLinkTypeResult=} [properties] Properties to set
         * @returns {CVP.RequestDeepLinkTypeResult} RequestDeepLinkTypeResult instance
         */
        RequestDeepLinkTypeResult.create = function create(properties) {
            return new RequestDeepLinkTypeResult(properties);
        };

        /**
         * Encodes the specified RequestDeepLinkTypeResult message. Does not implicitly {@link CVP.RequestDeepLinkTypeResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDeepLinkTypeResult
         * @static
         * @param {CVP.IRequestDeepLinkTypeResult} message RequestDeepLinkTypeResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeepLinkTypeResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result_type != null && message.hasOwnProperty("result_type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result_type);
            if (message.rewardInfo != null && message.rewardInfo.length)
                for (var i = 0; i < message.rewardInfo.length; ++i)
                    $root.CVP.RewardInfo.encode(message.rewardInfo[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestDeepLinkTypeResult message, length delimited. Does not implicitly {@link CVP.RequestDeepLinkTypeResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDeepLinkTypeResult
         * @static
         * @param {CVP.IRequestDeepLinkTypeResult} message RequestDeepLinkTypeResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeepLinkTypeResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDeepLinkTypeResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDeepLinkTypeResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDeepLinkTypeResult} RequestDeepLinkTypeResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeepLinkTypeResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDeepLinkTypeResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.result_type = reader.int32();
                    break;
                case 2:
                    if (!(message.rewardInfo && message.rewardInfo.length))
                        message.rewardInfo = [];
                    message.rewardInfo.push($root.CVP.RewardInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDeepLinkTypeResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDeepLinkTypeResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDeepLinkTypeResult} RequestDeepLinkTypeResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeepLinkTypeResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDeepLinkTypeResult message.
         * @function verify
         * @memberof CVP.RequestDeepLinkTypeResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDeepLinkTypeResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result_type != null && message.hasOwnProperty("result_type"))
                switch (message.result_type) {
                default:
                    return "result_type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.rewardInfo != null && message.hasOwnProperty("rewardInfo")) {
                if (!Array.isArray(message.rewardInfo))
                    return "rewardInfo: array expected";
                for (var i = 0; i < message.rewardInfo.length; ++i) {
                    var error = $root.CVP.RewardInfo.verify(message.rewardInfo[i]);
                    if (error)
                        return "rewardInfo." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestDeepLinkTypeResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDeepLinkTypeResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDeepLinkTypeResult} RequestDeepLinkTypeResult
         */
        RequestDeepLinkTypeResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDeepLinkTypeResult)
                return object;
            var message = new $root.CVP.RequestDeepLinkTypeResult();
            switch (object.result_type) {
            case "RECEIVE":
            case 1:
                message.result_type = 1;
                break;
            case "RECEIVED":
            case 2:
                message.result_type = 2;
                break;
            case "TIMEOUT":
            case 3:
                message.result_type = 3;
                break;
            case "NOPERMISSION":
            case 4:
                message.result_type = 4;
                break;
            }
            if (object.rewardInfo) {
                if (!Array.isArray(object.rewardInfo))
                    throw TypeError(".CVP.RequestDeepLinkTypeResult.rewardInfo: array expected");
                message.rewardInfo = [];
                for (var i = 0; i < object.rewardInfo.length; ++i) {
                    if (typeof object.rewardInfo[i] !== "object")
                        throw TypeError(".CVP.RequestDeepLinkTypeResult.rewardInfo: object expected");
                    message.rewardInfo[i] = $root.CVP.RewardInfo.fromObject(object.rewardInfo[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestDeepLinkTypeResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDeepLinkTypeResult
         * @static
         * @param {CVP.RequestDeepLinkTypeResult} message RequestDeepLinkTypeResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDeepLinkTypeResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.rewardInfo = [];
            if (options.defaults)
                object.result_type = options.enums === String ? "RECEIVE" : 1;
            if (message.result_type != null && message.hasOwnProperty("result_type"))
                object.result_type = options.enums === String ? $root.CVP.DEEPLINKTYPE[message.result_type] : message.result_type;
            if (message.rewardInfo && message.rewardInfo.length) {
                object.rewardInfo = [];
                for (var j = 0; j < message.rewardInfo.length; ++j)
                    object.rewardInfo[j] = $root.CVP.RewardInfo.toObject(message.rewardInfo[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestDeepLinkTypeResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestDeepLinkTypeResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDeepLinkTypeResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDeepLinkTypeResult;
    })();

    CVP.RewardInfo = (function() {

        /**
         * Properties of a RewardInfo.
         * @memberof CVP
         * @interface IRewardInfo
         * @property {CVP.ValueType|null} [valueType] RewardInfo valueType
         * @property {number|null} [finalValue] RewardInfo finalValue
         */

        /**
         * Constructs a new RewardInfo.
         * @memberof CVP
         * @classdesc Represents a RewardInfo.
         * @implements IRewardInfo
         * @constructor
         * @param {CVP.IRewardInfo=} [properties] Properties to set
         */
        function RewardInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RewardInfo valueType.
         * @member {CVP.ValueType} valueType
         * @memberof CVP.RewardInfo
         * @instance
         */
        RewardInfo.prototype.valueType = 0;

        /**
         * RewardInfo finalValue.
         * @member {number} finalValue
         * @memberof CVP.RewardInfo
         * @instance
         */
        RewardInfo.prototype.finalValue = 0;

        /**
         * Creates a new RewardInfo instance using the specified properties.
         * @function create
         * @memberof CVP.RewardInfo
         * @static
         * @param {CVP.IRewardInfo=} [properties] Properties to set
         * @returns {CVP.RewardInfo} RewardInfo instance
         */
        RewardInfo.create = function create(properties) {
            return new RewardInfo(properties);
        };

        /**
         * Encodes the specified RewardInfo message. Does not implicitly {@link CVP.RewardInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.RewardInfo
         * @static
         * @param {CVP.IRewardInfo} message RewardInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RewardInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.valueType != null && message.hasOwnProperty("valueType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.valueType);
            if (message.finalValue != null && message.hasOwnProperty("finalValue"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.finalValue);
            return writer;
        };

        /**
         * Encodes the specified RewardInfo message, length delimited. Does not implicitly {@link CVP.RewardInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RewardInfo
         * @static
         * @param {CVP.IRewardInfo} message RewardInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RewardInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RewardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RewardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RewardInfo} RewardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RewardInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RewardInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.valueType = reader.int32();
                    break;
                case 2:
                    message.finalValue = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RewardInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RewardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RewardInfo} RewardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RewardInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RewardInfo message.
         * @function verify
         * @memberof CVP.RewardInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RewardInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.valueType != null && message.hasOwnProperty("valueType"))
                switch (message.valueType) {
                default:
                    return "valueType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.finalValue != null && message.hasOwnProperty("finalValue"))
                if (typeof message.finalValue !== "number")
                    return "finalValue: number expected";
            return null;
        };

        /**
         * Creates a RewardInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RewardInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RewardInfo} RewardInfo
         */
        RewardInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RewardInfo)
                return object;
            var message = new $root.CVP.RewardInfo();
            switch (object.valueType) {
            case "COIN":
            case 0:
                message.valueType = 0;
                break;
            case "DIAMOND":
            case 1:
                message.valueType = 1;
                break;
            case "VAULT_KEY":
            case 2:
                message.valueType = 2;
                break;
            case "SCRATCH_CARD":
            case 3:
                message.valueType = 3;
                break;
            case "MOMENTS":
            case 4:
                message.valueType = 4;
                break;
            case "VIP_EXP":
            case 5:
                message.valueType = 5;
                break;
            case "MASTER_LICENCE":
            case 6:
                message.valueType = 6;
                break;
            }
            if (object.finalValue != null)
                message.finalValue = Number(object.finalValue);
            return message;
        };

        /**
         * Creates a plain object from a RewardInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RewardInfo
         * @static
         * @param {CVP.RewardInfo} message RewardInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RewardInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.valueType = options.enums === String ? "COIN" : 0;
                object.finalValue = 0;
            }
            if (message.valueType != null && message.hasOwnProperty("valueType"))
                object.valueType = options.enums === String ? $root.CVP.ValueType[message.valueType] : message.valueType;
            if (message.finalValue != null && message.hasOwnProperty("finalValue"))
                object.finalValue = options.json && !isFinite(message.finalValue) ? String(message.finalValue) : message.finalValue;
            return object;
        };

        /**
         * Converts this RewardInfo to JSON.
         * @function toJSON
         * @memberof CVP.RewardInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RewardInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RewardInfo;
    })();

    CVP.RequestDeepLinkReward = (function() {

        /**
         * Properties of a RequestDeepLinkReward.
         * @memberof CVP
         * @interface IRequestDeepLinkReward
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestDeepLinkReward commonParams
         * @property {string|null} [code] RequestDeepLinkReward code
         * @property {string|null} [channel] RequestDeepLinkReward channel
         */

        /**
         * Constructs a new RequestDeepLinkReward.
         * @memberof CVP
         * @classdesc Represents a RequestDeepLinkReward.
         * @implements IRequestDeepLinkReward
         * @constructor
         * @param {CVP.IRequestDeepLinkReward=} [properties] Properties to set
         */
        function RequestDeepLinkReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDeepLinkReward commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestDeepLinkReward
         * @instance
         */
        RequestDeepLinkReward.prototype.commonParams = null;

        /**
         * RequestDeepLinkReward code.
         * @member {string} code
         * @memberof CVP.RequestDeepLinkReward
         * @instance
         */
        RequestDeepLinkReward.prototype.code = "";

        /**
         * RequestDeepLinkReward channel.
         * @member {string} channel
         * @memberof CVP.RequestDeepLinkReward
         * @instance
         */
        RequestDeepLinkReward.prototype.channel = "";

        /**
         * Creates a new RequestDeepLinkReward instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDeepLinkReward
         * @static
         * @param {CVP.IRequestDeepLinkReward=} [properties] Properties to set
         * @returns {CVP.RequestDeepLinkReward} RequestDeepLinkReward instance
         */
        RequestDeepLinkReward.create = function create(properties) {
            return new RequestDeepLinkReward(properties);
        };

        /**
         * Encodes the specified RequestDeepLinkReward message. Does not implicitly {@link CVP.RequestDeepLinkReward.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDeepLinkReward
         * @static
         * @param {CVP.IRequestDeepLinkReward} message RequestDeepLinkReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeepLinkReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.code != null && message.hasOwnProperty("code"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
            if (message.channel != null && message.hasOwnProperty("channel"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.channel);
            return writer;
        };

        /**
         * Encodes the specified RequestDeepLinkReward message, length delimited. Does not implicitly {@link CVP.RequestDeepLinkReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDeepLinkReward
         * @static
         * @param {CVP.IRequestDeepLinkReward} message RequestDeepLinkReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeepLinkReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDeepLinkReward message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDeepLinkReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDeepLinkReward} RequestDeepLinkReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeepLinkReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDeepLinkReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.code = reader.string();
                    break;
                case 3:
                    message.channel = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDeepLinkReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDeepLinkReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDeepLinkReward} RequestDeepLinkReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeepLinkReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDeepLinkReward message.
         * @function verify
         * @memberof CVP.RequestDeepLinkReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDeepLinkReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isString(message.code))
                    return "code: string expected";
            if (message.channel != null && message.hasOwnProperty("channel"))
                if (!$util.isString(message.channel))
                    return "channel: string expected";
            return null;
        };

        /**
         * Creates a RequestDeepLinkReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDeepLinkReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDeepLinkReward} RequestDeepLinkReward
         */
        RequestDeepLinkReward.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDeepLinkReward)
                return object;
            var message = new $root.CVP.RequestDeepLinkReward();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestDeepLinkReward.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.code != null)
                message.code = String(object.code);
            if (object.channel != null)
                message.channel = String(object.channel);
            return message;
        };

        /**
         * Creates a plain object from a RequestDeepLinkReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDeepLinkReward
         * @static
         * @param {CVP.RequestDeepLinkReward} message RequestDeepLinkReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDeepLinkReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.code = "";
                object.channel = "";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            if (message.channel != null && message.hasOwnProperty("channel"))
                object.channel = message.channel;
            return object;
        };

        /**
         * Converts this RequestDeepLinkReward to JSON.
         * @function toJSON
         * @memberof CVP.RequestDeepLinkReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDeepLinkReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDeepLinkReward;
    })();

    CVP.RequestDeepLinkRewardResult = (function() {

        /**
         * Properties of a RequestDeepLinkRewardResult.
         * @memberof CVP
         * @interface IRequestDeepLinkRewardResult
         * @property {Array.<CVP.IRewardInfo>|null} [rewardInfo] RequestDeepLinkRewardResult rewardInfo
         */

        /**
         * Constructs a new RequestDeepLinkRewardResult.
         * @memberof CVP
         * @classdesc Represents a RequestDeepLinkRewardResult.
         * @implements IRequestDeepLinkRewardResult
         * @constructor
         * @param {CVP.IRequestDeepLinkRewardResult=} [properties] Properties to set
         */
        function RequestDeepLinkRewardResult(properties) {
            this.rewardInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDeepLinkRewardResult rewardInfo.
         * @member {Array.<CVP.IRewardInfo>} rewardInfo
         * @memberof CVP.RequestDeepLinkRewardResult
         * @instance
         */
        RequestDeepLinkRewardResult.prototype.rewardInfo = $util.emptyArray;

        /**
         * Creates a new RequestDeepLinkRewardResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDeepLinkRewardResult
         * @static
         * @param {CVP.IRequestDeepLinkRewardResult=} [properties] Properties to set
         * @returns {CVP.RequestDeepLinkRewardResult} RequestDeepLinkRewardResult instance
         */
        RequestDeepLinkRewardResult.create = function create(properties) {
            return new RequestDeepLinkRewardResult(properties);
        };

        /**
         * Encodes the specified RequestDeepLinkRewardResult message. Does not implicitly {@link CVP.RequestDeepLinkRewardResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDeepLinkRewardResult
         * @static
         * @param {CVP.IRequestDeepLinkRewardResult} message RequestDeepLinkRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeepLinkRewardResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rewardInfo != null && message.rewardInfo.length)
                for (var i = 0; i < message.rewardInfo.length; ++i)
                    $root.CVP.RewardInfo.encode(message.rewardInfo[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestDeepLinkRewardResult message, length delimited. Does not implicitly {@link CVP.RequestDeepLinkRewardResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDeepLinkRewardResult
         * @static
         * @param {CVP.IRequestDeepLinkRewardResult} message RequestDeepLinkRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeepLinkRewardResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDeepLinkRewardResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDeepLinkRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDeepLinkRewardResult} RequestDeepLinkRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeepLinkRewardResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDeepLinkRewardResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.rewardInfo && message.rewardInfo.length))
                        message.rewardInfo = [];
                    message.rewardInfo.push($root.CVP.RewardInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDeepLinkRewardResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDeepLinkRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDeepLinkRewardResult} RequestDeepLinkRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeepLinkRewardResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDeepLinkRewardResult message.
         * @function verify
         * @memberof CVP.RequestDeepLinkRewardResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDeepLinkRewardResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rewardInfo != null && message.hasOwnProperty("rewardInfo")) {
                if (!Array.isArray(message.rewardInfo))
                    return "rewardInfo: array expected";
                for (var i = 0; i < message.rewardInfo.length; ++i) {
                    var error = $root.CVP.RewardInfo.verify(message.rewardInfo[i]);
                    if (error)
                        return "rewardInfo." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestDeepLinkRewardResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDeepLinkRewardResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDeepLinkRewardResult} RequestDeepLinkRewardResult
         */
        RequestDeepLinkRewardResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDeepLinkRewardResult)
                return object;
            var message = new $root.CVP.RequestDeepLinkRewardResult();
            if (object.rewardInfo) {
                if (!Array.isArray(object.rewardInfo))
                    throw TypeError(".CVP.RequestDeepLinkRewardResult.rewardInfo: array expected");
                message.rewardInfo = [];
                for (var i = 0; i < object.rewardInfo.length; ++i) {
                    if (typeof object.rewardInfo[i] !== "object")
                        throw TypeError(".CVP.RequestDeepLinkRewardResult.rewardInfo: object expected");
                    message.rewardInfo[i] = $root.CVP.RewardInfo.fromObject(object.rewardInfo[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestDeepLinkRewardResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDeepLinkRewardResult
         * @static
         * @param {CVP.RequestDeepLinkRewardResult} message RequestDeepLinkRewardResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDeepLinkRewardResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.rewardInfo = [];
            if (message.rewardInfo && message.rewardInfo.length) {
                object.rewardInfo = [];
                for (var j = 0; j < message.rewardInfo.length; ++j)
                    object.rewardInfo[j] = $root.CVP.RewardInfo.toObject(message.rewardInfo[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestDeepLinkRewardResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestDeepLinkRewardResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDeepLinkRewardResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDeepLinkRewardResult;
    })();

    CVP.SendFeedBack = (function() {

        /**
         * Properties of a SendFeedBack.
         * @memberof CVP
         * @interface ISendFeedBack
         * @property {string|null} [mailAddress] SendFeedBack mailAddress
         * @property {string|null} [info] SendFeedBack info
         * @property {string|null} [deviceId] SendFeedBack deviceId
         * @property {Array.<Uint8Array>|null} [fileData] SendFeedBack fileData
         */

        /**
         * Constructs a new SendFeedBack.
         * @memberof CVP
         * @classdesc Represents a SendFeedBack.
         * @implements ISendFeedBack
         * @constructor
         * @param {CVP.ISendFeedBack=} [properties] Properties to set
         */
        function SendFeedBack(properties) {
            this.fileData = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendFeedBack mailAddress.
         * @member {string} mailAddress
         * @memberof CVP.SendFeedBack
         * @instance
         */
        SendFeedBack.prototype.mailAddress = "";

        /**
         * SendFeedBack info.
         * @member {string} info
         * @memberof CVP.SendFeedBack
         * @instance
         */
        SendFeedBack.prototype.info = "";

        /**
         * SendFeedBack deviceId.
         * @member {string} deviceId
         * @memberof CVP.SendFeedBack
         * @instance
         */
        SendFeedBack.prototype.deviceId = "";

        /**
         * SendFeedBack fileData.
         * @member {Array.<Uint8Array>} fileData
         * @memberof CVP.SendFeedBack
         * @instance
         */
        SendFeedBack.prototype.fileData = $util.emptyArray;

        /**
         * Creates a new SendFeedBack instance using the specified properties.
         * @function create
         * @memberof CVP.SendFeedBack
         * @static
         * @param {CVP.ISendFeedBack=} [properties] Properties to set
         * @returns {CVP.SendFeedBack} SendFeedBack instance
         */
        SendFeedBack.create = function create(properties) {
            return new SendFeedBack(properties);
        };

        /**
         * Encodes the specified SendFeedBack message. Does not implicitly {@link CVP.SendFeedBack.verify|verify} messages.
         * @function encode
         * @memberof CVP.SendFeedBack
         * @static
         * @param {CVP.ISendFeedBack} message SendFeedBack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendFeedBack.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mailAddress != null && message.hasOwnProperty("mailAddress"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.mailAddress);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.info);
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.deviceId);
            if (message.fileData != null && message.fileData.length)
                for (var i = 0; i < message.fileData.length; ++i)
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.fileData[i]);
            return writer;
        };

        /**
         * Encodes the specified SendFeedBack message, length delimited. Does not implicitly {@link CVP.SendFeedBack.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SendFeedBack
         * @static
         * @param {CVP.ISendFeedBack} message SendFeedBack message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendFeedBack.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendFeedBack message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SendFeedBack
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SendFeedBack} SendFeedBack
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendFeedBack.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SendFeedBack();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mailAddress = reader.string();
                    break;
                case 2:
                    message.info = reader.string();
                    break;
                case 3:
                    message.deviceId = reader.string();
                    break;
                case 4:
                    if (!(message.fileData && message.fileData.length))
                        message.fileData = [];
                    message.fileData.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendFeedBack message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SendFeedBack
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SendFeedBack} SendFeedBack
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendFeedBack.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendFeedBack message.
         * @function verify
         * @memberof CVP.SendFeedBack
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendFeedBack.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mailAddress != null && message.hasOwnProperty("mailAddress"))
                if (!$util.isString(message.mailAddress))
                    return "mailAddress: string expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!$util.isString(message.info))
                    return "info: string expected";
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                if (!$util.isString(message.deviceId))
                    return "deviceId: string expected";
            if (message.fileData != null && message.hasOwnProperty("fileData")) {
                if (!Array.isArray(message.fileData))
                    return "fileData: array expected";
                for (var i = 0; i < message.fileData.length; ++i)
                    if (!(message.fileData[i] && typeof message.fileData[i].length === "number" || $util.isString(message.fileData[i])))
                        return "fileData: buffer[] expected";
            }
            return null;
        };

        /**
         * Creates a SendFeedBack message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SendFeedBack
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SendFeedBack} SendFeedBack
         */
        SendFeedBack.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SendFeedBack)
                return object;
            var message = new $root.CVP.SendFeedBack();
            if (object.mailAddress != null)
                message.mailAddress = String(object.mailAddress);
            if (object.info != null)
                message.info = String(object.info);
            if (object.deviceId != null)
                message.deviceId = String(object.deviceId);
            if (object.fileData) {
                if (!Array.isArray(object.fileData))
                    throw TypeError(".CVP.SendFeedBack.fileData: array expected");
                message.fileData = [];
                for (var i = 0; i < object.fileData.length; ++i)
                    if (typeof object.fileData[i] === "string")
                        $util.base64.decode(object.fileData[i], message.fileData[i] = $util.newBuffer($util.base64.length(object.fileData[i])), 0);
                    else if (object.fileData[i].length)
                        message.fileData[i] = object.fileData[i];
            }
            return message;
        };

        /**
         * Creates a plain object from a SendFeedBack message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SendFeedBack
         * @static
         * @param {CVP.SendFeedBack} message SendFeedBack
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendFeedBack.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.fileData = [];
            if (options.defaults) {
                object.mailAddress = "";
                object.info = "";
                object.deviceId = "";
            }
            if (message.mailAddress != null && message.hasOwnProperty("mailAddress"))
                object.mailAddress = message.mailAddress;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = message.info;
            if (message.deviceId != null && message.hasOwnProperty("deviceId"))
                object.deviceId = message.deviceId;
            if (message.fileData && message.fileData.length) {
                object.fileData = [];
                for (var j = 0; j < message.fileData.length; ++j)
                    object.fileData[j] = options.bytes === String ? $util.base64.encode(message.fileData[j], 0, message.fileData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.fileData[j]) : message.fileData[j];
            }
            return object;
        };

        /**
         * Converts this SendFeedBack to JSON.
         * @function toJSON
         * @memberof CVP.SendFeedBack
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendFeedBack.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendFeedBack;
    })();

    /**
     * VideoPokerDoubleSelectType enum.
     * @name CVP.VideoPokerDoubleSelectType
     * @enum {string}
     * @property {number} NON=0 NON value
     * @property {number} BLACK=1 BLACK value
     * @property {number} RED=2 RED value
     * @property {number} SPADE=3 SPADE value
     * @property {number} HEART=4 HEART value
     * @property {number} CLUB=5 CLUB value
     * @property {number} DIAMOND=6 DIAMOND value
     */
    CVP.VideoPokerDoubleSelectType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NON"] = 0;
        values[valuesById[1] = "BLACK"] = 1;
        values[valuesById[2] = "RED"] = 2;
        values[valuesById[3] = "SPADE"] = 3;
        values[valuesById[4] = "HEART"] = 4;
        values[valuesById[5] = "CLUB"] = 5;
        values[valuesById[6] = "DIAMOND"] = 6;
        return values;
    })();

    CVP.RequestEnterVideoPoker = (function() {

        /**
         * Properties of a RequestEnterVideoPoker.
         * @memberof CVP
         * @interface IRequestEnterVideoPoker
         * @property {number|null} [gameId] RequestEnterVideoPoker gameId
         * @property {boolean|null} [isPractice] RequestEnterVideoPoker isPractice
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestEnterVideoPoker commonParams
         */

        /**
         * Constructs a new RequestEnterVideoPoker.
         * @memberof CVP
         * @classdesc Represents a RequestEnterVideoPoker.
         * @implements IRequestEnterVideoPoker
         * @constructor
         * @param {CVP.IRequestEnterVideoPoker=} [properties] Properties to set
         */
        function RequestEnterVideoPoker(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestEnterVideoPoker gameId.
         * @member {number} gameId
         * @memberof CVP.RequestEnterVideoPoker
         * @instance
         */
        RequestEnterVideoPoker.prototype.gameId = 0;

        /**
         * RequestEnterVideoPoker isPractice.
         * @member {boolean} isPractice
         * @memberof CVP.RequestEnterVideoPoker
         * @instance
         */
        RequestEnterVideoPoker.prototype.isPractice = false;

        /**
         * RequestEnterVideoPoker commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestEnterVideoPoker
         * @instance
         */
        RequestEnterVideoPoker.prototype.commonParams = null;

        /**
         * Creates a new RequestEnterVideoPoker instance using the specified properties.
         * @function create
         * @memberof CVP.RequestEnterVideoPoker
         * @static
         * @param {CVP.IRequestEnterVideoPoker=} [properties] Properties to set
         * @returns {CVP.RequestEnterVideoPoker} RequestEnterVideoPoker instance
         */
        RequestEnterVideoPoker.create = function create(properties) {
            return new RequestEnterVideoPoker(properties);
        };

        /**
         * Encodes the specified RequestEnterVideoPoker message. Does not implicitly {@link CVP.RequestEnterVideoPoker.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestEnterVideoPoker
         * @static
         * @param {CVP.IRequestEnterVideoPoker} message RequestEnterVideoPoker message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestEnterVideoPoker.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gameId);
            if (message.isPractice != null && message.hasOwnProperty("isPractice"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isPractice);
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestEnterVideoPoker message, length delimited. Does not implicitly {@link CVP.RequestEnterVideoPoker.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestEnterVideoPoker
         * @static
         * @param {CVP.IRequestEnterVideoPoker} message RequestEnterVideoPoker message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestEnterVideoPoker.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestEnterVideoPoker message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestEnterVideoPoker
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestEnterVideoPoker} RequestEnterVideoPoker
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestEnterVideoPoker.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestEnterVideoPoker();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gameId = reader.int32();
                    break;
                case 2:
                    message.isPractice = reader.bool();
                    break;
                case 3:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestEnterVideoPoker message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestEnterVideoPoker
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestEnterVideoPoker} RequestEnterVideoPoker
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestEnterVideoPoker.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestEnterVideoPoker message.
         * @function verify
         * @memberof CVP.RequestEnterVideoPoker
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestEnterVideoPoker.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.isPractice != null && message.hasOwnProperty("isPractice"))
                if (typeof message.isPractice !== "boolean")
                    return "isPractice: boolean expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestEnterVideoPoker message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestEnterVideoPoker
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestEnterVideoPoker} RequestEnterVideoPoker
         */
        RequestEnterVideoPoker.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestEnterVideoPoker)
                return object;
            var message = new $root.CVP.RequestEnterVideoPoker();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.isPractice != null)
                message.isPractice = Boolean(object.isPractice);
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestEnterVideoPoker.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestEnterVideoPoker message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestEnterVideoPoker
         * @static
         * @param {CVP.RequestEnterVideoPoker} message RequestEnterVideoPoker
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestEnterVideoPoker.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.isPractice = false;
                object.commonParams = null;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.isPractice != null && message.hasOwnProperty("isPractice"))
                object.isPractice = message.isPractice;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestEnterVideoPoker to JSON.
         * @function toJSON
         * @memberof CVP.RequestEnterVideoPoker
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestEnterVideoPoker.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestEnterVideoPoker;
    })();

    CVP.PayTable = (function() {

        /**
         * Properties of a PayTable.
         * @memberof CVP
         * @interface IPayTable
         * @property {Array.<number>|null} [bet1List] PayTable bet1List
         * @property {Array.<number>|null} [bet2List] PayTable bet2List
         * @property {Array.<number>|null} [bet3List] PayTable bet3List
         * @property {Array.<number>|null} [bet4List] PayTable bet4List
         * @property {Array.<number>|null} [bet5List] PayTable bet5List
         * @property {Array.<CVP.IWinData>|null} [winData] PayTable winData
         * @property {Array.<CVP.IJackPot>|null} [jackPot] PayTable jackPot
         */

        /**
         * Constructs a new PayTable.
         * @memberof CVP
         * @classdesc Represents a PayTable.
         * @implements IPayTable
         * @constructor
         * @param {CVP.IPayTable=} [properties] Properties to set
         */
        function PayTable(properties) {
            this.bet1List = [];
            this.bet2List = [];
            this.bet3List = [];
            this.bet4List = [];
            this.bet5List = [];
            this.winData = [];
            this.jackPot = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PayTable bet1List.
         * @member {Array.<number>} bet1List
         * @memberof CVP.PayTable
         * @instance
         */
        PayTable.prototype.bet1List = $util.emptyArray;

        /**
         * PayTable bet2List.
         * @member {Array.<number>} bet2List
         * @memberof CVP.PayTable
         * @instance
         */
        PayTable.prototype.bet2List = $util.emptyArray;

        /**
         * PayTable bet3List.
         * @member {Array.<number>} bet3List
         * @memberof CVP.PayTable
         * @instance
         */
        PayTable.prototype.bet3List = $util.emptyArray;

        /**
         * PayTable bet4List.
         * @member {Array.<number>} bet4List
         * @memberof CVP.PayTable
         * @instance
         */
        PayTable.prototype.bet4List = $util.emptyArray;

        /**
         * PayTable bet5List.
         * @member {Array.<number>} bet5List
         * @memberof CVP.PayTable
         * @instance
         */
        PayTable.prototype.bet5List = $util.emptyArray;

        /**
         * PayTable winData.
         * @member {Array.<CVP.IWinData>} winData
         * @memberof CVP.PayTable
         * @instance
         */
        PayTable.prototype.winData = $util.emptyArray;

        /**
         * PayTable jackPot.
         * @member {Array.<CVP.IJackPot>} jackPot
         * @memberof CVP.PayTable
         * @instance
         */
        PayTable.prototype.jackPot = $util.emptyArray;

        /**
         * Creates a new PayTable instance using the specified properties.
         * @function create
         * @memberof CVP.PayTable
         * @static
         * @param {CVP.IPayTable=} [properties] Properties to set
         * @returns {CVP.PayTable} PayTable instance
         */
        PayTable.create = function create(properties) {
            return new PayTable(properties);
        };

        /**
         * Encodes the specified PayTable message. Does not implicitly {@link CVP.PayTable.verify|verify} messages.
         * @function encode
         * @memberof CVP.PayTable
         * @static
         * @param {CVP.IPayTable} message PayTable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PayTable.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bet1List != null && message.bet1List.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (var i = 0; i < message.bet1List.length; ++i)
                    writer.int32(message.bet1List[i]);
                writer.ldelim();
            }
            if (message.bet2List != null && message.bet2List.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.bet2List.length; ++i)
                    writer.int32(message.bet2List[i]);
                writer.ldelim();
            }
            if (message.bet3List != null && message.bet3List.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.bet3List.length; ++i)
                    writer.int32(message.bet3List[i]);
                writer.ldelim();
            }
            if (message.bet4List != null && message.bet4List.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (var i = 0; i < message.bet4List.length; ++i)
                    writer.int32(message.bet4List[i]);
                writer.ldelim();
            }
            if (message.bet5List != null && message.bet5List.length) {
                writer.uint32(/* id 5, wireType 2 =*/42).fork();
                for (var i = 0; i < message.bet5List.length; ++i)
                    writer.int32(message.bet5List[i]);
                writer.ldelim();
            }
            if (message.winData != null && message.winData.length)
                for (var i = 0; i < message.winData.length; ++i)
                    $root.CVP.WinData.encode(message.winData[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.jackPot != null && message.jackPot.length)
                for (var i = 0; i < message.jackPot.length; ++i)
                    $root.CVP.JackPot.encode(message.jackPot[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PayTable message, length delimited. Does not implicitly {@link CVP.PayTable.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.PayTable
         * @static
         * @param {CVP.IPayTable} message PayTable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PayTable.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PayTable message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.PayTable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.PayTable} PayTable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PayTable.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.PayTable();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.bet1List && message.bet1List.length))
                        message.bet1List = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.bet1List.push(reader.int32());
                    } else
                        message.bet1List.push(reader.int32());
                    break;
                case 2:
                    if (!(message.bet2List && message.bet2List.length))
                        message.bet2List = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.bet2List.push(reader.int32());
                    } else
                        message.bet2List.push(reader.int32());
                    break;
                case 3:
                    if (!(message.bet3List && message.bet3List.length))
                        message.bet3List = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.bet3List.push(reader.int32());
                    } else
                        message.bet3List.push(reader.int32());
                    break;
                case 4:
                    if (!(message.bet4List && message.bet4List.length))
                        message.bet4List = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.bet4List.push(reader.int32());
                    } else
                        message.bet4List.push(reader.int32());
                    break;
                case 5:
                    if (!(message.bet5List && message.bet5List.length))
                        message.bet5List = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.bet5List.push(reader.int32());
                    } else
                        message.bet5List.push(reader.int32());
                    break;
                case 6:
                    if (!(message.winData && message.winData.length))
                        message.winData = [];
                    message.winData.push($root.CVP.WinData.decode(reader, reader.uint32()));
                    break;
                case 7:
                    if (!(message.jackPot && message.jackPot.length))
                        message.jackPot = [];
                    message.jackPot.push($root.CVP.JackPot.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PayTable message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.PayTable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.PayTable} PayTable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PayTable.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PayTable message.
         * @function verify
         * @memberof CVP.PayTable
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PayTable.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bet1List != null && message.hasOwnProperty("bet1List")) {
                if (!Array.isArray(message.bet1List))
                    return "bet1List: array expected";
                for (var i = 0; i < message.bet1List.length; ++i)
                    if (!$util.isInteger(message.bet1List[i]))
                        return "bet1List: integer[] expected";
            }
            if (message.bet2List != null && message.hasOwnProperty("bet2List")) {
                if (!Array.isArray(message.bet2List))
                    return "bet2List: array expected";
                for (var i = 0; i < message.bet2List.length; ++i)
                    if (!$util.isInteger(message.bet2List[i]))
                        return "bet2List: integer[] expected";
            }
            if (message.bet3List != null && message.hasOwnProperty("bet3List")) {
                if (!Array.isArray(message.bet3List))
                    return "bet3List: array expected";
                for (var i = 0; i < message.bet3List.length; ++i)
                    if (!$util.isInteger(message.bet3List[i]))
                        return "bet3List: integer[] expected";
            }
            if (message.bet4List != null && message.hasOwnProperty("bet4List")) {
                if (!Array.isArray(message.bet4List))
                    return "bet4List: array expected";
                for (var i = 0; i < message.bet4List.length; ++i)
                    if (!$util.isInteger(message.bet4List[i]))
                        return "bet4List: integer[] expected";
            }
            if (message.bet5List != null && message.hasOwnProperty("bet5List")) {
                if (!Array.isArray(message.bet5List))
                    return "bet5List: array expected";
                for (var i = 0; i < message.bet5List.length; ++i)
                    if (!$util.isInteger(message.bet5List[i]))
                        return "bet5List: integer[] expected";
            }
            if (message.winData != null && message.hasOwnProperty("winData")) {
                if (!Array.isArray(message.winData))
                    return "winData: array expected";
                for (var i = 0; i < message.winData.length; ++i) {
                    var error = $root.CVP.WinData.verify(message.winData[i]);
                    if (error)
                        return "winData." + error;
                }
            }
            if (message.jackPot != null && message.hasOwnProperty("jackPot")) {
                if (!Array.isArray(message.jackPot))
                    return "jackPot: array expected";
                for (var i = 0; i < message.jackPot.length; ++i) {
                    var error = $root.CVP.JackPot.verify(message.jackPot[i]);
                    if (error)
                        return "jackPot." + error;
                }
            }
            return null;
        };

        /**
         * Creates a PayTable message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.PayTable
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.PayTable} PayTable
         */
        PayTable.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.PayTable)
                return object;
            var message = new $root.CVP.PayTable();
            if (object.bet1List) {
                if (!Array.isArray(object.bet1List))
                    throw TypeError(".CVP.PayTable.bet1List: array expected");
                message.bet1List = [];
                for (var i = 0; i < object.bet1List.length; ++i)
                    message.bet1List[i] = object.bet1List[i] | 0;
            }
            if (object.bet2List) {
                if (!Array.isArray(object.bet2List))
                    throw TypeError(".CVP.PayTable.bet2List: array expected");
                message.bet2List = [];
                for (var i = 0; i < object.bet2List.length; ++i)
                    message.bet2List[i] = object.bet2List[i] | 0;
            }
            if (object.bet3List) {
                if (!Array.isArray(object.bet3List))
                    throw TypeError(".CVP.PayTable.bet3List: array expected");
                message.bet3List = [];
                for (var i = 0; i < object.bet3List.length; ++i)
                    message.bet3List[i] = object.bet3List[i] | 0;
            }
            if (object.bet4List) {
                if (!Array.isArray(object.bet4List))
                    throw TypeError(".CVP.PayTable.bet4List: array expected");
                message.bet4List = [];
                for (var i = 0; i < object.bet4List.length; ++i)
                    message.bet4List[i] = object.bet4List[i] | 0;
            }
            if (object.bet5List) {
                if (!Array.isArray(object.bet5List))
                    throw TypeError(".CVP.PayTable.bet5List: array expected");
                message.bet5List = [];
                for (var i = 0; i < object.bet5List.length; ++i)
                    message.bet5List[i] = object.bet5List[i] | 0;
            }
            if (object.winData) {
                if (!Array.isArray(object.winData))
                    throw TypeError(".CVP.PayTable.winData: array expected");
                message.winData = [];
                for (var i = 0; i < object.winData.length; ++i) {
                    if (typeof object.winData[i] !== "object")
                        throw TypeError(".CVP.PayTable.winData: object expected");
                    message.winData[i] = $root.CVP.WinData.fromObject(object.winData[i]);
                }
            }
            if (object.jackPot) {
                if (!Array.isArray(object.jackPot))
                    throw TypeError(".CVP.PayTable.jackPot: array expected");
                message.jackPot = [];
                for (var i = 0; i < object.jackPot.length; ++i) {
                    if (typeof object.jackPot[i] !== "object")
                        throw TypeError(".CVP.PayTable.jackPot: object expected");
                    message.jackPot[i] = $root.CVP.JackPot.fromObject(object.jackPot[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a PayTable message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.PayTable
         * @static
         * @param {CVP.PayTable} message PayTable
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PayTable.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.bet1List = [];
                object.bet2List = [];
                object.bet3List = [];
                object.bet4List = [];
                object.bet5List = [];
                object.winData = [];
                object.jackPot = [];
            }
            if (message.bet1List && message.bet1List.length) {
                object.bet1List = [];
                for (var j = 0; j < message.bet1List.length; ++j)
                    object.bet1List[j] = message.bet1List[j];
            }
            if (message.bet2List && message.bet2List.length) {
                object.bet2List = [];
                for (var j = 0; j < message.bet2List.length; ++j)
                    object.bet2List[j] = message.bet2List[j];
            }
            if (message.bet3List && message.bet3List.length) {
                object.bet3List = [];
                for (var j = 0; j < message.bet3List.length; ++j)
                    object.bet3List[j] = message.bet3List[j];
            }
            if (message.bet4List && message.bet4List.length) {
                object.bet4List = [];
                for (var j = 0; j < message.bet4List.length; ++j)
                    object.bet4List[j] = message.bet4List[j];
            }
            if (message.bet5List && message.bet5List.length) {
                object.bet5List = [];
                for (var j = 0; j < message.bet5List.length; ++j)
                    object.bet5List[j] = message.bet5List[j];
            }
            if (message.winData && message.winData.length) {
                object.winData = [];
                for (var j = 0; j < message.winData.length; ++j)
                    object.winData[j] = $root.CVP.WinData.toObject(message.winData[j], options);
            }
            if (message.jackPot && message.jackPot.length) {
                object.jackPot = [];
                for (var j = 0; j < message.jackPot.length; ++j)
                    object.jackPot[j] = $root.CVP.JackPot.toObject(message.jackPot[j], options);
            }
            return object;
        };

        /**
         * Converts this PayTable to JSON.
         * @function toJSON
         * @memberof CVP.PayTable
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PayTable.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PayTable;
    })();

    CVP.WinData = (function() {

        /**
         * Properties of a WinData.
         * @memberof CVP
         * @interface IWinData
         * @property {string|null} [name] WinData name
         */

        /**
         * Constructs a new WinData.
         * @memberof CVP
         * @classdesc Represents a WinData.
         * @implements IWinData
         * @constructor
         * @param {CVP.IWinData=} [properties] Properties to set
         */
        function WinData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * WinData name.
         * @member {string} name
         * @memberof CVP.WinData
         * @instance
         */
        WinData.prototype.name = "";

        /**
         * Creates a new WinData instance using the specified properties.
         * @function create
         * @memberof CVP.WinData
         * @static
         * @param {CVP.IWinData=} [properties] Properties to set
         * @returns {CVP.WinData} WinData instance
         */
        WinData.create = function create(properties) {
            return new WinData(properties);
        };

        /**
         * Encodes the specified WinData message. Does not implicitly {@link CVP.WinData.verify|verify} messages.
         * @function encode
         * @memberof CVP.WinData
         * @static
         * @param {CVP.IWinData} message WinData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WinData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            return writer;
        };

        /**
         * Encodes the specified WinData message, length delimited. Does not implicitly {@link CVP.WinData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.WinData
         * @static
         * @param {CVP.IWinData} message WinData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WinData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a WinData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.WinData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.WinData} WinData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WinData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.WinData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a WinData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.WinData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.WinData} WinData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WinData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a WinData message.
         * @function verify
         * @memberof CVP.WinData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WinData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            return null;
        };

        /**
         * Creates a WinData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.WinData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.WinData} WinData
         */
        WinData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.WinData)
                return object;
            var message = new $root.CVP.WinData();
            if (object.name != null)
                message.name = String(object.name);
            return message;
        };

        /**
         * Creates a plain object from a WinData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.WinData
         * @static
         * @param {CVP.WinData} message WinData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WinData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.name = "";
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            return object;
        };

        /**
         * Converts this WinData to JSON.
         * @function toJSON
         * @memberof CVP.WinData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WinData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return WinData;
    })();

    CVP.JackPot = (function() {

        /**
         * Properties of a JackPot.
         * @memberof CVP
         * @interface IJackPot
         * @property {number|null} [row] JackPot row
         * @property {number|null} [col] JackPot col
         */

        /**
         * Constructs a new JackPot.
         * @memberof CVP
         * @classdesc Represents a JackPot.
         * @implements IJackPot
         * @constructor
         * @param {CVP.IJackPot=} [properties] Properties to set
         */
        function JackPot(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * JackPot row.
         * @member {number} row
         * @memberof CVP.JackPot
         * @instance
         */
        JackPot.prototype.row = 0;

        /**
         * JackPot col.
         * @member {number} col
         * @memberof CVP.JackPot
         * @instance
         */
        JackPot.prototype.col = 0;

        /**
         * Creates a new JackPot instance using the specified properties.
         * @function create
         * @memberof CVP.JackPot
         * @static
         * @param {CVP.IJackPot=} [properties] Properties to set
         * @returns {CVP.JackPot} JackPot instance
         */
        JackPot.create = function create(properties) {
            return new JackPot(properties);
        };

        /**
         * Encodes the specified JackPot message. Does not implicitly {@link CVP.JackPot.verify|verify} messages.
         * @function encode
         * @memberof CVP.JackPot
         * @static
         * @param {CVP.IJackPot} message JackPot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JackPot.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.row != null && message.hasOwnProperty("row"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.row);
            if (message.col != null && message.hasOwnProperty("col"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.col);
            return writer;
        };

        /**
         * Encodes the specified JackPot message, length delimited. Does not implicitly {@link CVP.JackPot.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.JackPot
         * @static
         * @param {CVP.IJackPot} message JackPot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        JackPot.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a JackPot message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.JackPot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.JackPot} JackPot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JackPot.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.JackPot();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.row = reader.int32();
                    break;
                case 2:
                    message.col = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a JackPot message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.JackPot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.JackPot} JackPot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        JackPot.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a JackPot message.
         * @function verify
         * @memberof CVP.JackPot
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        JackPot.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.row != null && message.hasOwnProperty("row"))
                if (!$util.isInteger(message.row))
                    return "row: integer expected";
            if (message.col != null && message.hasOwnProperty("col"))
                if (!$util.isInteger(message.col))
                    return "col: integer expected";
            return null;
        };

        /**
         * Creates a JackPot message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.JackPot
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.JackPot} JackPot
         */
        JackPot.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.JackPot)
                return object;
            var message = new $root.CVP.JackPot();
            if (object.row != null)
                message.row = object.row | 0;
            if (object.col != null)
                message.col = object.col | 0;
            return message;
        };

        /**
         * Creates a plain object from a JackPot message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.JackPot
         * @static
         * @param {CVP.JackPot} message JackPot
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        JackPot.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.row = 0;
                object.col = 0;
            }
            if (message.row != null && message.hasOwnProperty("row"))
                object.row = message.row;
            if (message.col != null && message.hasOwnProperty("col"))
                object.col = message.col;
            return object;
        };

        /**
         * Converts this JackPot to JSON.
         * @function toJSON
         * @memberof CVP.JackPot
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        JackPot.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return JackPot;
    })();

    CVP.RequestEnterVideoPokerResult = (function() {

        /**
         * Properties of a RequestEnterVideoPokerResult.
         * @memberof CVP
         * @interface IRequestEnterVideoPokerResult
         * @property {number|null} [curBetIdx] RequestEnterVideoPokerResult curBetIdx
         * @property {CVP.IPayTable|null} [payTable] RequestEnterVideoPokerResult payTable
         * @property {Array.<number>|null} [creditAmount] RequestEnterVideoPokerResult creditAmount
         * @property {number|null} [jackpotAcc] RequestEnterVideoPokerResult jackpotAcc
         * @property {number|null} [jackpotBase] RequestEnterVideoPokerResult jackpotBase
         * @property {number|null} [creditAmountIdx] RequestEnterVideoPokerResult creditAmountIdx
         * @property {boolean|null} [isHaveInterstitial] RequestEnterVideoPokerResult isHaveInterstitial
         * @property {boolean|null} [isPractice] RequestEnterVideoPokerResult isPractice
         * @property {number|null} [creditAmountMax] RequestEnterVideoPokerResult creditAmountMax
         * @property {number|null} [jackpotAdd] RequestEnterVideoPokerResult jackpotAdd
         * @property {number|null} [gameId] RequestEnterVideoPokerResult gameId
         */

        /**
         * Constructs a new RequestEnterVideoPokerResult.
         * @memberof CVP
         * @classdesc Represents a RequestEnterVideoPokerResult.
         * @implements IRequestEnterVideoPokerResult
         * @constructor
         * @param {CVP.IRequestEnterVideoPokerResult=} [properties] Properties to set
         */
        function RequestEnterVideoPokerResult(properties) {
            this.creditAmount = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestEnterVideoPokerResult curBetIdx.
         * @member {number} curBetIdx
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.curBetIdx = 0;

        /**
         * RequestEnterVideoPokerResult payTable.
         * @member {CVP.IPayTable|null|undefined} payTable
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.payTable = null;

        /**
         * RequestEnterVideoPokerResult creditAmount.
         * @member {Array.<number>} creditAmount
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.creditAmount = $util.emptyArray;

        /**
         * RequestEnterVideoPokerResult jackpotAcc.
         * @member {number} jackpotAcc
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.jackpotAcc = 0;

        /**
         * RequestEnterVideoPokerResult jackpotBase.
         * @member {number} jackpotBase
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.jackpotBase = 0;

        /**
         * RequestEnterVideoPokerResult creditAmountIdx.
         * @member {number} creditAmountIdx
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.creditAmountIdx = 0;

        /**
         * RequestEnterVideoPokerResult isHaveInterstitial.
         * @member {boolean} isHaveInterstitial
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.isHaveInterstitial = false;

        /**
         * RequestEnterVideoPokerResult isPractice.
         * @member {boolean} isPractice
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.isPractice = false;

        /**
         * RequestEnterVideoPokerResult creditAmountMax.
         * @member {number} creditAmountMax
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.creditAmountMax = 0;

        /**
         * RequestEnterVideoPokerResult jackpotAdd.
         * @member {number} jackpotAdd
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.jackpotAdd = 0;

        /**
         * RequestEnterVideoPokerResult gameId.
         * @member {number} gameId
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         */
        RequestEnterVideoPokerResult.prototype.gameId = 0;

        /**
         * Creates a new RequestEnterVideoPokerResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestEnterVideoPokerResult
         * @static
         * @param {CVP.IRequestEnterVideoPokerResult=} [properties] Properties to set
         * @returns {CVP.RequestEnterVideoPokerResult} RequestEnterVideoPokerResult instance
         */
        RequestEnterVideoPokerResult.create = function create(properties) {
            return new RequestEnterVideoPokerResult(properties);
        };

        /**
         * Encodes the specified RequestEnterVideoPokerResult message. Does not implicitly {@link CVP.RequestEnterVideoPokerResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestEnterVideoPokerResult
         * @static
         * @param {CVP.IRequestEnterVideoPokerResult} message RequestEnterVideoPokerResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestEnterVideoPokerResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.curBetIdx);
            if (message.payTable != null && message.hasOwnProperty("payTable"))
                $root.CVP.PayTable.encode(message.payTable, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.creditAmount != null && message.creditAmount.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.creditAmount.length; ++i)
                    writer.double(message.creditAmount[i]);
                writer.ldelim();
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.jackpotAcc);
            if (message.jackpotBase != null && message.hasOwnProperty("jackpotBase"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.jackpotBase);
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.creditAmountIdx);
            if (message.isHaveInterstitial != null && message.hasOwnProperty("isHaveInterstitial"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isHaveInterstitial);
            if (message.isPractice != null && message.hasOwnProperty("isPractice"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.isPractice);
            if (message.creditAmountMax != null && message.hasOwnProperty("creditAmountMax"))
                writer.uint32(/* id 9, wireType 1 =*/73).double(message.creditAmountMax);
            if (message.jackpotAdd != null && message.hasOwnProperty("jackpotAdd"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.jackpotAdd);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified RequestEnterVideoPokerResult message, length delimited. Does not implicitly {@link CVP.RequestEnterVideoPokerResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestEnterVideoPokerResult
         * @static
         * @param {CVP.IRequestEnterVideoPokerResult} message RequestEnterVideoPokerResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestEnterVideoPokerResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestEnterVideoPokerResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestEnterVideoPokerResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestEnterVideoPokerResult} RequestEnterVideoPokerResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestEnterVideoPokerResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestEnterVideoPokerResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.curBetIdx = reader.int32();
                    break;
                case 2:
                    message.payTable = $root.CVP.PayTable.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.creditAmount && message.creditAmount.length))
                        message.creditAmount = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.creditAmount.push(reader.double());
                    } else
                        message.creditAmount.push(reader.double());
                    break;
                case 4:
                    message.jackpotAcc = reader.int32();
                    break;
                case 5:
                    message.jackpotBase = reader.double();
                    break;
                case 6:
                    message.creditAmountIdx = reader.int32();
                    break;
                case 7:
                    message.isHaveInterstitial = reader.bool();
                    break;
                case 8:
                    message.isPractice = reader.bool();
                    break;
                case 9:
                    message.creditAmountMax = reader.double();
                    break;
                case 10:
                    message.jackpotAdd = reader.int32();
                    break;
                case 11:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestEnterVideoPokerResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestEnterVideoPokerResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestEnterVideoPokerResult} RequestEnterVideoPokerResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestEnterVideoPokerResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestEnterVideoPokerResult message.
         * @function verify
         * @memberof CVP.RequestEnterVideoPokerResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestEnterVideoPokerResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                if (!$util.isInteger(message.curBetIdx))
                    return "curBetIdx: integer expected";
            if (message.payTable != null && message.hasOwnProperty("payTable")) {
                var error = $root.CVP.PayTable.verify(message.payTable);
                if (error)
                    return "payTable." + error;
            }
            if (message.creditAmount != null && message.hasOwnProperty("creditAmount")) {
                if (!Array.isArray(message.creditAmount))
                    return "creditAmount: array expected";
                for (var i = 0; i < message.creditAmount.length; ++i)
                    if (typeof message.creditAmount[i] !== "number")
                        return "creditAmount: number[] expected";
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                if (!$util.isInteger(message.jackpotAcc))
                    return "jackpotAcc: integer expected";
            if (message.jackpotBase != null && message.hasOwnProperty("jackpotBase"))
                if (typeof message.jackpotBase !== "number")
                    return "jackpotBase: number expected";
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                if (!$util.isInteger(message.creditAmountIdx))
                    return "creditAmountIdx: integer expected";
            if (message.isHaveInterstitial != null && message.hasOwnProperty("isHaveInterstitial"))
                if (typeof message.isHaveInterstitial !== "boolean")
                    return "isHaveInterstitial: boolean expected";
            if (message.isPractice != null && message.hasOwnProperty("isPractice"))
                if (typeof message.isPractice !== "boolean")
                    return "isPractice: boolean expected";
            if (message.creditAmountMax != null && message.hasOwnProperty("creditAmountMax"))
                if (typeof message.creditAmountMax !== "number")
                    return "creditAmountMax: number expected";
            if (message.jackpotAdd != null && message.hasOwnProperty("jackpotAdd"))
                if (!$util.isInteger(message.jackpotAdd))
                    return "jackpotAdd: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a RequestEnterVideoPokerResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestEnterVideoPokerResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestEnterVideoPokerResult} RequestEnterVideoPokerResult
         */
        RequestEnterVideoPokerResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestEnterVideoPokerResult)
                return object;
            var message = new $root.CVP.RequestEnterVideoPokerResult();
            if (object.curBetIdx != null)
                message.curBetIdx = object.curBetIdx | 0;
            if (object.payTable != null) {
                if (typeof object.payTable !== "object")
                    throw TypeError(".CVP.RequestEnterVideoPokerResult.payTable: object expected");
                message.payTable = $root.CVP.PayTable.fromObject(object.payTable);
            }
            if (object.creditAmount) {
                if (!Array.isArray(object.creditAmount))
                    throw TypeError(".CVP.RequestEnterVideoPokerResult.creditAmount: array expected");
                message.creditAmount = [];
                for (var i = 0; i < object.creditAmount.length; ++i)
                    message.creditAmount[i] = Number(object.creditAmount[i]);
            }
            if (object.jackpotAcc != null)
                message.jackpotAcc = object.jackpotAcc | 0;
            if (object.jackpotBase != null)
                message.jackpotBase = Number(object.jackpotBase);
            if (object.creditAmountIdx != null)
                message.creditAmountIdx = object.creditAmountIdx | 0;
            if (object.isHaveInterstitial != null)
                message.isHaveInterstitial = Boolean(object.isHaveInterstitial);
            if (object.isPractice != null)
                message.isPractice = Boolean(object.isPractice);
            if (object.creditAmountMax != null)
                message.creditAmountMax = Number(object.creditAmountMax);
            if (object.jackpotAdd != null)
                message.jackpotAdd = object.jackpotAdd | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestEnterVideoPokerResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestEnterVideoPokerResult
         * @static
         * @param {CVP.RequestEnterVideoPokerResult} message RequestEnterVideoPokerResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestEnterVideoPokerResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.creditAmount = [];
            if (options.defaults) {
                object.curBetIdx = 0;
                object.payTable = null;
                object.jackpotAcc = 0;
                object.jackpotBase = 0;
                object.creditAmountIdx = 0;
                object.isHaveInterstitial = false;
                object.isPractice = false;
                object.creditAmountMax = 0;
                object.jackpotAdd = 0;
                object.gameId = 0;
            }
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                object.curBetIdx = message.curBetIdx;
            if (message.payTable != null && message.hasOwnProperty("payTable"))
                object.payTable = $root.CVP.PayTable.toObject(message.payTable, options);
            if (message.creditAmount && message.creditAmount.length) {
                object.creditAmount = [];
                for (var j = 0; j < message.creditAmount.length; ++j)
                    object.creditAmount[j] = options.json && !isFinite(message.creditAmount[j]) ? String(message.creditAmount[j]) : message.creditAmount[j];
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                object.jackpotAcc = message.jackpotAcc;
            if (message.jackpotBase != null && message.hasOwnProperty("jackpotBase"))
                object.jackpotBase = options.json && !isFinite(message.jackpotBase) ? String(message.jackpotBase) : message.jackpotBase;
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                object.creditAmountIdx = message.creditAmountIdx;
            if (message.isHaveInterstitial != null && message.hasOwnProperty("isHaveInterstitial"))
                object.isHaveInterstitial = message.isHaveInterstitial;
            if (message.isPractice != null && message.hasOwnProperty("isPractice"))
                object.isPractice = message.isPractice;
            if (message.creditAmountMax != null && message.hasOwnProperty("creditAmountMax"))
                object.creditAmountMax = options.json && !isFinite(message.creditAmountMax) ? String(message.creditAmountMax) : message.creditAmountMax;
            if (message.jackpotAdd != null && message.hasOwnProperty("jackpotAdd"))
                object.jackpotAdd = message.jackpotAdd;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this RequestEnterVideoPokerResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestEnterVideoPokerResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestEnterVideoPokerResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestEnterVideoPokerResult;
    })();

    CVP.RequestDeal = (function() {

        /**
         * Properties of a RequestDeal.
         * @memberof CVP
         * @interface IRequestDeal
         * @property {number|null} [curBetIdx] RequestDeal curBetIdx
         * @property {number|null} [creditAmountIdx] RequestDeal creditAmountIdx
         * @property {number|null} [hand] RequestDeal hand
         * @property {Array.<string>|null} [pokerList] RequestDeal pokerList
         * @property {boolean|null} [isPractice] RequestDeal isPractice
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestDeal commonParams
         */

        /**
         * Constructs a new RequestDeal.
         * @memberof CVP
         * @classdesc Represents a RequestDeal.
         * @implements IRequestDeal
         * @constructor
         * @param {CVP.IRequestDeal=} [properties] Properties to set
         */
        function RequestDeal(properties) {
            this.pokerList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDeal curBetIdx.
         * @member {number} curBetIdx
         * @memberof CVP.RequestDeal
         * @instance
         */
        RequestDeal.prototype.curBetIdx = 0;

        /**
         * RequestDeal creditAmountIdx.
         * @member {number} creditAmountIdx
         * @memberof CVP.RequestDeal
         * @instance
         */
        RequestDeal.prototype.creditAmountIdx = 0;

        /**
         * RequestDeal hand.
         * @member {number} hand
         * @memberof CVP.RequestDeal
         * @instance
         */
        RequestDeal.prototype.hand = 0;

        /**
         * RequestDeal pokerList.
         * @member {Array.<string>} pokerList
         * @memberof CVP.RequestDeal
         * @instance
         */
        RequestDeal.prototype.pokerList = $util.emptyArray;

        /**
         * RequestDeal isPractice.
         * @member {boolean} isPractice
         * @memberof CVP.RequestDeal
         * @instance
         */
        RequestDeal.prototype.isPractice = false;

        /**
         * RequestDeal commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestDeal
         * @instance
         */
        RequestDeal.prototype.commonParams = null;

        /**
         * Creates a new RequestDeal instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDeal
         * @static
         * @param {CVP.IRequestDeal=} [properties] Properties to set
         * @returns {CVP.RequestDeal} RequestDeal instance
         */
        RequestDeal.create = function create(properties) {
            return new RequestDeal(properties);
        };

        /**
         * Encodes the specified RequestDeal message. Does not implicitly {@link CVP.RequestDeal.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDeal
         * @static
         * @param {CVP.IRequestDeal} message RequestDeal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeal.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.curBetIdx);
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.creditAmountIdx);
            if (message.hand != null && message.hasOwnProperty("hand"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.hand);
            if (message.pokerList != null && message.pokerList.length)
                for (var i = 0; i < message.pokerList.length; ++i)
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.pokerList[i]);
            if (message.isPractice != null && message.hasOwnProperty("isPractice"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isPractice);
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestDeal message, length delimited. Does not implicitly {@link CVP.RequestDeal.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDeal
         * @static
         * @param {CVP.IRequestDeal} message RequestDeal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDeal.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDeal message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDeal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDeal} RequestDeal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeal.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDeal();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.curBetIdx = reader.int32();
                    break;
                case 2:
                    message.creditAmountIdx = reader.int32();
                    break;
                case 3:
                    message.hand = reader.int32();
                    break;
                case 4:
                    if (!(message.pokerList && message.pokerList.length))
                        message.pokerList = [];
                    message.pokerList.push(reader.string());
                    break;
                case 5:
                    message.isPractice = reader.bool();
                    break;
                case 6:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDeal message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDeal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDeal} RequestDeal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDeal.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDeal message.
         * @function verify
         * @memberof CVP.RequestDeal
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDeal.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                if (!$util.isInteger(message.curBetIdx))
                    return "curBetIdx: integer expected";
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                if (!$util.isInteger(message.creditAmountIdx))
                    return "creditAmountIdx: integer expected";
            if (message.hand != null && message.hasOwnProperty("hand"))
                if (!$util.isInteger(message.hand))
                    return "hand: integer expected";
            if (message.pokerList != null && message.hasOwnProperty("pokerList")) {
                if (!Array.isArray(message.pokerList))
                    return "pokerList: array expected";
                for (var i = 0; i < message.pokerList.length; ++i)
                    if (!$util.isString(message.pokerList[i]))
                        return "pokerList: string[] expected";
            }
            if (message.isPractice != null && message.hasOwnProperty("isPractice"))
                if (typeof message.isPractice !== "boolean")
                    return "isPractice: boolean expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestDeal message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDeal
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDeal} RequestDeal
         */
        RequestDeal.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDeal)
                return object;
            var message = new $root.CVP.RequestDeal();
            if (object.curBetIdx != null)
                message.curBetIdx = object.curBetIdx | 0;
            if (object.creditAmountIdx != null)
                message.creditAmountIdx = object.creditAmountIdx | 0;
            if (object.hand != null)
                message.hand = object.hand | 0;
            if (object.pokerList) {
                if (!Array.isArray(object.pokerList))
                    throw TypeError(".CVP.RequestDeal.pokerList: array expected");
                message.pokerList = [];
                for (var i = 0; i < object.pokerList.length; ++i)
                    message.pokerList[i] = String(object.pokerList[i]);
            }
            if (object.isPractice != null)
                message.isPractice = Boolean(object.isPractice);
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestDeal.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestDeal message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDeal
         * @static
         * @param {CVP.RequestDeal} message RequestDeal
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDeal.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pokerList = [];
            if (options.defaults) {
                object.curBetIdx = 0;
                object.creditAmountIdx = 0;
                object.hand = 0;
                object.isPractice = false;
                object.commonParams = null;
            }
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                object.curBetIdx = message.curBetIdx;
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                object.creditAmountIdx = message.creditAmountIdx;
            if (message.hand != null && message.hasOwnProperty("hand"))
                object.hand = message.hand;
            if (message.pokerList && message.pokerList.length) {
                object.pokerList = [];
                for (var j = 0; j < message.pokerList.length; ++j)
                    object.pokerList[j] = message.pokerList[j];
            }
            if (message.isPractice != null && message.hasOwnProperty("isPractice"))
                object.isPractice = message.isPractice;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestDeal to JSON.
         * @function toJSON
         * @memberof CVP.RequestDeal
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDeal.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDeal;
    })();

    CVP.RequestDealResult = (function() {

        /**
         * Properties of a RequestDealResult.
         * @memberof CVP
         * @interface IRequestDealResult
         * @property {Array.<string>|null} [pokerList] RequestDealResult pokerList
         * @property {string|null} [winTypeName] RequestDealResult winTypeName
         * @property {number|null} [jackpot] RequestDealResult jackpot
         */

        /**
         * Constructs a new RequestDealResult.
         * @memberof CVP
         * @classdesc Represents a RequestDealResult.
         * @implements IRequestDealResult
         * @constructor
         * @param {CVP.IRequestDealResult=} [properties] Properties to set
         */
        function RequestDealResult(properties) {
            this.pokerList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDealResult pokerList.
         * @member {Array.<string>} pokerList
         * @memberof CVP.RequestDealResult
         * @instance
         */
        RequestDealResult.prototype.pokerList = $util.emptyArray;

        /**
         * RequestDealResult winTypeName.
         * @member {string} winTypeName
         * @memberof CVP.RequestDealResult
         * @instance
         */
        RequestDealResult.prototype.winTypeName = "";

        /**
         * RequestDealResult jackpot.
         * @member {number} jackpot
         * @memberof CVP.RequestDealResult
         * @instance
         */
        RequestDealResult.prototype.jackpot = 0;

        /**
         * Creates a new RequestDealResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDealResult
         * @static
         * @param {CVP.IRequestDealResult=} [properties] Properties to set
         * @returns {CVP.RequestDealResult} RequestDealResult instance
         */
        RequestDealResult.create = function create(properties) {
            return new RequestDealResult(properties);
        };

        /**
         * Encodes the specified RequestDealResult message. Does not implicitly {@link CVP.RequestDealResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDealResult
         * @static
         * @param {CVP.IRequestDealResult} message RequestDealResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDealResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pokerList != null && message.pokerList.length)
                for (var i = 0; i < message.pokerList.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.pokerList[i]);
            if (message.winTypeName != null && message.hasOwnProperty("winTypeName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.winTypeName);
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.jackpot);
            return writer;
        };

        /**
         * Encodes the specified RequestDealResult message, length delimited. Does not implicitly {@link CVP.RequestDealResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDealResult
         * @static
         * @param {CVP.IRequestDealResult} message RequestDealResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDealResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDealResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDealResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDealResult} RequestDealResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDealResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDealResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.pokerList && message.pokerList.length))
                        message.pokerList = [];
                    message.pokerList.push(reader.string());
                    break;
                case 2:
                    message.winTypeName = reader.string();
                    break;
                case 3:
                    message.jackpot = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDealResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDealResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDealResult} RequestDealResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDealResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDealResult message.
         * @function verify
         * @memberof CVP.RequestDealResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDealResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pokerList != null && message.hasOwnProperty("pokerList")) {
                if (!Array.isArray(message.pokerList))
                    return "pokerList: array expected";
                for (var i = 0; i < message.pokerList.length; ++i)
                    if (!$util.isString(message.pokerList[i]))
                        return "pokerList: string[] expected";
            }
            if (message.winTypeName != null && message.hasOwnProperty("winTypeName"))
                if (!$util.isString(message.winTypeName))
                    return "winTypeName: string expected";
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                if (typeof message.jackpot !== "number")
                    return "jackpot: number expected";
            return null;
        };

        /**
         * Creates a RequestDealResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDealResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDealResult} RequestDealResult
         */
        RequestDealResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDealResult)
                return object;
            var message = new $root.CVP.RequestDealResult();
            if (object.pokerList) {
                if (!Array.isArray(object.pokerList))
                    throw TypeError(".CVP.RequestDealResult.pokerList: array expected");
                message.pokerList = [];
                for (var i = 0; i < object.pokerList.length; ++i)
                    message.pokerList[i] = String(object.pokerList[i]);
            }
            if (object.winTypeName != null)
                message.winTypeName = String(object.winTypeName);
            if (object.jackpot != null)
                message.jackpot = Number(object.jackpot);
            return message;
        };

        /**
         * Creates a plain object from a RequestDealResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDealResult
         * @static
         * @param {CVP.RequestDealResult} message RequestDealResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDealResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pokerList = [];
            if (options.defaults) {
                object.winTypeName = "";
                object.jackpot = 0;
            }
            if (message.pokerList && message.pokerList.length) {
                object.pokerList = [];
                for (var j = 0; j < message.pokerList.length; ++j)
                    object.pokerList[j] = message.pokerList[j];
            }
            if (message.winTypeName != null && message.hasOwnProperty("winTypeName"))
                object.winTypeName = message.winTypeName;
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                object.jackpot = options.json && !isFinite(message.jackpot) ? String(message.jackpot) : message.jackpot;
            return object;
        };

        /**
         * Converts this RequestDealResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestDealResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDealResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDealResult;
    })();

    CVP.RequestDraw = (function() {

        /**
         * Properties of a RequestDraw.
         * @memberof CVP
         * @interface IRequestDraw
         * @property {Array.<number>|null} [holdIdxList] RequestDraw holdIdxList
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestDraw commonParams
         */

        /**
         * Constructs a new RequestDraw.
         * @memberof CVP
         * @classdesc Represents a RequestDraw.
         * @implements IRequestDraw
         * @constructor
         * @param {CVP.IRequestDraw=} [properties] Properties to set
         */
        function RequestDraw(properties) {
            this.holdIdxList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDraw holdIdxList.
         * @member {Array.<number>} holdIdxList
         * @memberof CVP.RequestDraw
         * @instance
         */
        RequestDraw.prototype.holdIdxList = $util.emptyArray;

        /**
         * RequestDraw commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestDraw
         * @instance
         */
        RequestDraw.prototype.commonParams = null;

        /**
         * Creates a new RequestDraw instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDraw
         * @static
         * @param {CVP.IRequestDraw=} [properties] Properties to set
         * @returns {CVP.RequestDraw} RequestDraw instance
         */
        RequestDraw.create = function create(properties) {
            return new RequestDraw(properties);
        };

        /**
         * Encodes the specified RequestDraw message. Does not implicitly {@link CVP.RequestDraw.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDraw
         * @static
         * @param {CVP.IRequestDraw} message RequestDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDraw.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.holdIdxList != null && message.holdIdxList.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (var i = 0; i < message.holdIdxList.length; ++i)
                    writer.int32(message.holdIdxList[i]);
                writer.ldelim();
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestDraw message, length delimited. Does not implicitly {@link CVP.RequestDraw.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDraw
         * @static
         * @param {CVP.IRequestDraw} message RequestDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDraw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDraw message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDraw} RequestDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDraw.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDraw();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.holdIdxList && message.holdIdxList.length))
                        message.holdIdxList = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.holdIdxList.push(reader.int32());
                    } else
                        message.holdIdxList.push(reader.int32());
                    break;
                case 2:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDraw message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDraw} RequestDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDraw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDraw message.
         * @function verify
         * @memberof CVP.RequestDraw
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDraw.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.holdIdxList != null && message.hasOwnProperty("holdIdxList")) {
                if (!Array.isArray(message.holdIdxList))
                    return "holdIdxList: array expected";
                for (var i = 0; i < message.holdIdxList.length; ++i)
                    if (!$util.isInteger(message.holdIdxList[i]))
                        return "holdIdxList: integer[] expected";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestDraw message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDraw
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDraw} RequestDraw
         */
        RequestDraw.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDraw)
                return object;
            var message = new $root.CVP.RequestDraw();
            if (object.holdIdxList) {
                if (!Array.isArray(object.holdIdxList))
                    throw TypeError(".CVP.RequestDraw.holdIdxList: array expected");
                message.holdIdxList = [];
                for (var i = 0; i < object.holdIdxList.length; ++i)
                    message.holdIdxList[i] = object.holdIdxList[i] | 0;
            }
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestDraw.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestDraw message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDraw
         * @static
         * @param {CVP.RequestDraw} message RequestDraw
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDraw.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.holdIdxList = [];
            if (options.defaults)
                object.commonParams = null;
            if (message.holdIdxList && message.holdIdxList.length) {
                object.holdIdxList = [];
                for (var j = 0; j < message.holdIdxList.length; ++j)
                    object.holdIdxList[j] = message.holdIdxList[j];
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestDraw to JSON.
         * @function toJSON
         * @memberof CVP.RequestDraw
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDraw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDraw;
    })();

    CVP.RequestDrawDebug = (function() {

        /**
         * Properties of a RequestDrawDebug.
         * @memberof CVP
         * @interface IRequestDrawDebug
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestDrawDebug commonParams
         * @property {Array.<number>|null} [holdIdxList] RequestDrawDebug holdIdxList
         * @property {Array.<string>|null} [pokerList] RequestDrawDebug pokerList
         * @property {number|null} [multiple] RequestDrawDebug multiple
         */

        /**
         * Constructs a new RequestDrawDebug.
         * @memberof CVP
         * @classdesc Represents a RequestDrawDebug.
         * @implements IRequestDrawDebug
         * @constructor
         * @param {CVP.IRequestDrawDebug=} [properties] Properties to set
         */
        function RequestDrawDebug(properties) {
            this.holdIdxList = [];
            this.pokerList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDrawDebug commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestDrawDebug
         * @instance
         */
        RequestDrawDebug.prototype.commonParams = null;

        /**
         * RequestDrawDebug holdIdxList.
         * @member {Array.<number>} holdIdxList
         * @memberof CVP.RequestDrawDebug
         * @instance
         */
        RequestDrawDebug.prototype.holdIdxList = $util.emptyArray;

        /**
         * RequestDrawDebug pokerList.
         * @member {Array.<string>} pokerList
         * @memberof CVP.RequestDrawDebug
         * @instance
         */
        RequestDrawDebug.prototype.pokerList = $util.emptyArray;

        /**
         * RequestDrawDebug multiple.
         * @member {number} multiple
         * @memberof CVP.RequestDrawDebug
         * @instance
         */
        RequestDrawDebug.prototype.multiple = 0;

        /**
         * Creates a new RequestDrawDebug instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDrawDebug
         * @static
         * @param {CVP.IRequestDrawDebug=} [properties] Properties to set
         * @returns {CVP.RequestDrawDebug} RequestDrawDebug instance
         */
        RequestDrawDebug.create = function create(properties) {
            return new RequestDrawDebug(properties);
        };

        /**
         * Encodes the specified RequestDrawDebug message. Does not implicitly {@link CVP.RequestDrawDebug.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDrawDebug
         * @static
         * @param {CVP.IRequestDrawDebug} message RequestDrawDebug message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDrawDebug.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.holdIdxList != null && message.holdIdxList.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.holdIdxList.length; ++i)
                    writer.int32(message.holdIdxList[i]);
                writer.ldelim();
            }
            if (message.pokerList != null && message.pokerList.length)
                for (var i = 0; i < message.pokerList.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.pokerList[i]);
            if (message.multiple != null && message.hasOwnProperty("multiple"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.multiple);
            return writer;
        };

        /**
         * Encodes the specified RequestDrawDebug message, length delimited. Does not implicitly {@link CVP.RequestDrawDebug.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDrawDebug
         * @static
         * @param {CVP.IRequestDrawDebug} message RequestDrawDebug message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDrawDebug.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDrawDebug message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDrawDebug
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDrawDebug} RequestDrawDebug
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDrawDebug.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDrawDebug();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.holdIdxList && message.holdIdxList.length))
                        message.holdIdxList = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.holdIdxList.push(reader.int32());
                    } else
                        message.holdIdxList.push(reader.int32());
                    break;
                case 3:
                    if (!(message.pokerList && message.pokerList.length))
                        message.pokerList = [];
                    message.pokerList.push(reader.string());
                    break;
                case 4:
                    message.multiple = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDrawDebug message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDrawDebug
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDrawDebug} RequestDrawDebug
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDrawDebug.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDrawDebug message.
         * @function verify
         * @memberof CVP.RequestDrawDebug
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDrawDebug.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.holdIdxList != null && message.hasOwnProperty("holdIdxList")) {
                if (!Array.isArray(message.holdIdxList))
                    return "holdIdxList: array expected";
                for (var i = 0; i < message.holdIdxList.length; ++i)
                    if (!$util.isInteger(message.holdIdxList[i]))
                        return "holdIdxList: integer[] expected";
            }
            if (message.pokerList != null && message.hasOwnProperty("pokerList")) {
                if (!Array.isArray(message.pokerList))
                    return "pokerList: array expected";
                for (var i = 0; i < message.pokerList.length; ++i)
                    if (!$util.isString(message.pokerList[i]))
                        return "pokerList: string[] expected";
            }
            if (message.multiple != null && message.hasOwnProperty("multiple"))
                if (!$util.isInteger(message.multiple))
                    return "multiple: integer expected";
            return null;
        };

        /**
         * Creates a RequestDrawDebug message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDrawDebug
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDrawDebug} RequestDrawDebug
         */
        RequestDrawDebug.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDrawDebug)
                return object;
            var message = new $root.CVP.RequestDrawDebug();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestDrawDebug.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.holdIdxList) {
                if (!Array.isArray(object.holdIdxList))
                    throw TypeError(".CVP.RequestDrawDebug.holdIdxList: array expected");
                message.holdIdxList = [];
                for (var i = 0; i < object.holdIdxList.length; ++i)
                    message.holdIdxList[i] = object.holdIdxList[i] | 0;
            }
            if (object.pokerList) {
                if (!Array.isArray(object.pokerList))
                    throw TypeError(".CVP.RequestDrawDebug.pokerList: array expected");
                message.pokerList = [];
                for (var i = 0; i < object.pokerList.length; ++i)
                    message.pokerList[i] = String(object.pokerList[i]);
            }
            if (object.multiple != null)
                message.multiple = object.multiple | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestDrawDebug message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDrawDebug
         * @static
         * @param {CVP.RequestDrawDebug} message RequestDrawDebug
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDrawDebug.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.holdIdxList = [];
                object.pokerList = [];
            }
            if (options.defaults) {
                object.commonParams = null;
                object.multiple = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.holdIdxList && message.holdIdxList.length) {
                object.holdIdxList = [];
                for (var j = 0; j < message.holdIdxList.length; ++j)
                    object.holdIdxList[j] = message.holdIdxList[j];
            }
            if (message.pokerList && message.pokerList.length) {
                object.pokerList = [];
                for (var j = 0; j < message.pokerList.length; ++j)
                    object.pokerList[j] = message.pokerList[j];
            }
            if (message.multiple != null && message.hasOwnProperty("multiple"))
                object.multiple = message.multiple;
            return object;
        };

        /**
         * Converts this RequestDrawDebug to JSON.
         * @function toJSON
         * @memberof CVP.RequestDrawDebug
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDrawDebug.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDrawDebug;
    })();

    CVP.RequestDrawDebugResult = (function() {

        /**
         * Properties of a RequestDrawDebugResult.
         * @memberof CVP
         * @interface IRequestDrawDebugResult
         * @property {number|null} [balance] RequestDrawDebugResult balance
         * @property {Array.<CVP.IPokerData>|null} [pokerDataList] RequestDrawDebugResult pokerDataList
         * @property {number|null} [jackpotAcc] RequestDrawDebugResult jackpotAcc
         * @property {boolean|null} [isDoubleOrNothing] RequestDrawDebugResult isDoubleOrNothing
         * @property {boolean|null} [isRewardRoulette] RequestDrawDebugResult isRewardRoulette
         * @property {number|null} [upgrade] RequestDrawDebugResult upgrade
         * @property {number|null} [curExp] RequestDrawDebugResult curExp
         * @property {number|Long|null} [nextExp] RequestDrawDebugResult nextExp
         * @property {CVP.ILevelUpReward|null} [levelUpReward] RequestDrawDebugResult levelUpReward
         * @property {CVP.IPokerData|null} [bigWin] RequestDrawDebugResult bigWin
         * @property {boolean|null} [isFlash] RequestDrawDebugResult isFlash
         * @property {CVP.IPokerData|null} [jackPot] RequestDrawDebugResult jackPot
         * @property {number|null} [jackpot] RequestDrawDebugResult jackpot
         * @property {CVP.IPokerEvData|null} [pokerEvData] RequestDrawDebugResult pokerEvData
         */

        /**
         * Constructs a new RequestDrawDebugResult.
         * @memberof CVP
         * @classdesc Represents a RequestDrawDebugResult.
         * @implements IRequestDrawDebugResult
         * @constructor
         * @param {CVP.IRequestDrawDebugResult=} [properties] Properties to set
         */
        function RequestDrawDebugResult(properties) {
            this.pokerDataList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDrawDebugResult balance.
         * @member {number} balance
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.balance = 0;

        /**
         * RequestDrawDebugResult pokerDataList.
         * @member {Array.<CVP.IPokerData>} pokerDataList
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.pokerDataList = $util.emptyArray;

        /**
         * RequestDrawDebugResult jackpotAcc.
         * @member {number} jackpotAcc
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.jackpotAcc = 0;

        /**
         * RequestDrawDebugResult isDoubleOrNothing.
         * @member {boolean} isDoubleOrNothing
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.isDoubleOrNothing = false;

        /**
         * RequestDrawDebugResult isRewardRoulette.
         * @member {boolean} isRewardRoulette
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.isRewardRoulette = false;

        /**
         * RequestDrawDebugResult upgrade.
         * @member {number} upgrade
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.upgrade = 0;

        /**
         * RequestDrawDebugResult curExp.
         * @member {number} curExp
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.curExp = 0;

        /**
         * RequestDrawDebugResult nextExp.
         * @member {number|Long} nextExp
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.nextExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RequestDrawDebugResult levelUpReward.
         * @member {CVP.ILevelUpReward|null|undefined} levelUpReward
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.levelUpReward = null;

        /**
         * RequestDrawDebugResult bigWin.
         * @member {CVP.IPokerData|null|undefined} bigWin
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.bigWin = null;

        /**
         * RequestDrawDebugResult isFlash.
         * @member {boolean} isFlash
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.isFlash = false;

        /**
         * RequestDrawDebugResult jackPot.
         * @member {CVP.IPokerData|null|undefined} jackPot
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.jackPot = null;

        /**
         * RequestDrawDebugResult jackpot.
         * @member {number} jackpot
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.jackpot = 0;

        /**
         * RequestDrawDebugResult pokerEvData.
         * @member {CVP.IPokerEvData|null|undefined} pokerEvData
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         */
        RequestDrawDebugResult.prototype.pokerEvData = null;

        /**
         * Creates a new RequestDrawDebugResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDrawDebugResult
         * @static
         * @param {CVP.IRequestDrawDebugResult=} [properties] Properties to set
         * @returns {CVP.RequestDrawDebugResult} RequestDrawDebugResult instance
         */
        RequestDrawDebugResult.create = function create(properties) {
            return new RequestDrawDebugResult(properties);
        };

        /**
         * Encodes the specified RequestDrawDebugResult message. Does not implicitly {@link CVP.RequestDrawDebugResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDrawDebugResult
         * @static
         * @param {CVP.IRequestDrawDebugResult} message RequestDrawDebugResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDrawDebugResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.balance != null && message.hasOwnProperty("balance"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.balance);
            if (message.pokerDataList != null && message.pokerDataList.length)
                for (var i = 0; i < message.pokerDataList.length; ++i)
                    $root.CVP.PokerData.encode(message.pokerDataList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.jackpotAcc);
            if (message.isDoubleOrNothing != null && message.hasOwnProperty("isDoubleOrNothing"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isDoubleOrNothing);
            if (message.isRewardRoulette != null && message.hasOwnProperty("isRewardRoulette"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isRewardRoulette);
            if (message.upgrade != null && message.hasOwnProperty("upgrade"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.upgrade);
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                writer.uint32(/* id 9, wireType 1 =*/73).double(message.curExp);
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.nextExp);
            if (message.levelUpReward != null && message.hasOwnProperty("levelUpReward"))
                $root.CVP.LevelUpReward.encode(message.levelUpReward, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.bigWin != null && message.hasOwnProperty("bigWin"))
                $root.CVP.PokerData.encode(message.bigWin, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.isFlash != null && message.hasOwnProperty("isFlash"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.isFlash);
            if (message.jackPot != null && message.hasOwnProperty("jackPot"))
                $root.CVP.PokerData.encode(message.jackPot, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                writer.uint32(/* id 15, wireType 1 =*/121).double(message.jackpot);
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData"))
                $root.CVP.PokerEvData.encode(message.pokerEvData, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestDrawDebugResult message, length delimited. Does not implicitly {@link CVP.RequestDrawDebugResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDrawDebugResult
         * @static
         * @param {CVP.IRequestDrawDebugResult} message RequestDrawDebugResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDrawDebugResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDrawDebugResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDrawDebugResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDrawDebugResult} RequestDrawDebugResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDrawDebugResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDrawDebugResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.balance = reader.double();
                    break;
                case 2:
                    if (!(message.pokerDataList && message.pokerDataList.length))
                        message.pokerDataList = [];
                    message.pokerDataList.push($root.CVP.PokerData.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.jackpotAcc = reader.int32();
                    break;
                case 6:
                    message.isDoubleOrNothing = reader.bool();
                    break;
                case 7:
                    message.isRewardRoulette = reader.bool();
                    break;
                case 8:
                    message.upgrade = reader.int32();
                    break;
                case 9:
                    message.curExp = reader.double();
                    break;
                case 10:
                    message.nextExp = reader.int64();
                    break;
                case 11:
                    message.levelUpReward = $root.CVP.LevelUpReward.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.bigWin = $root.CVP.PokerData.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.isFlash = reader.bool();
                    break;
                case 14:
                    message.jackPot = $root.CVP.PokerData.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.jackpot = reader.double();
                    break;
                case 16:
                    message.pokerEvData = $root.CVP.PokerEvData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDrawDebugResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDrawDebugResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDrawDebugResult} RequestDrawDebugResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDrawDebugResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDrawDebugResult message.
         * @function verify
         * @memberof CVP.RequestDrawDebugResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDrawDebugResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.balance != null && message.hasOwnProperty("balance"))
                if (typeof message.balance !== "number")
                    return "balance: number expected";
            if (message.pokerDataList != null && message.hasOwnProperty("pokerDataList")) {
                if (!Array.isArray(message.pokerDataList))
                    return "pokerDataList: array expected";
                for (var i = 0; i < message.pokerDataList.length; ++i) {
                    var error = $root.CVP.PokerData.verify(message.pokerDataList[i]);
                    if (error)
                        return "pokerDataList." + error;
                }
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                if (!$util.isInteger(message.jackpotAcc))
                    return "jackpotAcc: integer expected";
            if (message.isDoubleOrNothing != null && message.hasOwnProperty("isDoubleOrNothing"))
                if (typeof message.isDoubleOrNothing !== "boolean")
                    return "isDoubleOrNothing: boolean expected";
            if (message.isRewardRoulette != null && message.hasOwnProperty("isRewardRoulette"))
                if (typeof message.isRewardRoulette !== "boolean")
                    return "isRewardRoulette: boolean expected";
            if (message.upgrade != null && message.hasOwnProperty("upgrade"))
                if (!$util.isInteger(message.upgrade))
                    return "upgrade: integer expected";
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                if (typeof message.curExp !== "number")
                    return "curExp: number expected";
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                if (!$util.isInteger(message.nextExp) && !(message.nextExp && $util.isInteger(message.nextExp.low) && $util.isInteger(message.nextExp.high)))
                    return "nextExp: integer|Long expected";
            if (message.levelUpReward != null && message.hasOwnProperty("levelUpReward")) {
                var error = $root.CVP.LevelUpReward.verify(message.levelUpReward);
                if (error)
                    return "levelUpReward." + error;
            }
            if (message.bigWin != null && message.hasOwnProperty("bigWin")) {
                var error = $root.CVP.PokerData.verify(message.bigWin);
                if (error)
                    return "bigWin." + error;
            }
            if (message.isFlash != null && message.hasOwnProperty("isFlash"))
                if (typeof message.isFlash !== "boolean")
                    return "isFlash: boolean expected";
            if (message.jackPot != null && message.hasOwnProperty("jackPot")) {
                var error = $root.CVP.PokerData.verify(message.jackPot);
                if (error)
                    return "jackPot." + error;
            }
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                if (typeof message.jackpot !== "number")
                    return "jackpot: number expected";
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData")) {
                var error = $root.CVP.PokerEvData.verify(message.pokerEvData);
                if (error)
                    return "pokerEvData." + error;
            }
            return null;
        };

        /**
         * Creates a RequestDrawDebugResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDrawDebugResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDrawDebugResult} RequestDrawDebugResult
         */
        RequestDrawDebugResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDrawDebugResult)
                return object;
            var message = new $root.CVP.RequestDrawDebugResult();
            if (object.balance != null)
                message.balance = Number(object.balance);
            if (object.pokerDataList) {
                if (!Array.isArray(object.pokerDataList))
                    throw TypeError(".CVP.RequestDrawDebugResult.pokerDataList: array expected");
                message.pokerDataList = [];
                for (var i = 0; i < object.pokerDataList.length; ++i) {
                    if (typeof object.pokerDataList[i] !== "object")
                        throw TypeError(".CVP.RequestDrawDebugResult.pokerDataList: object expected");
                    message.pokerDataList[i] = $root.CVP.PokerData.fromObject(object.pokerDataList[i]);
                }
            }
            if (object.jackpotAcc != null)
                message.jackpotAcc = object.jackpotAcc | 0;
            if (object.isDoubleOrNothing != null)
                message.isDoubleOrNothing = Boolean(object.isDoubleOrNothing);
            if (object.isRewardRoulette != null)
                message.isRewardRoulette = Boolean(object.isRewardRoulette);
            if (object.upgrade != null)
                message.upgrade = object.upgrade | 0;
            if (object.curExp != null)
                message.curExp = Number(object.curExp);
            if (object.nextExp != null)
                if ($util.Long)
                    (message.nextExp = $util.Long.fromValue(object.nextExp)).unsigned = false;
                else if (typeof object.nextExp === "string")
                    message.nextExp = parseInt(object.nextExp, 10);
                else if (typeof object.nextExp === "number")
                    message.nextExp = object.nextExp;
                else if (typeof object.nextExp === "object")
                    message.nextExp = new $util.LongBits(object.nextExp.low >>> 0, object.nextExp.high >>> 0).toNumber();
            if (object.levelUpReward != null) {
                if (typeof object.levelUpReward !== "object")
                    throw TypeError(".CVP.RequestDrawDebugResult.levelUpReward: object expected");
                message.levelUpReward = $root.CVP.LevelUpReward.fromObject(object.levelUpReward);
            }
            if (object.bigWin != null) {
                if (typeof object.bigWin !== "object")
                    throw TypeError(".CVP.RequestDrawDebugResult.bigWin: object expected");
                message.bigWin = $root.CVP.PokerData.fromObject(object.bigWin);
            }
            if (object.isFlash != null)
                message.isFlash = Boolean(object.isFlash);
            if (object.jackPot != null) {
                if (typeof object.jackPot !== "object")
                    throw TypeError(".CVP.RequestDrawDebugResult.jackPot: object expected");
                message.jackPot = $root.CVP.PokerData.fromObject(object.jackPot);
            }
            if (object.jackpot != null)
                message.jackpot = Number(object.jackpot);
            if (object.pokerEvData != null) {
                if (typeof object.pokerEvData !== "object")
                    throw TypeError(".CVP.RequestDrawDebugResult.pokerEvData: object expected");
                message.pokerEvData = $root.CVP.PokerEvData.fromObject(object.pokerEvData);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestDrawDebugResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDrawDebugResult
         * @static
         * @param {CVP.RequestDrawDebugResult} message RequestDrawDebugResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDrawDebugResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pokerDataList = [];
            if (options.defaults) {
                object.balance = 0;
                object.jackpotAcc = 0;
                object.isDoubleOrNothing = false;
                object.isRewardRoulette = false;
                object.upgrade = 0;
                object.curExp = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.nextExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.nextExp = options.longs === String ? "0" : 0;
                object.levelUpReward = null;
                object.bigWin = null;
                object.isFlash = false;
                object.jackPot = null;
                object.jackpot = 0;
                object.pokerEvData = null;
            }
            if (message.balance != null && message.hasOwnProperty("balance"))
                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;
            if (message.pokerDataList && message.pokerDataList.length) {
                object.pokerDataList = [];
                for (var j = 0; j < message.pokerDataList.length; ++j)
                    object.pokerDataList[j] = $root.CVP.PokerData.toObject(message.pokerDataList[j], options);
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                object.jackpotAcc = message.jackpotAcc;
            if (message.isDoubleOrNothing != null && message.hasOwnProperty("isDoubleOrNothing"))
                object.isDoubleOrNothing = message.isDoubleOrNothing;
            if (message.isRewardRoulette != null && message.hasOwnProperty("isRewardRoulette"))
                object.isRewardRoulette = message.isRewardRoulette;
            if (message.upgrade != null && message.hasOwnProperty("upgrade"))
                object.upgrade = message.upgrade;
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                object.curExp = options.json && !isFinite(message.curExp) ? String(message.curExp) : message.curExp;
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                if (typeof message.nextExp === "number")
                    object.nextExp = options.longs === String ? String(message.nextExp) : message.nextExp;
                else
                    object.nextExp = options.longs === String ? $util.Long.prototype.toString.call(message.nextExp) : options.longs === Number ? new $util.LongBits(message.nextExp.low >>> 0, message.nextExp.high >>> 0).toNumber() : message.nextExp;
            if (message.levelUpReward != null && message.hasOwnProperty("levelUpReward"))
                object.levelUpReward = $root.CVP.LevelUpReward.toObject(message.levelUpReward, options);
            if (message.bigWin != null && message.hasOwnProperty("bigWin"))
                object.bigWin = $root.CVP.PokerData.toObject(message.bigWin, options);
            if (message.isFlash != null && message.hasOwnProperty("isFlash"))
                object.isFlash = message.isFlash;
            if (message.jackPot != null && message.hasOwnProperty("jackPot"))
                object.jackPot = $root.CVP.PokerData.toObject(message.jackPot, options);
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                object.jackpot = options.json && !isFinite(message.jackpot) ? String(message.jackpot) : message.jackpot;
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData"))
                object.pokerEvData = $root.CVP.PokerEvData.toObject(message.pokerEvData, options);
            return object;
        };

        /**
         * Converts this RequestDrawDebugResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestDrawDebugResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDrawDebugResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDrawDebugResult;
    })();

    CVP.RequestDrawResult = (function() {

        /**
         * Properties of a RequestDrawResult.
         * @memberof CVP
         * @interface IRequestDrawResult
         * @property {number|null} [balance] RequestDrawResult balance
         * @property {Array.<CVP.IPokerData>|null} [pokerDataList] RequestDrawResult pokerDataList
         * @property {number|null} [jackpotAcc] RequestDrawResult jackpotAcc
         * @property {boolean|null} [isDoubleOrNothing] RequestDrawResult isDoubleOrNothing
         * @property {boolean|null} [isRewardRoulette] RequestDrawResult isRewardRoulette
         * @property {number|null} [upgrade] RequestDrawResult upgrade
         * @property {number|null} [curExp] RequestDrawResult curExp
         * @property {number|Long|null} [nextExp] RequestDrawResult nextExp
         * @property {CVP.ILevelUpReward|null} [levelUpReward] RequestDrawResult levelUpReward
         * @property {CVP.IPokerData|null} [bigWin] RequestDrawResult bigWin
         * @property {boolean|null} [isFlash] RequestDrawResult isFlash
         * @property {CVP.IPokerData|null} [jackPot] RequestDrawResult jackPot
         * @property {number|null} [jackpot] RequestDrawResult jackpot
         * @property {CVP.IPokerEvData|null} [pokerEvData] RequestDrawResult pokerEvData
         */

        /**
         * Constructs a new RequestDrawResult.
         * @memberof CVP
         * @classdesc Represents a RequestDrawResult.
         * @implements IRequestDrawResult
         * @constructor
         * @param {CVP.IRequestDrawResult=} [properties] Properties to set
         */
        function RequestDrawResult(properties) {
            this.pokerDataList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDrawResult balance.
         * @member {number} balance
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.balance = 0;

        /**
         * RequestDrawResult pokerDataList.
         * @member {Array.<CVP.IPokerData>} pokerDataList
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.pokerDataList = $util.emptyArray;

        /**
         * RequestDrawResult jackpotAcc.
         * @member {number} jackpotAcc
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.jackpotAcc = 0;

        /**
         * RequestDrawResult isDoubleOrNothing.
         * @member {boolean} isDoubleOrNothing
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.isDoubleOrNothing = false;

        /**
         * RequestDrawResult isRewardRoulette.
         * @member {boolean} isRewardRoulette
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.isRewardRoulette = false;

        /**
         * RequestDrawResult upgrade.
         * @member {number} upgrade
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.upgrade = 0;

        /**
         * RequestDrawResult curExp.
         * @member {number} curExp
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.curExp = 0;

        /**
         * RequestDrawResult nextExp.
         * @member {number|Long} nextExp
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.nextExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RequestDrawResult levelUpReward.
         * @member {CVP.ILevelUpReward|null|undefined} levelUpReward
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.levelUpReward = null;

        /**
         * RequestDrawResult bigWin.
         * @member {CVP.IPokerData|null|undefined} bigWin
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.bigWin = null;

        /**
         * RequestDrawResult isFlash.
         * @member {boolean} isFlash
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.isFlash = false;

        /**
         * RequestDrawResult jackPot.
         * @member {CVP.IPokerData|null|undefined} jackPot
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.jackPot = null;

        /**
         * RequestDrawResult jackpot.
         * @member {number} jackpot
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.jackpot = 0;

        /**
         * RequestDrawResult pokerEvData.
         * @member {CVP.IPokerEvData|null|undefined} pokerEvData
         * @memberof CVP.RequestDrawResult
         * @instance
         */
        RequestDrawResult.prototype.pokerEvData = null;

        /**
         * Creates a new RequestDrawResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDrawResult
         * @static
         * @param {CVP.IRequestDrawResult=} [properties] Properties to set
         * @returns {CVP.RequestDrawResult} RequestDrawResult instance
         */
        RequestDrawResult.create = function create(properties) {
            return new RequestDrawResult(properties);
        };

        /**
         * Encodes the specified RequestDrawResult message. Does not implicitly {@link CVP.RequestDrawResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDrawResult
         * @static
         * @param {CVP.IRequestDrawResult} message RequestDrawResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDrawResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.balance != null && message.hasOwnProperty("balance"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.balance);
            if (message.pokerDataList != null && message.pokerDataList.length)
                for (var i = 0; i < message.pokerDataList.length; ++i)
                    $root.CVP.PokerData.encode(message.pokerDataList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.jackpotAcc);
            if (message.isDoubleOrNothing != null && message.hasOwnProperty("isDoubleOrNothing"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isDoubleOrNothing);
            if (message.isRewardRoulette != null && message.hasOwnProperty("isRewardRoulette"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isRewardRoulette);
            if (message.upgrade != null && message.hasOwnProperty("upgrade"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.upgrade);
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                writer.uint32(/* id 9, wireType 1 =*/73).double(message.curExp);
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.nextExp);
            if (message.levelUpReward != null && message.hasOwnProperty("levelUpReward"))
                $root.CVP.LevelUpReward.encode(message.levelUpReward, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.bigWin != null && message.hasOwnProperty("bigWin"))
                $root.CVP.PokerData.encode(message.bigWin, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.isFlash != null && message.hasOwnProperty("isFlash"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.isFlash);
            if (message.jackPot != null && message.hasOwnProperty("jackPot"))
                $root.CVP.PokerData.encode(message.jackPot, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                writer.uint32(/* id 15, wireType 1 =*/121).double(message.jackpot);
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData"))
                $root.CVP.PokerEvData.encode(message.pokerEvData, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestDrawResult message, length delimited. Does not implicitly {@link CVP.RequestDrawResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDrawResult
         * @static
         * @param {CVP.IRequestDrawResult} message RequestDrawResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDrawResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDrawResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDrawResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDrawResult} RequestDrawResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDrawResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDrawResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.balance = reader.double();
                    break;
                case 2:
                    if (!(message.pokerDataList && message.pokerDataList.length))
                        message.pokerDataList = [];
                    message.pokerDataList.push($root.CVP.PokerData.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.jackpotAcc = reader.int32();
                    break;
                case 6:
                    message.isDoubleOrNothing = reader.bool();
                    break;
                case 7:
                    message.isRewardRoulette = reader.bool();
                    break;
                case 8:
                    message.upgrade = reader.int32();
                    break;
                case 9:
                    message.curExp = reader.double();
                    break;
                case 10:
                    message.nextExp = reader.int64();
                    break;
                case 11:
                    message.levelUpReward = $root.CVP.LevelUpReward.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.bigWin = $root.CVP.PokerData.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.isFlash = reader.bool();
                    break;
                case 14:
                    message.jackPot = $root.CVP.PokerData.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.jackpot = reader.double();
                    break;
                case 16:
                    message.pokerEvData = $root.CVP.PokerEvData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDrawResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDrawResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDrawResult} RequestDrawResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDrawResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDrawResult message.
         * @function verify
         * @memberof CVP.RequestDrawResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDrawResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.balance != null && message.hasOwnProperty("balance"))
                if (typeof message.balance !== "number")
                    return "balance: number expected";
            if (message.pokerDataList != null && message.hasOwnProperty("pokerDataList")) {
                if (!Array.isArray(message.pokerDataList))
                    return "pokerDataList: array expected";
                for (var i = 0; i < message.pokerDataList.length; ++i) {
                    var error = $root.CVP.PokerData.verify(message.pokerDataList[i]);
                    if (error)
                        return "pokerDataList." + error;
                }
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                if (!$util.isInteger(message.jackpotAcc))
                    return "jackpotAcc: integer expected";
            if (message.isDoubleOrNothing != null && message.hasOwnProperty("isDoubleOrNothing"))
                if (typeof message.isDoubleOrNothing !== "boolean")
                    return "isDoubleOrNothing: boolean expected";
            if (message.isRewardRoulette != null && message.hasOwnProperty("isRewardRoulette"))
                if (typeof message.isRewardRoulette !== "boolean")
                    return "isRewardRoulette: boolean expected";
            if (message.upgrade != null && message.hasOwnProperty("upgrade"))
                if (!$util.isInteger(message.upgrade))
                    return "upgrade: integer expected";
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                if (typeof message.curExp !== "number")
                    return "curExp: number expected";
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                if (!$util.isInteger(message.nextExp) && !(message.nextExp && $util.isInteger(message.nextExp.low) && $util.isInteger(message.nextExp.high)))
                    return "nextExp: integer|Long expected";
            if (message.levelUpReward != null && message.hasOwnProperty("levelUpReward")) {
                var error = $root.CVP.LevelUpReward.verify(message.levelUpReward);
                if (error)
                    return "levelUpReward." + error;
            }
            if (message.bigWin != null && message.hasOwnProperty("bigWin")) {
                var error = $root.CVP.PokerData.verify(message.bigWin);
                if (error)
                    return "bigWin." + error;
            }
            if (message.isFlash != null && message.hasOwnProperty("isFlash"))
                if (typeof message.isFlash !== "boolean")
                    return "isFlash: boolean expected";
            if (message.jackPot != null && message.hasOwnProperty("jackPot")) {
                var error = $root.CVP.PokerData.verify(message.jackPot);
                if (error)
                    return "jackPot." + error;
            }
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                if (typeof message.jackpot !== "number")
                    return "jackpot: number expected";
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData")) {
                var error = $root.CVP.PokerEvData.verify(message.pokerEvData);
                if (error)
                    return "pokerEvData." + error;
            }
            return null;
        };

        /**
         * Creates a RequestDrawResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDrawResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDrawResult} RequestDrawResult
         */
        RequestDrawResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDrawResult)
                return object;
            var message = new $root.CVP.RequestDrawResult();
            if (object.balance != null)
                message.balance = Number(object.balance);
            if (object.pokerDataList) {
                if (!Array.isArray(object.pokerDataList))
                    throw TypeError(".CVP.RequestDrawResult.pokerDataList: array expected");
                message.pokerDataList = [];
                for (var i = 0; i < object.pokerDataList.length; ++i) {
                    if (typeof object.pokerDataList[i] !== "object")
                        throw TypeError(".CVP.RequestDrawResult.pokerDataList: object expected");
                    message.pokerDataList[i] = $root.CVP.PokerData.fromObject(object.pokerDataList[i]);
                }
            }
            if (object.jackpotAcc != null)
                message.jackpotAcc = object.jackpotAcc | 0;
            if (object.isDoubleOrNothing != null)
                message.isDoubleOrNothing = Boolean(object.isDoubleOrNothing);
            if (object.isRewardRoulette != null)
                message.isRewardRoulette = Boolean(object.isRewardRoulette);
            if (object.upgrade != null)
                message.upgrade = object.upgrade | 0;
            if (object.curExp != null)
                message.curExp = Number(object.curExp);
            if (object.nextExp != null)
                if ($util.Long)
                    (message.nextExp = $util.Long.fromValue(object.nextExp)).unsigned = false;
                else if (typeof object.nextExp === "string")
                    message.nextExp = parseInt(object.nextExp, 10);
                else if (typeof object.nextExp === "number")
                    message.nextExp = object.nextExp;
                else if (typeof object.nextExp === "object")
                    message.nextExp = new $util.LongBits(object.nextExp.low >>> 0, object.nextExp.high >>> 0).toNumber();
            if (object.levelUpReward != null) {
                if (typeof object.levelUpReward !== "object")
                    throw TypeError(".CVP.RequestDrawResult.levelUpReward: object expected");
                message.levelUpReward = $root.CVP.LevelUpReward.fromObject(object.levelUpReward);
            }
            if (object.bigWin != null) {
                if (typeof object.bigWin !== "object")
                    throw TypeError(".CVP.RequestDrawResult.bigWin: object expected");
                message.bigWin = $root.CVP.PokerData.fromObject(object.bigWin);
            }
            if (object.isFlash != null)
                message.isFlash = Boolean(object.isFlash);
            if (object.jackPot != null) {
                if (typeof object.jackPot !== "object")
                    throw TypeError(".CVP.RequestDrawResult.jackPot: object expected");
                message.jackPot = $root.CVP.PokerData.fromObject(object.jackPot);
            }
            if (object.jackpot != null)
                message.jackpot = Number(object.jackpot);
            if (object.pokerEvData != null) {
                if (typeof object.pokerEvData !== "object")
                    throw TypeError(".CVP.RequestDrawResult.pokerEvData: object expected");
                message.pokerEvData = $root.CVP.PokerEvData.fromObject(object.pokerEvData);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestDrawResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDrawResult
         * @static
         * @param {CVP.RequestDrawResult} message RequestDrawResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDrawResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pokerDataList = [];
            if (options.defaults) {
                object.balance = 0;
                object.jackpotAcc = 0;
                object.isDoubleOrNothing = false;
                object.isRewardRoulette = false;
                object.upgrade = 0;
                object.curExp = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.nextExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.nextExp = options.longs === String ? "0" : 0;
                object.levelUpReward = null;
                object.bigWin = null;
                object.isFlash = false;
                object.jackPot = null;
                object.jackpot = 0;
                object.pokerEvData = null;
            }
            if (message.balance != null && message.hasOwnProperty("balance"))
                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;
            if (message.pokerDataList && message.pokerDataList.length) {
                object.pokerDataList = [];
                for (var j = 0; j < message.pokerDataList.length; ++j)
                    object.pokerDataList[j] = $root.CVP.PokerData.toObject(message.pokerDataList[j], options);
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                object.jackpotAcc = message.jackpotAcc;
            if (message.isDoubleOrNothing != null && message.hasOwnProperty("isDoubleOrNothing"))
                object.isDoubleOrNothing = message.isDoubleOrNothing;
            if (message.isRewardRoulette != null && message.hasOwnProperty("isRewardRoulette"))
                object.isRewardRoulette = message.isRewardRoulette;
            if (message.upgrade != null && message.hasOwnProperty("upgrade"))
                object.upgrade = message.upgrade;
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                object.curExp = options.json && !isFinite(message.curExp) ? String(message.curExp) : message.curExp;
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                if (typeof message.nextExp === "number")
                    object.nextExp = options.longs === String ? String(message.nextExp) : message.nextExp;
                else
                    object.nextExp = options.longs === String ? $util.Long.prototype.toString.call(message.nextExp) : options.longs === Number ? new $util.LongBits(message.nextExp.low >>> 0, message.nextExp.high >>> 0).toNumber() : message.nextExp;
            if (message.levelUpReward != null && message.hasOwnProperty("levelUpReward"))
                object.levelUpReward = $root.CVP.LevelUpReward.toObject(message.levelUpReward, options);
            if (message.bigWin != null && message.hasOwnProperty("bigWin"))
                object.bigWin = $root.CVP.PokerData.toObject(message.bigWin, options);
            if (message.isFlash != null && message.hasOwnProperty("isFlash"))
                object.isFlash = message.isFlash;
            if (message.jackPot != null && message.hasOwnProperty("jackPot"))
                object.jackPot = $root.CVP.PokerData.toObject(message.jackPot, options);
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                object.jackpot = options.json && !isFinite(message.jackpot) ? String(message.jackpot) : message.jackpot;
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData"))
                object.pokerEvData = $root.CVP.PokerEvData.toObject(message.pokerEvData, options);
            return object;
        };

        /**
         * Converts this RequestDrawResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestDrawResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDrawResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDrawResult;
    })();

    CVP.PokerData = (function() {

        /**
         * Properties of a PokerData.
         * @memberof CVP
         * @interface IPokerData
         * @property {number|null} [win] PokerData win
         * @property {string|null} [winTypeName] PokerData winTypeName
         * @property {Array.<string>|null} [pokerList] PokerData pokerList
         */

        /**
         * Constructs a new PokerData.
         * @memberof CVP
         * @classdesc Represents a PokerData.
         * @implements IPokerData
         * @constructor
         * @param {CVP.IPokerData=} [properties] Properties to set
         */
        function PokerData(properties) {
            this.pokerList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PokerData win.
         * @member {number} win
         * @memberof CVP.PokerData
         * @instance
         */
        PokerData.prototype.win = 0;

        /**
         * PokerData winTypeName.
         * @member {string} winTypeName
         * @memberof CVP.PokerData
         * @instance
         */
        PokerData.prototype.winTypeName = "";

        /**
         * PokerData pokerList.
         * @member {Array.<string>} pokerList
         * @memberof CVP.PokerData
         * @instance
         */
        PokerData.prototype.pokerList = $util.emptyArray;

        /**
         * Creates a new PokerData instance using the specified properties.
         * @function create
         * @memberof CVP.PokerData
         * @static
         * @param {CVP.IPokerData=} [properties] Properties to set
         * @returns {CVP.PokerData} PokerData instance
         */
        PokerData.create = function create(properties) {
            return new PokerData(properties);
        };

        /**
         * Encodes the specified PokerData message. Does not implicitly {@link CVP.PokerData.verify|verify} messages.
         * @function encode
         * @memberof CVP.PokerData
         * @static
         * @param {CVP.IPokerData} message PokerData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PokerData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.win != null && message.hasOwnProperty("win"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.win);
            if (message.winTypeName != null && message.hasOwnProperty("winTypeName"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.winTypeName);
            if (message.pokerList != null && message.pokerList.length)
                for (var i = 0; i < message.pokerList.length; ++i)
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.pokerList[i]);
            return writer;
        };

        /**
         * Encodes the specified PokerData message, length delimited. Does not implicitly {@link CVP.PokerData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.PokerData
         * @static
         * @param {CVP.IPokerData} message PokerData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PokerData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PokerData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.PokerData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.PokerData} PokerData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PokerData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.PokerData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.win = reader.double();
                    break;
                case 3:
                    message.winTypeName = reader.string();
                    break;
                case 4:
                    if (!(message.pokerList && message.pokerList.length))
                        message.pokerList = [];
                    message.pokerList.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PokerData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.PokerData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.PokerData} PokerData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PokerData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PokerData message.
         * @function verify
         * @memberof CVP.PokerData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PokerData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.win != null && message.hasOwnProperty("win"))
                if (typeof message.win !== "number")
                    return "win: number expected";
            if (message.winTypeName != null && message.hasOwnProperty("winTypeName"))
                if (!$util.isString(message.winTypeName))
                    return "winTypeName: string expected";
            if (message.pokerList != null && message.hasOwnProperty("pokerList")) {
                if (!Array.isArray(message.pokerList))
                    return "pokerList: array expected";
                for (var i = 0; i < message.pokerList.length; ++i)
                    if (!$util.isString(message.pokerList[i]))
                        return "pokerList: string[] expected";
            }
            return null;
        };

        /**
         * Creates a PokerData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.PokerData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.PokerData} PokerData
         */
        PokerData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.PokerData)
                return object;
            var message = new $root.CVP.PokerData();
            if (object.win != null)
                message.win = Number(object.win);
            if (object.winTypeName != null)
                message.winTypeName = String(object.winTypeName);
            if (object.pokerList) {
                if (!Array.isArray(object.pokerList))
                    throw TypeError(".CVP.PokerData.pokerList: array expected");
                message.pokerList = [];
                for (var i = 0; i < object.pokerList.length; ++i)
                    message.pokerList[i] = String(object.pokerList[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a PokerData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.PokerData
         * @static
         * @param {CVP.PokerData} message PokerData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PokerData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pokerList = [];
            if (options.defaults) {
                object.win = 0;
                object.winTypeName = "";
            }
            if (message.win != null && message.hasOwnProperty("win"))
                object.win = options.json && !isFinite(message.win) ? String(message.win) : message.win;
            if (message.winTypeName != null && message.hasOwnProperty("winTypeName"))
                object.winTypeName = message.winTypeName;
            if (message.pokerList && message.pokerList.length) {
                object.pokerList = [];
                for (var j = 0; j < message.pokerList.length; ++j)
                    object.pokerList[j] = message.pokerList[j];
            }
            return object;
        };

        /**
         * Converts this PokerData to JSON.
         * @function toJSON
         * @memberof CVP.PokerData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PokerData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PokerData;
    })();

    CVP.RequestVPDoubleSpin = (function() {

        /**
         * Properties of a RequestVPDoubleSpin.
         * @memberof CVP
         * @interface IRequestVPDoubleSpin
         * @property {number|null} [type] RequestVPDoubleSpin type
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestVPDoubleSpin commonParams
         */

        /**
         * Constructs a new RequestVPDoubleSpin.
         * @memberof CVP
         * @classdesc Represents a RequestVPDoubleSpin.
         * @implements IRequestVPDoubleSpin
         * @constructor
         * @param {CVP.IRequestVPDoubleSpin=} [properties] Properties to set
         */
        function RequestVPDoubleSpin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestVPDoubleSpin type.
         * @member {number} type
         * @memberof CVP.RequestVPDoubleSpin
         * @instance
         */
        RequestVPDoubleSpin.prototype.type = 0;

        /**
         * RequestVPDoubleSpin commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestVPDoubleSpin
         * @instance
         */
        RequestVPDoubleSpin.prototype.commonParams = null;

        /**
         * Creates a new RequestVPDoubleSpin instance using the specified properties.
         * @function create
         * @memberof CVP.RequestVPDoubleSpin
         * @static
         * @param {CVP.IRequestVPDoubleSpin=} [properties] Properties to set
         * @returns {CVP.RequestVPDoubleSpin} RequestVPDoubleSpin instance
         */
        RequestVPDoubleSpin.create = function create(properties) {
            return new RequestVPDoubleSpin(properties);
        };

        /**
         * Encodes the specified RequestVPDoubleSpin message. Does not implicitly {@link CVP.RequestVPDoubleSpin.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestVPDoubleSpin
         * @static
         * @param {CVP.IRequestVPDoubleSpin} message RequestVPDoubleSpin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVPDoubleSpin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestVPDoubleSpin message, length delimited. Does not implicitly {@link CVP.RequestVPDoubleSpin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestVPDoubleSpin
         * @static
         * @param {CVP.IRequestVPDoubleSpin} message RequestVPDoubleSpin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVPDoubleSpin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestVPDoubleSpin message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestVPDoubleSpin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestVPDoubleSpin} RequestVPDoubleSpin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVPDoubleSpin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestVPDoubleSpin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestVPDoubleSpin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestVPDoubleSpin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestVPDoubleSpin} RequestVPDoubleSpin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVPDoubleSpin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestVPDoubleSpin message.
         * @function verify
         * @memberof CVP.RequestVPDoubleSpin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestVPDoubleSpin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestVPDoubleSpin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestVPDoubleSpin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestVPDoubleSpin} RequestVPDoubleSpin
         */
        RequestVPDoubleSpin.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestVPDoubleSpin)
                return object;
            var message = new $root.CVP.RequestVPDoubleSpin();
            if (object.type != null)
                message.type = object.type | 0;
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestVPDoubleSpin.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestVPDoubleSpin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestVPDoubleSpin
         * @static
         * @param {CVP.RequestVPDoubleSpin} message RequestVPDoubleSpin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestVPDoubleSpin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.type = 0;
                object.commonParams = null;
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestVPDoubleSpin to JSON.
         * @function toJSON
         * @memberof CVP.RequestVPDoubleSpin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestVPDoubleSpin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestVPDoubleSpin;
    })();

    CVP.RequestVPDoubleSpinResult = (function() {

        /**
         * Properties of a RequestVPDoubleSpinResult.
         * @memberof CVP
         * @interface IRequestVPDoubleSpinResult
         * @property {number|null} [balance] RequestVPDoubleSpinResult balance
         * @property {number|null} [reward] RequestVPDoubleSpinResult reward
         * @property {string|null} [poker] RequestVPDoubleSpinResult poker
         * @property {CVP.IItemInfo|null} [doubleGameItem] RequestVPDoubleSpinResult doubleGameItem
         */

        /**
         * Constructs a new RequestVPDoubleSpinResult.
         * @memberof CVP
         * @classdesc Represents a RequestVPDoubleSpinResult.
         * @implements IRequestVPDoubleSpinResult
         * @constructor
         * @param {CVP.IRequestVPDoubleSpinResult=} [properties] Properties to set
         */
        function RequestVPDoubleSpinResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestVPDoubleSpinResult balance.
         * @member {number} balance
         * @memberof CVP.RequestVPDoubleSpinResult
         * @instance
         */
        RequestVPDoubleSpinResult.prototype.balance = 0;

        /**
         * RequestVPDoubleSpinResult reward.
         * @member {number} reward
         * @memberof CVP.RequestVPDoubleSpinResult
         * @instance
         */
        RequestVPDoubleSpinResult.prototype.reward = 0;

        /**
         * RequestVPDoubleSpinResult poker.
         * @member {string} poker
         * @memberof CVP.RequestVPDoubleSpinResult
         * @instance
         */
        RequestVPDoubleSpinResult.prototype.poker = "";

        /**
         * RequestVPDoubleSpinResult doubleGameItem.
         * @member {CVP.IItemInfo|null|undefined} doubleGameItem
         * @memberof CVP.RequestVPDoubleSpinResult
         * @instance
         */
        RequestVPDoubleSpinResult.prototype.doubleGameItem = null;

        /**
         * Creates a new RequestVPDoubleSpinResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestVPDoubleSpinResult
         * @static
         * @param {CVP.IRequestVPDoubleSpinResult=} [properties] Properties to set
         * @returns {CVP.RequestVPDoubleSpinResult} RequestVPDoubleSpinResult instance
         */
        RequestVPDoubleSpinResult.create = function create(properties) {
            return new RequestVPDoubleSpinResult(properties);
        };

        /**
         * Encodes the specified RequestVPDoubleSpinResult message. Does not implicitly {@link CVP.RequestVPDoubleSpinResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestVPDoubleSpinResult
         * @static
         * @param {CVP.IRequestVPDoubleSpinResult} message RequestVPDoubleSpinResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVPDoubleSpinResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.balance != null && message.hasOwnProperty("balance"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.balance);
            if (message.reward != null && message.hasOwnProperty("reward"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.reward);
            if (message.poker != null && message.hasOwnProperty("poker"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.poker);
            if (message.doubleGameItem != null && message.hasOwnProperty("doubleGameItem"))
                $root.CVP.ItemInfo.encode(message.doubleGameItem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestVPDoubleSpinResult message, length delimited. Does not implicitly {@link CVP.RequestVPDoubleSpinResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestVPDoubleSpinResult
         * @static
         * @param {CVP.IRequestVPDoubleSpinResult} message RequestVPDoubleSpinResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVPDoubleSpinResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestVPDoubleSpinResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestVPDoubleSpinResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestVPDoubleSpinResult} RequestVPDoubleSpinResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVPDoubleSpinResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestVPDoubleSpinResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.balance = reader.double();
                    break;
                case 2:
                    message.reward = reader.double();
                    break;
                case 3:
                    message.poker = reader.string();
                    break;
                case 4:
                    message.doubleGameItem = $root.CVP.ItemInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestVPDoubleSpinResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestVPDoubleSpinResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestVPDoubleSpinResult} RequestVPDoubleSpinResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVPDoubleSpinResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestVPDoubleSpinResult message.
         * @function verify
         * @memberof CVP.RequestVPDoubleSpinResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestVPDoubleSpinResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.balance != null && message.hasOwnProperty("balance"))
                if (typeof message.balance !== "number")
                    return "balance: number expected";
            if (message.reward != null && message.hasOwnProperty("reward"))
                if (typeof message.reward !== "number")
                    return "reward: number expected";
            if (message.poker != null && message.hasOwnProperty("poker"))
                if (!$util.isString(message.poker))
                    return "poker: string expected";
            if (message.doubleGameItem != null && message.hasOwnProperty("doubleGameItem")) {
                var error = $root.CVP.ItemInfo.verify(message.doubleGameItem);
                if (error)
                    return "doubleGameItem." + error;
            }
            return null;
        };

        /**
         * Creates a RequestVPDoubleSpinResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestVPDoubleSpinResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestVPDoubleSpinResult} RequestVPDoubleSpinResult
         */
        RequestVPDoubleSpinResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestVPDoubleSpinResult)
                return object;
            var message = new $root.CVP.RequestVPDoubleSpinResult();
            if (object.balance != null)
                message.balance = Number(object.balance);
            if (object.reward != null)
                message.reward = Number(object.reward);
            if (object.poker != null)
                message.poker = String(object.poker);
            if (object.doubleGameItem != null) {
                if (typeof object.doubleGameItem !== "object")
                    throw TypeError(".CVP.RequestVPDoubleSpinResult.doubleGameItem: object expected");
                message.doubleGameItem = $root.CVP.ItemInfo.fromObject(object.doubleGameItem);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestVPDoubleSpinResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestVPDoubleSpinResult
         * @static
         * @param {CVP.RequestVPDoubleSpinResult} message RequestVPDoubleSpinResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestVPDoubleSpinResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.balance = 0;
                object.reward = 0;
                object.poker = "";
                object.doubleGameItem = null;
            }
            if (message.balance != null && message.hasOwnProperty("balance"))
                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;
            if (message.reward != null && message.hasOwnProperty("reward"))
                object.reward = options.json && !isFinite(message.reward) ? String(message.reward) : message.reward;
            if (message.poker != null && message.hasOwnProperty("poker"))
                object.poker = message.poker;
            if (message.doubleGameItem != null && message.hasOwnProperty("doubleGameItem"))
                object.doubleGameItem = $root.CVP.ItemInfo.toObject(message.doubleGameItem, options);
            return object;
        };

        /**
         * Converts this RequestVPDoubleSpinResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestVPDoubleSpinResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestVPDoubleSpinResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestVPDoubleSpinResult;
    })();

    CVP.RequestSendBuyDoubleGamePayment = (function() {

        /**
         * Properties of a RequestSendBuyDoubleGamePayment.
         * @memberof CVP
         * @interface IRequestSendBuyDoubleGamePayment
         * @property {boolean|null} [isBuy] RequestSendBuyDoubleGamePayment isBuy
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestSendBuyDoubleGamePayment commonParams
         */

        /**
         * Constructs a new RequestSendBuyDoubleGamePayment.
         * @memberof CVP
         * @classdesc Represents a RequestSendBuyDoubleGamePayment.
         * @implements IRequestSendBuyDoubleGamePayment
         * @constructor
         * @param {CVP.IRequestSendBuyDoubleGamePayment=} [properties] Properties to set
         */
        function RequestSendBuyDoubleGamePayment(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSendBuyDoubleGamePayment isBuy.
         * @member {boolean} isBuy
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @instance
         */
        RequestSendBuyDoubleGamePayment.prototype.isBuy = false;

        /**
         * RequestSendBuyDoubleGamePayment commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @instance
         */
        RequestSendBuyDoubleGamePayment.prototype.commonParams = null;

        /**
         * Creates a new RequestSendBuyDoubleGamePayment instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @static
         * @param {CVP.IRequestSendBuyDoubleGamePayment=} [properties] Properties to set
         * @returns {CVP.RequestSendBuyDoubleGamePayment} RequestSendBuyDoubleGamePayment instance
         */
        RequestSendBuyDoubleGamePayment.create = function create(properties) {
            return new RequestSendBuyDoubleGamePayment(properties);
        };

        /**
         * Encodes the specified RequestSendBuyDoubleGamePayment message. Does not implicitly {@link CVP.RequestSendBuyDoubleGamePayment.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @static
         * @param {CVP.IRequestSendBuyDoubleGamePayment} message RequestSendBuyDoubleGamePayment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSendBuyDoubleGamePayment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.isBuy != null && message.hasOwnProperty("isBuy"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isBuy);
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestSendBuyDoubleGamePayment message, length delimited. Does not implicitly {@link CVP.RequestSendBuyDoubleGamePayment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @static
         * @param {CVP.IRequestSendBuyDoubleGamePayment} message RequestSendBuyDoubleGamePayment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSendBuyDoubleGamePayment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSendBuyDoubleGamePayment message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSendBuyDoubleGamePayment} RequestSendBuyDoubleGamePayment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSendBuyDoubleGamePayment.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSendBuyDoubleGamePayment();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.isBuy = reader.bool();
                    break;
                case 2:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSendBuyDoubleGamePayment message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSendBuyDoubleGamePayment} RequestSendBuyDoubleGamePayment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSendBuyDoubleGamePayment.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSendBuyDoubleGamePayment message.
         * @function verify
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSendBuyDoubleGamePayment.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.isBuy != null && message.hasOwnProperty("isBuy"))
                if (typeof message.isBuy !== "boolean")
                    return "isBuy: boolean expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestSendBuyDoubleGamePayment message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSendBuyDoubleGamePayment} RequestSendBuyDoubleGamePayment
         */
        RequestSendBuyDoubleGamePayment.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSendBuyDoubleGamePayment)
                return object;
            var message = new $root.CVP.RequestSendBuyDoubleGamePayment();
            if (object.isBuy != null)
                message.isBuy = Boolean(object.isBuy);
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestSendBuyDoubleGamePayment.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestSendBuyDoubleGamePayment message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @static
         * @param {CVP.RequestSendBuyDoubleGamePayment} message RequestSendBuyDoubleGamePayment
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSendBuyDoubleGamePayment.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.isBuy = false;
                object.commonParams = null;
            }
            if (message.isBuy != null && message.hasOwnProperty("isBuy"))
                object.isBuy = message.isBuy;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestSendBuyDoubleGamePayment to JSON.
         * @function toJSON
         * @memberof CVP.RequestSendBuyDoubleGamePayment
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSendBuyDoubleGamePayment.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSendBuyDoubleGamePayment;
    })();

    CVP.RequestSendBuyDoubleGamePaymentResult = (function() {

        /**
         * Properties of a RequestSendBuyDoubleGamePaymentResult.
         * @memberof CVP
         * @interface IRequestSendBuyDoubleGamePaymentResult
         * @property {number|null} [lastCoin] RequestSendBuyDoubleGamePaymentResult lastCoin
         */

        /**
         * Constructs a new RequestSendBuyDoubleGamePaymentResult.
         * @memberof CVP
         * @classdesc Represents a RequestSendBuyDoubleGamePaymentResult.
         * @implements IRequestSendBuyDoubleGamePaymentResult
         * @constructor
         * @param {CVP.IRequestSendBuyDoubleGamePaymentResult=} [properties] Properties to set
         */
        function RequestSendBuyDoubleGamePaymentResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSendBuyDoubleGamePaymentResult lastCoin.
         * @member {number} lastCoin
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @instance
         */
        RequestSendBuyDoubleGamePaymentResult.prototype.lastCoin = 0;

        /**
         * Creates a new RequestSendBuyDoubleGamePaymentResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @static
         * @param {CVP.IRequestSendBuyDoubleGamePaymentResult=} [properties] Properties to set
         * @returns {CVP.RequestSendBuyDoubleGamePaymentResult} RequestSendBuyDoubleGamePaymentResult instance
         */
        RequestSendBuyDoubleGamePaymentResult.create = function create(properties) {
            return new RequestSendBuyDoubleGamePaymentResult(properties);
        };

        /**
         * Encodes the specified RequestSendBuyDoubleGamePaymentResult message. Does not implicitly {@link CVP.RequestSendBuyDoubleGamePaymentResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @static
         * @param {CVP.IRequestSendBuyDoubleGamePaymentResult} message RequestSendBuyDoubleGamePaymentResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSendBuyDoubleGamePaymentResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.lastCoin != null && message.hasOwnProperty("lastCoin"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.lastCoin);
            return writer;
        };

        /**
         * Encodes the specified RequestSendBuyDoubleGamePaymentResult message, length delimited. Does not implicitly {@link CVP.RequestSendBuyDoubleGamePaymentResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @static
         * @param {CVP.IRequestSendBuyDoubleGamePaymentResult} message RequestSendBuyDoubleGamePaymentResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSendBuyDoubleGamePaymentResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSendBuyDoubleGamePaymentResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSendBuyDoubleGamePaymentResult} RequestSendBuyDoubleGamePaymentResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSendBuyDoubleGamePaymentResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSendBuyDoubleGamePaymentResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.lastCoin = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSendBuyDoubleGamePaymentResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSendBuyDoubleGamePaymentResult} RequestSendBuyDoubleGamePaymentResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSendBuyDoubleGamePaymentResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSendBuyDoubleGamePaymentResult message.
         * @function verify
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSendBuyDoubleGamePaymentResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.lastCoin != null && message.hasOwnProperty("lastCoin"))
                if (typeof message.lastCoin !== "number")
                    return "lastCoin: number expected";
            return null;
        };

        /**
         * Creates a RequestSendBuyDoubleGamePaymentResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSendBuyDoubleGamePaymentResult} RequestSendBuyDoubleGamePaymentResult
         */
        RequestSendBuyDoubleGamePaymentResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSendBuyDoubleGamePaymentResult)
                return object;
            var message = new $root.CVP.RequestSendBuyDoubleGamePaymentResult();
            if (object.lastCoin != null)
                message.lastCoin = Number(object.lastCoin);
            return message;
        };

        /**
         * Creates a plain object from a RequestSendBuyDoubleGamePaymentResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @static
         * @param {CVP.RequestSendBuyDoubleGamePaymentResult} message RequestSendBuyDoubleGamePaymentResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSendBuyDoubleGamePaymentResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.lastCoin = 0;
            if (message.lastCoin != null && message.hasOwnProperty("lastCoin"))
                object.lastCoin = options.json && !isFinite(message.lastCoin) ? String(message.lastCoin) : message.lastCoin;
            return object;
        };

        /**
         * Converts this RequestSendBuyDoubleGamePaymentResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestSendBuyDoubleGamePaymentResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSendBuyDoubleGamePaymentResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSendBuyDoubleGamePaymentResult;
    })();

    CVP.LevelUpReward = (function() {

        /**
         * Properties of a LevelUpReward.
         * @memberof CVP
         * @interface ILevelUpReward
         * @property {number|null} [coins] LevelUpReward coins
         * @property {number|null} [vipExp] LevelUpReward vipExp
         * @property {Array.<number>|null} [creditAmount] LevelUpReward creditAmount
         * @property {number|null} [pushAmount] LevelUpReward pushAmount
         * @property {number|null} [creditAmountMax] LevelUpReward creditAmountMax
         */

        /**
         * Constructs a new LevelUpReward.
         * @memberof CVP
         * @classdesc Represents a LevelUpReward.
         * @implements ILevelUpReward
         * @constructor
         * @param {CVP.ILevelUpReward=} [properties] Properties to set
         */
        function LevelUpReward(properties) {
            this.creditAmount = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LevelUpReward coins.
         * @member {number} coins
         * @memberof CVP.LevelUpReward
         * @instance
         */
        LevelUpReward.prototype.coins = 0;

        /**
         * LevelUpReward vipExp.
         * @member {number} vipExp
         * @memberof CVP.LevelUpReward
         * @instance
         */
        LevelUpReward.prototype.vipExp = 0;

        /**
         * LevelUpReward creditAmount.
         * @member {Array.<number>} creditAmount
         * @memberof CVP.LevelUpReward
         * @instance
         */
        LevelUpReward.prototype.creditAmount = $util.emptyArray;

        /**
         * LevelUpReward pushAmount.
         * @member {number} pushAmount
         * @memberof CVP.LevelUpReward
         * @instance
         */
        LevelUpReward.prototype.pushAmount = 0;

        /**
         * LevelUpReward creditAmountMax.
         * @member {number} creditAmountMax
         * @memberof CVP.LevelUpReward
         * @instance
         */
        LevelUpReward.prototype.creditAmountMax = 0;

        /**
         * Creates a new LevelUpReward instance using the specified properties.
         * @function create
         * @memberof CVP.LevelUpReward
         * @static
         * @param {CVP.ILevelUpReward=} [properties] Properties to set
         * @returns {CVP.LevelUpReward} LevelUpReward instance
         */
        LevelUpReward.create = function create(properties) {
            return new LevelUpReward(properties);
        };

        /**
         * Encodes the specified LevelUpReward message. Does not implicitly {@link CVP.LevelUpReward.verify|verify} messages.
         * @function encode
         * @memberof CVP.LevelUpReward
         * @static
         * @param {CVP.ILevelUpReward} message LevelUpReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelUpReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.vipExp);
            if (message.creditAmount != null && message.creditAmount.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.creditAmount.length; ++i)
                    writer.double(message.creditAmount[i]);
                writer.ldelim();
            }
            if (message.pushAmount != null && message.hasOwnProperty("pushAmount"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pushAmount);
            if (message.creditAmountMax != null && message.hasOwnProperty("creditAmountMax"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.creditAmountMax);
            return writer;
        };

        /**
         * Encodes the specified LevelUpReward message, length delimited. Does not implicitly {@link CVP.LevelUpReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.LevelUpReward
         * @static
         * @param {CVP.ILevelUpReward} message LevelUpReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelUpReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LevelUpReward message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.LevelUpReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.LevelUpReward} LevelUpReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelUpReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.LevelUpReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                case 2:
                    message.vipExp = reader.int32();
                    break;
                case 3:
                    if (!(message.creditAmount && message.creditAmount.length))
                        message.creditAmount = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.creditAmount.push(reader.double());
                    } else
                        message.creditAmount.push(reader.double());
                    break;
                case 4:
                    message.pushAmount = reader.int32();
                    break;
                case 5:
                    message.creditAmountMax = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LevelUpReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.LevelUpReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.LevelUpReward} LevelUpReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelUpReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LevelUpReward message.
         * @function verify
         * @memberof CVP.LevelUpReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LevelUpReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                if (!$util.isInteger(message.vipExp))
                    return "vipExp: integer expected";
            if (message.creditAmount != null && message.hasOwnProperty("creditAmount")) {
                if (!Array.isArray(message.creditAmount))
                    return "creditAmount: array expected";
                for (var i = 0; i < message.creditAmount.length; ++i)
                    if (typeof message.creditAmount[i] !== "number")
                        return "creditAmount: number[] expected";
            }
            if (message.pushAmount != null && message.hasOwnProperty("pushAmount"))
                if (!$util.isInteger(message.pushAmount))
                    return "pushAmount: integer expected";
            if (message.creditAmountMax != null && message.hasOwnProperty("creditAmountMax"))
                if (typeof message.creditAmountMax !== "number")
                    return "creditAmountMax: number expected";
            return null;
        };

        /**
         * Creates a LevelUpReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.LevelUpReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.LevelUpReward} LevelUpReward
         */
        LevelUpReward.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.LevelUpReward)
                return object;
            var message = new $root.CVP.LevelUpReward();
            if (object.coins != null)
                message.coins = Number(object.coins);
            if (object.vipExp != null)
                message.vipExp = object.vipExp | 0;
            if (object.creditAmount) {
                if (!Array.isArray(object.creditAmount))
                    throw TypeError(".CVP.LevelUpReward.creditAmount: array expected");
                message.creditAmount = [];
                for (var i = 0; i < object.creditAmount.length; ++i)
                    message.creditAmount[i] = Number(object.creditAmount[i]);
            }
            if (object.pushAmount != null)
                message.pushAmount = object.pushAmount | 0;
            if (object.creditAmountMax != null)
                message.creditAmountMax = Number(object.creditAmountMax);
            return message;
        };

        /**
         * Creates a plain object from a LevelUpReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.LevelUpReward
         * @static
         * @param {CVP.LevelUpReward} message LevelUpReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LevelUpReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.creditAmount = [];
            if (options.defaults) {
                object.coins = 0;
                object.vipExp = 0;
                object.pushAmount = 0;
                object.creditAmountMax = 0;
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            if (message.vipExp != null && message.hasOwnProperty("vipExp"))
                object.vipExp = message.vipExp;
            if (message.creditAmount && message.creditAmount.length) {
                object.creditAmount = [];
                for (var j = 0; j < message.creditAmount.length; ++j)
                    object.creditAmount[j] = options.json && !isFinite(message.creditAmount[j]) ? String(message.creditAmount[j]) : message.creditAmount[j];
            }
            if (message.pushAmount != null && message.hasOwnProperty("pushAmount"))
                object.pushAmount = message.pushAmount;
            if (message.creditAmountMax != null && message.hasOwnProperty("creditAmountMax"))
                object.creditAmountMax = options.json && !isFinite(message.creditAmountMax) ? String(message.creditAmountMax) : message.creditAmountMax;
            return object;
        };

        /**
         * Converts this LevelUpReward to JSON.
         * @function toJSON
         * @memberof CVP.LevelUpReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LevelUpReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LevelUpReward;
    })();

    CVP.PokerEvData = (function() {

        /**
         * Properties of a PokerEvData.
         * @memberof CVP
         * @interface IPokerEvData
         * @property {Array.<string>|null} [pokerList] PokerEvData pokerList
         * @property {Array.<CVP.IPokerEv>|null} [pokerEvList] PokerEvData pokerEvList
         */

        /**
         * Constructs a new PokerEvData.
         * @memberof CVP
         * @classdesc Represents a PokerEvData.
         * @implements IPokerEvData
         * @constructor
         * @param {CVP.IPokerEvData=} [properties] Properties to set
         */
        function PokerEvData(properties) {
            this.pokerList = [];
            this.pokerEvList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PokerEvData pokerList.
         * @member {Array.<string>} pokerList
         * @memberof CVP.PokerEvData
         * @instance
         */
        PokerEvData.prototype.pokerList = $util.emptyArray;

        /**
         * PokerEvData pokerEvList.
         * @member {Array.<CVP.IPokerEv>} pokerEvList
         * @memberof CVP.PokerEvData
         * @instance
         */
        PokerEvData.prototype.pokerEvList = $util.emptyArray;

        /**
         * Creates a new PokerEvData instance using the specified properties.
         * @function create
         * @memberof CVP.PokerEvData
         * @static
         * @param {CVP.IPokerEvData=} [properties] Properties to set
         * @returns {CVP.PokerEvData} PokerEvData instance
         */
        PokerEvData.create = function create(properties) {
            return new PokerEvData(properties);
        };

        /**
         * Encodes the specified PokerEvData message. Does not implicitly {@link CVP.PokerEvData.verify|verify} messages.
         * @function encode
         * @memberof CVP.PokerEvData
         * @static
         * @param {CVP.IPokerEvData} message PokerEvData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PokerEvData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pokerList != null && message.pokerList.length)
                for (var i = 0; i < message.pokerList.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.pokerList[i]);
            if (message.pokerEvList != null && message.pokerEvList.length)
                for (var i = 0; i < message.pokerEvList.length; ++i)
                    $root.CVP.PokerEv.encode(message.pokerEvList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PokerEvData message, length delimited. Does not implicitly {@link CVP.PokerEvData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.PokerEvData
         * @static
         * @param {CVP.IPokerEvData} message PokerEvData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PokerEvData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PokerEvData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.PokerEvData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.PokerEvData} PokerEvData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PokerEvData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.PokerEvData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.pokerList && message.pokerList.length))
                        message.pokerList = [];
                    message.pokerList.push(reader.string());
                    break;
                case 2:
                    if (!(message.pokerEvList && message.pokerEvList.length))
                        message.pokerEvList = [];
                    message.pokerEvList.push($root.CVP.PokerEv.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PokerEvData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.PokerEvData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.PokerEvData} PokerEvData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PokerEvData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PokerEvData message.
         * @function verify
         * @memberof CVP.PokerEvData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PokerEvData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pokerList != null && message.hasOwnProperty("pokerList")) {
                if (!Array.isArray(message.pokerList))
                    return "pokerList: array expected";
                for (var i = 0; i < message.pokerList.length; ++i)
                    if (!$util.isString(message.pokerList[i]))
                        return "pokerList: string[] expected";
            }
            if (message.pokerEvList != null && message.hasOwnProperty("pokerEvList")) {
                if (!Array.isArray(message.pokerEvList))
                    return "pokerEvList: array expected";
                for (var i = 0; i < message.pokerEvList.length; ++i) {
                    var error = $root.CVP.PokerEv.verify(message.pokerEvList[i]);
                    if (error)
                        return "pokerEvList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a PokerEvData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.PokerEvData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.PokerEvData} PokerEvData
         */
        PokerEvData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.PokerEvData)
                return object;
            var message = new $root.CVP.PokerEvData();
            if (object.pokerList) {
                if (!Array.isArray(object.pokerList))
                    throw TypeError(".CVP.PokerEvData.pokerList: array expected");
                message.pokerList = [];
                for (var i = 0; i < object.pokerList.length; ++i)
                    message.pokerList[i] = String(object.pokerList[i]);
            }
            if (object.pokerEvList) {
                if (!Array.isArray(object.pokerEvList))
                    throw TypeError(".CVP.PokerEvData.pokerEvList: array expected");
                message.pokerEvList = [];
                for (var i = 0; i < object.pokerEvList.length; ++i) {
                    if (typeof object.pokerEvList[i] !== "object")
                        throw TypeError(".CVP.PokerEvData.pokerEvList: object expected");
                    message.pokerEvList[i] = $root.CVP.PokerEv.fromObject(object.pokerEvList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a PokerEvData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.PokerEvData
         * @static
         * @param {CVP.PokerEvData} message PokerEvData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PokerEvData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.pokerList = [];
                object.pokerEvList = [];
            }
            if (message.pokerList && message.pokerList.length) {
                object.pokerList = [];
                for (var j = 0; j < message.pokerList.length; ++j)
                    object.pokerList[j] = message.pokerList[j];
            }
            if (message.pokerEvList && message.pokerEvList.length) {
                object.pokerEvList = [];
                for (var j = 0; j < message.pokerEvList.length; ++j)
                    object.pokerEvList[j] = $root.CVP.PokerEv.toObject(message.pokerEvList[j], options);
            }
            return object;
        };

        /**
         * Converts this PokerEvData to JSON.
         * @function toJSON
         * @memberof CVP.PokerEvData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PokerEvData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PokerEvData;
    })();

    CVP.PokerEv = (function() {

        /**
         * Properties of a PokerEv.
         * @memberof CVP
         * @interface IPokerEv
         * @property {Array.<string>|null} [holdPokerList] PokerEv holdPokerList
         * @property {Array.<CVP.IPokerTypeData>|null} [pokerTypeDataList] PokerEv pokerTypeDataList
         * @property {number|null} [allNum] PokerEv allNum
         */

        /**
         * Constructs a new PokerEv.
         * @memberof CVP
         * @classdesc Represents a PokerEv.
         * @implements IPokerEv
         * @constructor
         * @param {CVP.IPokerEv=} [properties] Properties to set
         */
        function PokerEv(properties) {
            this.holdPokerList = [];
            this.pokerTypeDataList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PokerEv holdPokerList.
         * @member {Array.<string>} holdPokerList
         * @memberof CVP.PokerEv
         * @instance
         */
        PokerEv.prototype.holdPokerList = $util.emptyArray;

        /**
         * PokerEv pokerTypeDataList.
         * @member {Array.<CVP.IPokerTypeData>} pokerTypeDataList
         * @memberof CVP.PokerEv
         * @instance
         */
        PokerEv.prototype.pokerTypeDataList = $util.emptyArray;

        /**
         * PokerEv allNum.
         * @member {number} allNum
         * @memberof CVP.PokerEv
         * @instance
         */
        PokerEv.prototype.allNum = 0;

        /**
         * Creates a new PokerEv instance using the specified properties.
         * @function create
         * @memberof CVP.PokerEv
         * @static
         * @param {CVP.IPokerEv=} [properties] Properties to set
         * @returns {CVP.PokerEv} PokerEv instance
         */
        PokerEv.create = function create(properties) {
            return new PokerEv(properties);
        };

        /**
         * Encodes the specified PokerEv message. Does not implicitly {@link CVP.PokerEv.verify|verify} messages.
         * @function encode
         * @memberof CVP.PokerEv
         * @static
         * @param {CVP.IPokerEv} message PokerEv message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PokerEv.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.holdPokerList != null && message.holdPokerList.length)
                for (var i = 0; i < message.holdPokerList.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.holdPokerList[i]);
            if (message.pokerTypeDataList != null && message.pokerTypeDataList.length)
                for (var i = 0; i < message.pokerTypeDataList.length; ++i)
                    $root.CVP.PokerTypeData.encode(message.pokerTypeDataList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.allNum != null && message.hasOwnProperty("allNum"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.allNum);
            return writer;
        };

        /**
         * Encodes the specified PokerEv message, length delimited. Does not implicitly {@link CVP.PokerEv.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.PokerEv
         * @static
         * @param {CVP.IPokerEv} message PokerEv message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PokerEv.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PokerEv message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.PokerEv
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.PokerEv} PokerEv
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PokerEv.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.PokerEv();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.holdPokerList && message.holdPokerList.length))
                        message.holdPokerList = [];
                    message.holdPokerList.push(reader.string());
                    break;
                case 2:
                    if (!(message.pokerTypeDataList && message.pokerTypeDataList.length))
                        message.pokerTypeDataList = [];
                    message.pokerTypeDataList.push($root.CVP.PokerTypeData.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.allNum = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PokerEv message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.PokerEv
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.PokerEv} PokerEv
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PokerEv.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PokerEv message.
         * @function verify
         * @memberof CVP.PokerEv
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PokerEv.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.holdPokerList != null && message.hasOwnProperty("holdPokerList")) {
                if (!Array.isArray(message.holdPokerList))
                    return "holdPokerList: array expected";
                for (var i = 0; i < message.holdPokerList.length; ++i)
                    if (!$util.isString(message.holdPokerList[i]))
                        return "holdPokerList: string[] expected";
            }
            if (message.pokerTypeDataList != null && message.hasOwnProperty("pokerTypeDataList")) {
                if (!Array.isArray(message.pokerTypeDataList))
                    return "pokerTypeDataList: array expected";
                for (var i = 0; i < message.pokerTypeDataList.length; ++i) {
                    var error = $root.CVP.PokerTypeData.verify(message.pokerTypeDataList[i]);
                    if (error)
                        return "pokerTypeDataList." + error;
                }
            }
            if (message.allNum != null && message.hasOwnProperty("allNum"))
                if (!$util.isInteger(message.allNum))
                    return "allNum: integer expected";
            return null;
        };

        /**
         * Creates a PokerEv message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.PokerEv
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.PokerEv} PokerEv
         */
        PokerEv.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.PokerEv)
                return object;
            var message = new $root.CVP.PokerEv();
            if (object.holdPokerList) {
                if (!Array.isArray(object.holdPokerList))
                    throw TypeError(".CVP.PokerEv.holdPokerList: array expected");
                message.holdPokerList = [];
                for (var i = 0; i < object.holdPokerList.length; ++i)
                    message.holdPokerList[i] = String(object.holdPokerList[i]);
            }
            if (object.pokerTypeDataList) {
                if (!Array.isArray(object.pokerTypeDataList))
                    throw TypeError(".CVP.PokerEv.pokerTypeDataList: array expected");
                message.pokerTypeDataList = [];
                for (var i = 0; i < object.pokerTypeDataList.length; ++i) {
                    if (typeof object.pokerTypeDataList[i] !== "object")
                        throw TypeError(".CVP.PokerEv.pokerTypeDataList: object expected");
                    message.pokerTypeDataList[i] = $root.CVP.PokerTypeData.fromObject(object.pokerTypeDataList[i]);
                }
            }
            if (object.allNum != null)
                message.allNum = object.allNum | 0;
            return message;
        };

        /**
         * Creates a plain object from a PokerEv message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.PokerEv
         * @static
         * @param {CVP.PokerEv} message PokerEv
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PokerEv.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.holdPokerList = [];
                object.pokerTypeDataList = [];
            }
            if (options.defaults)
                object.allNum = 0;
            if (message.holdPokerList && message.holdPokerList.length) {
                object.holdPokerList = [];
                for (var j = 0; j < message.holdPokerList.length; ++j)
                    object.holdPokerList[j] = message.holdPokerList[j];
            }
            if (message.pokerTypeDataList && message.pokerTypeDataList.length) {
                object.pokerTypeDataList = [];
                for (var j = 0; j < message.pokerTypeDataList.length; ++j)
                    object.pokerTypeDataList[j] = $root.CVP.PokerTypeData.toObject(message.pokerTypeDataList[j], options);
            }
            if (message.allNum != null && message.hasOwnProperty("allNum"))
                object.allNum = message.allNum;
            return object;
        };

        /**
         * Converts this PokerEv to JSON.
         * @function toJSON
         * @memberof CVP.PokerEv
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PokerEv.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PokerEv;
    })();

    CVP.PokerTypeData = (function() {

        /**
         * Properties of a PokerTypeData.
         * @memberof CVP
         * @interface IPokerTypeData
         * @property {string|null} [winTypeNameIndex] PokerTypeData winTypeNameIndex
         * @property {number|null} [num] PokerTypeData num
         */

        /**
         * Constructs a new PokerTypeData.
         * @memberof CVP
         * @classdesc Represents a PokerTypeData.
         * @implements IPokerTypeData
         * @constructor
         * @param {CVP.IPokerTypeData=} [properties] Properties to set
         */
        function PokerTypeData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PokerTypeData winTypeNameIndex.
         * @member {string} winTypeNameIndex
         * @memberof CVP.PokerTypeData
         * @instance
         */
        PokerTypeData.prototype.winTypeNameIndex = "";

        /**
         * PokerTypeData num.
         * @member {number} num
         * @memberof CVP.PokerTypeData
         * @instance
         */
        PokerTypeData.prototype.num = 0;

        /**
         * Creates a new PokerTypeData instance using the specified properties.
         * @function create
         * @memberof CVP.PokerTypeData
         * @static
         * @param {CVP.IPokerTypeData=} [properties] Properties to set
         * @returns {CVP.PokerTypeData} PokerTypeData instance
         */
        PokerTypeData.create = function create(properties) {
            return new PokerTypeData(properties);
        };

        /**
         * Encodes the specified PokerTypeData message. Does not implicitly {@link CVP.PokerTypeData.verify|verify} messages.
         * @function encode
         * @memberof CVP.PokerTypeData
         * @static
         * @param {CVP.IPokerTypeData} message PokerTypeData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PokerTypeData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.winTypeNameIndex != null && message.hasOwnProperty("winTypeNameIndex"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.winTypeNameIndex);
            if (message.num != null && message.hasOwnProperty("num"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.num);
            return writer;
        };

        /**
         * Encodes the specified PokerTypeData message, length delimited. Does not implicitly {@link CVP.PokerTypeData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.PokerTypeData
         * @static
         * @param {CVP.IPokerTypeData} message PokerTypeData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PokerTypeData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PokerTypeData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.PokerTypeData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.PokerTypeData} PokerTypeData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PokerTypeData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.PokerTypeData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.winTypeNameIndex = reader.string();
                    break;
                case 2:
                    message.num = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PokerTypeData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.PokerTypeData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.PokerTypeData} PokerTypeData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PokerTypeData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PokerTypeData message.
         * @function verify
         * @memberof CVP.PokerTypeData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PokerTypeData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.winTypeNameIndex != null && message.hasOwnProperty("winTypeNameIndex"))
                if (!$util.isString(message.winTypeNameIndex))
                    return "winTypeNameIndex: string expected";
            if (message.num != null && message.hasOwnProperty("num"))
                if (!$util.isInteger(message.num))
                    return "num: integer expected";
            return null;
        };

        /**
         * Creates a PokerTypeData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.PokerTypeData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.PokerTypeData} PokerTypeData
         */
        PokerTypeData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.PokerTypeData)
                return object;
            var message = new $root.CVP.PokerTypeData();
            if (object.winTypeNameIndex != null)
                message.winTypeNameIndex = String(object.winTypeNameIndex);
            if (object.num != null)
                message.num = object.num | 0;
            return message;
        };

        /**
         * Creates a plain object from a PokerTypeData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.PokerTypeData
         * @static
         * @param {CVP.PokerTypeData} message PokerTypeData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PokerTypeData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.winTypeNameIndex = "";
                object.num = 0;
            }
            if (message.winTypeNameIndex != null && message.hasOwnProperty("winTypeNameIndex"))
                object.winTypeNameIndex = message.winTypeNameIndex;
            if (message.num != null && message.hasOwnProperty("num"))
                object.num = message.num;
            return object;
        };

        /**
         * Converts this PokerTypeData to JSON.
         * @function toJSON
         * @memberof CVP.PokerTypeData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PokerTypeData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PokerTypeData;
    })();

    CVP.RequestPokerEvData = (function() {

        /**
         * Properties of a RequestPokerEvData.
         * @memberof CVP
         * @interface IRequestPokerEvData
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestPokerEvData commonParams
         */

        /**
         * Constructs a new RequestPokerEvData.
         * @memberof CVP
         * @classdesc Represents a RequestPokerEvData.
         * @implements IRequestPokerEvData
         * @constructor
         * @param {CVP.IRequestPokerEvData=} [properties] Properties to set
         */
        function RequestPokerEvData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPokerEvData commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestPokerEvData
         * @instance
         */
        RequestPokerEvData.prototype.commonParams = null;

        /**
         * Creates a new RequestPokerEvData instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPokerEvData
         * @static
         * @param {CVP.IRequestPokerEvData=} [properties] Properties to set
         * @returns {CVP.RequestPokerEvData} RequestPokerEvData instance
         */
        RequestPokerEvData.create = function create(properties) {
            return new RequestPokerEvData(properties);
        };

        /**
         * Encodes the specified RequestPokerEvData message. Does not implicitly {@link CVP.RequestPokerEvData.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPokerEvData
         * @static
         * @param {CVP.IRequestPokerEvData} message RequestPokerEvData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPokerEvData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPokerEvData message, length delimited. Does not implicitly {@link CVP.RequestPokerEvData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPokerEvData
         * @static
         * @param {CVP.IRequestPokerEvData} message RequestPokerEvData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPokerEvData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPokerEvData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPokerEvData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPokerEvData} RequestPokerEvData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPokerEvData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPokerEvData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPokerEvData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPokerEvData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPokerEvData} RequestPokerEvData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPokerEvData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPokerEvData message.
         * @function verify
         * @memberof CVP.RequestPokerEvData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPokerEvData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestPokerEvData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPokerEvData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPokerEvData} RequestPokerEvData
         */
        RequestPokerEvData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPokerEvData)
                return object;
            var message = new $root.CVP.RequestPokerEvData();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestPokerEvData.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPokerEvData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPokerEvData
         * @static
         * @param {CVP.RequestPokerEvData} message RequestPokerEvData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPokerEvData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestPokerEvData to JSON.
         * @function toJSON
         * @memberof CVP.RequestPokerEvData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPokerEvData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPokerEvData;
    })();

    CVP.RequestPokerEvDataResult = (function() {

        /**
         * Properties of a RequestPokerEvDataResult.
         * @memberof CVP
         * @interface IRequestPokerEvDataResult
         * @property {CVP.IPokerEvData|null} [pokerEvData] RequestPokerEvDataResult pokerEvData
         */

        /**
         * Constructs a new RequestPokerEvDataResult.
         * @memberof CVP
         * @classdesc Represents a RequestPokerEvDataResult.
         * @implements IRequestPokerEvDataResult
         * @constructor
         * @param {CVP.IRequestPokerEvDataResult=} [properties] Properties to set
         */
        function RequestPokerEvDataResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPokerEvDataResult pokerEvData.
         * @member {CVP.IPokerEvData|null|undefined} pokerEvData
         * @memberof CVP.RequestPokerEvDataResult
         * @instance
         */
        RequestPokerEvDataResult.prototype.pokerEvData = null;

        /**
         * Creates a new RequestPokerEvDataResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPokerEvDataResult
         * @static
         * @param {CVP.IRequestPokerEvDataResult=} [properties] Properties to set
         * @returns {CVP.RequestPokerEvDataResult} RequestPokerEvDataResult instance
         */
        RequestPokerEvDataResult.create = function create(properties) {
            return new RequestPokerEvDataResult(properties);
        };

        /**
         * Encodes the specified RequestPokerEvDataResult message. Does not implicitly {@link CVP.RequestPokerEvDataResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPokerEvDataResult
         * @static
         * @param {CVP.IRequestPokerEvDataResult} message RequestPokerEvDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPokerEvDataResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData"))
                $root.CVP.PokerEvData.encode(message.pokerEvData, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPokerEvDataResult message, length delimited. Does not implicitly {@link CVP.RequestPokerEvDataResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPokerEvDataResult
         * @static
         * @param {CVP.IRequestPokerEvDataResult} message RequestPokerEvDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPokerEvDataResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPokerEvDataResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPokerEvDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPokerEvDataResult} RequestPokerEvDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPokerEvDataResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPokerEvDataResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pokerEvData = $root.CVP.PokerEvData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPokerEvDataResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPokerEvDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPokerEvDataResult} RequestPokerEvDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPokerEvDataResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPokerEvDataResult message.
         * @function verify
         * @memberof CVP.RequestPokerEvDataResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPokerEvDataResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData")) {
                var error = $root.CVP.PokerEvData.verify(message.pokerEvData);
                if (error)
                    return "pokerEvData." + error;
            }
            return null;
        };

        /**
         * Creates a RequestPokerEvDataResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPokerEvDataResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPokerEvDataResult} RequestPokerEvDataResult
         */
        RequestPokerEvDataResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPokerEvDataResult)
                return object;
            var message = new $root.CVP.RequestPokerEvDataResult();
            if (object.pokerEvData != null) {
                if (typeof object.pokerEvData !== "object")
                    throw TypeError(".CVP.RequestPokerEvDataResult.pokerEvData: object expected");
                message.pokerEvData = $root.CVP.PokerEvData.fromObject(object.pokerEvData);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPokerEvDataResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPokerEvDataResult
         * @static
         * @param {CVP.RequestPokerEvDataResult} message RequestPokerEvDataResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPokerEvDataResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.pokerEvData = null;
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData"))
                object.pokerEvData = $root.CVP.PokerEvData.toObject(message.pokerEvData, options);
            return object;
        };

        /**
         * Converts this RequestPokerEvDataResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestPokerEvDataResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPokerEvDataResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPokerEvDataResult;
    })();

    CVP.RequestPokerEvDataDebug = (function() {

        /**
         * Properties of a RequestPokerEvDataDebug.
         * @memberof CVP
         * @interface IRequestPokerEvDataDebug
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestPokerEvDataDebug commonParams
         * @property {Array.<string>|null} [pokerList] RequestPokerEvDataDebug pokerList
         */

        /**
         * Constructs a new RequestPokerEvDataDebug.
         * @memberof CVP
         * @classdesc Represents a RequestPokerEvDataDebug.
         * @implements IRequestPokerEvDataDebug
         * @constructor
         * @param {CVP.IRequestPokerEvDataDebug=} [properties] Properties to set
         */
        function RequestPokerEvDataDebug(properties) {
            this.pokerList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPokerEvDataDebug commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestPokerEvDataDebug
         * @instance
         */
        RequestPokerEvDataDebug.prototype.commonParams = null;

        /**
         * RequestPokerEvDataDebug pokerList.
         * @member {Array.<string>} pokerList
         * @memberof CVP.RequestPokerEvDataDebug
         * @instance
         */
        RequestPokerEvDataDebug.prototype.pokerList = $util.emptyArray;

        /**
         * Creates a new RequestPokerEvDataDebug instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPokerEvDataDebug
         * @static
         * @param {CVP.IRequestPokerEvDataDebug=} [properties] Properties to set
         * @returns {CVP.RequestPokerEvDataDebug} RequestPokerEvDataDebug instance
         */
        RequestPokerEvDataDebug.create = function create(properties) {
            return new RequestPokerEvDataDebug(properties);
        };

        /**
         * Encodes the specified RequestPokerEvDataDebug message. Does not implicitly {@link CVP.RequestPokerEvDataDebug.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPokerEvDataDebug
         * @static
         * @param {CVP.IRequestPokerEvDataDebug} message RequestPokerEvDataDebug message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPokerEvDataDebug.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.pokerList != null && message.pokerList.length)
                for (var i = 0; i < message.pokerList.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.pokerList[i]);
            return writer;
        };

        /**
         * Encodes the specified RequestPokerEvDataDebug message, length delimited. Does not implicitly {@link CVP.RequestPokerEvDataDebug.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPokerEvDataDebug
         * @static
         * @param {CVP.IRequestPokerEvDataDebug} message RequestPokerEvDataDebug message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPokerEvDataDebug.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPokerEvDataDebug message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPokerEvDataDebug
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPokerEvDataDebug} RequestPokerEvDataDebug
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPokerEvDataDebug.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPokerEvDataDebug();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.pokerList && message.pokerList.length))
                        message.pokerList = [];
                    message.pokerList.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPokerEvDataDebug message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPokerEvDataDebug
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPokerEvDataDebug} RequestPokerEvDataDebug
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPokerEvDataDebug.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPokerEvDataDebug message.
         * @function verify
         * @memberof CVP.RequestPokerEvDataDebug
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPokerEvDataDebug.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.pokerList != null && message.hasOwnProperty("pokerList")) {
                if (!Array.isArray(message.pokerList))
                    return "pokerList: array expected";
                for (var i = 0; i < message.pokerList.length; ++i)
                    if (!$util.isString(message.pokerList[i]))
                        return "pokerList: string[] expected";
            }
            return null;
        };

        /**
         * Creates a RequestPokerEvDataDebug message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPokerEvDataDebug
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPokerEvDataDebug} RequestPokerEvDataDebug
         */
        RequestPokerEvDataDebug.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPokerEvDataDebug)
                return object;
            var message = new $root.CVP.RequestPokerEvDataDebug();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestPokerEvDataDebug.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.pokerList) {
                if (!Array.isArray(object.pokerList))
                    throw TypeError(".CVP.RequestPokerEvDataDebug.pokerList: array expected");
                message.pokerList = [];
                for (var i = 0; i < object.pokerList.length; ++i)
                    message.pokerList[i] = String(object.pokerList[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPokerEvDataDebug message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPokerEvDataDebug
         * @static
         * @param {CVP.RequestPokerEvDataDebug} message RequestPokerEvDataDebug
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPokerEvDataDebug.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pokerList = [];
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.pokerList && message.pokerList.length) {
                object.pokerList = [];
                for (var j = 0; j < message.pokerList.length; ++j)
                    object.pokerList[j] = message.pokerList[j];
            }
            return object;
        };

        /**
         * Converts this RequestPokerEvDataDebug to JSON.
         * @function toJSON
         * @memberof CVP.RequestPokerEvDataDebug
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPokerEvDataDebug.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPokerEvDataDebug;
    })();

    CVP.RequestPokerEvDataDebugResult = (function() {

        /**
         * Properties of a RequestPokerEvDataDebugResult.
         * @memberof CVP
         * @interface IRequestPokerEvDataDebugResult
         * @property {CVP.IPokerEvData|null} [pokerEvData] RequestPokerEvDataDebugResult pokerEvData
         */

        /**
         * Constructs a new RequestPokerEvDataDebugResult.
         * @memberof CVP
         * @classdesc Represents a RequestPokerEvDataDebugResult.
         * @implements IRequestPokerEvDataDebugResult
         * @constructor
         * @param {CVP.IRequestPokerEvDataDebugResult=} [properties] Properties to set
         */
        function RequestPokerEvDataDebugResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPokerEvDataDebugResult pokerEvData.
         * @member {CVP.IPokerEvData|null|undefined} pokerEvData
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @instance
         */
        RequestPokerEvDataDebugResult.prototype.pokerEvData = null;

        /**
         * Creates a new RequestPokerEvDataDebugResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @static
         * @param {CVP.IRequestPokerEvDataDebugResult=} [properties] Properties to set
         * @returns {CVP.RequestPokerEvDataDebugResult} RequestPokerEvDataDebugResult instance
         */
        RequestPokerEvDataDebugResult.create = function create(properties) {
            return new RequestPokerEvDataDebugResult(properties);
        };

        /**
         * Encodes the specified RequestPokerEvDataDebugResult message. Does not implicitly {@link CVP.RequestPokerEvDataDebugResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @static
         * @param {CVP.IRequestPokerEvDataDebugResult} message RequestPokerEvDataDebugResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPokerEvDataDebugResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData"))
                $root.CVP.PokerEvData.encode(message.pokerEvData, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPokerEvDataDebugResult message, length delimited. Does not implicitly {@link CVP.RequestPokerEvDataDebugResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @static
         * @param {CVP.IRequestPokerEvDataDebugResult} message RequestPokerEvDataDebugResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPokerEvDataDebugResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPokerEvDataDebugResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPokerEvDataDebugResult} RequestPokerEvDataDebugResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPokerEvDataDebugResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPokerEvDataDebugResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pokerEvData = $root.CVP.PokerEvData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPokerEvDataDebugResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPokerEvDataDebugResult} RequestPokerEvDataDebugResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPokerEvDataDebugResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPokerEvDataDebugResult message.
         * @function verify
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPokerEvDataDebugResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData")) {
                var error = $root.CVP.PokerEvData.verify(message.pokerEvData);
                if (error)
                    return "pokerEvData." + error;
            }
            return null;
        };

        /**
         * Creates a RequestPokerEvDataDebugResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPokerEvDataDebugResult} RequestPokerEvDataDebugResult
         */
        RequestPokerEvDataDebugResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPokerEvDataDebugResult)
                return object;
            var message = new $root.CVP.RequestPokerEvDataDebugResult();
            if (object.pokerEvData != null) {
                if (typeof object.pokerEvData !== "object")
                    throw TypeError(".CVP.RequestPokerEvDataDebugResult.pokerEvData: object expected");
                message.pokerEvData = $root.CVP.PokerEvData.fromObject(object.pokerEvData);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPokerEvDataDebugResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @static
         * @param {CVP.RequestPokerEvDataDebugResult} message RequestPokerEvDataDebugResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPokerEvDataDebugResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.pokerEvData = null;
            if (message.pokerEvData != null && message.hasOwnProperty("pokerEvData"))
                object.pokerEvData = $root.CVP.PokerEvData.toObject(message.pokerEvData, options);
            return object;
        };

        /**
         * Converts this RequestPokerEvDataDebugResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestPokerEvDataDebugResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPokerEvDataDebugResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPokerEvDataDebugResult;
    })();

    CVP.clientErrorServer = (function() {

        /**
         * Properties of a clientErrorServer.
         * @memberof CVP
         * @interface IclientErrorServer
         * @property {CVP.IMsgCommonParams|null} [commonParams] clientErrorServer commonParams
         * @property {string|null} [error] clientErrorServer error
         * @property {string|null} [time] clientErrorServer time
         * @property {number|Long|null} [userId] clientErrorServer userId
         * @property {string|null} [platform] clientErrorServer platform
         * @property {string|null} [GameBaseVersion] clientErrorServer GameBaseVersion
         * @property {string|null} [GameResVersion] clientErrorServer GameResVersion
         * @property {string|null} [ProjectName] clientErrorServer ProjectName
         * @property {string|null} [package_name] clientErrorServer package_name
         * @property {string|null} [errorData] clientErrorServer errorData
         */

        /**
         * Constructs a new clientErrorServer.
         * @memberof CVP
         * @classdesc Represents a clientErrorServer.
         * @implements IclientErrorServer
         * @constructor
         * @param {CVP.IclientErrorServer=} [properties] Properties to set
         */
        function clientErrorServer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * clientErrorServer commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.commonParams = null;

        /**
         * clientErrorServer error.
         * @member {string} error
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.error = "";

        /**
         * clientErrorServer time.
         * @member {string} time
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.time = "";

        /**
         * clientErrorServer userId.
         * @member {number|Long} userId
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.userId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * clientErrorServer platform.
         * @member {string} platform
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.platform = "";

        /**
         * clientErrorServer GameBaseVersion.
         * @member {string} GameBaseVersion
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.GameBaseVersion = "";

        /**
         * clientErrorServer GameResVersion.
         * @member {string} GameResVersion
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.GameResVersion = "";

        /**
         * clientErrorServer ProjectName.
         * @member {string} ProjectName
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.ProjectName = "";

        /**
         * clientErrorServer package_name.
         * @member {string} package_name
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.package_name = "";

        /**
         * clientErrorServer errorData.
         * @member {string} errorData
         * @memberof CVP.clientErrorServer
         * @instance
         */
        clientErrorServer.prototype.errorData = "";

        /**
         * Creates a new clientErrorServer instance using the specified properties.
         * @function create
         * @memberof CVP.clientErrorServer
         * @static
         * @param {CVP.IclientErrorServer=} [properties] Properties to set
         * @returns {CVP.clientErrorServer} clientErrorServer instance
         */
        clientErrorServer.create = function create(properties) {
            return new clientErrorServer(properties);
        };

        /**
         * Encodes the specified clientErrorServer message. Does not implicitly {@link CVP.clientErrorServer.verify|verify} messages.
         * @function encode
         * @memberof CVP.clientErrorServer
         * @static
         * @param {CVP.IclientErrorServer} message clientErrorServer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clientErrorServer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.error != null && message.hasOwnProperty("error"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.error);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.time);
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.userId);
            if (message.platform != null && message.hasOwnProperty("platform"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.platform);
            if (message.GameBaseVersion != null && message.hasOwnProperty("GameBaseVersion"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.GameBaseVersion);
            if (message.GameResVersion != null && message.hasOwnProperty("GameResVersion"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.GameResVersion);
            if (message.ProjectName != null && message.hasOwnProperty("ProjectName"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.ProjectName);
            if (message.package_name != null && message.hasOwnProperty("package_name"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.package_name);
            if (message.errorData != null && message.hasOwnProperty("errorData"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.errorData);
            return writer;
        };

        /**
         * Encodes the specified clientErrorServer message, length delimited. Does not implicitly {@link CVP.clientErrorServer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.clientErrorServer
         * @static
         * @param {CVP.IclientErrorServer} message clientErrorServer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        clientErrorServer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a clientErrorServer message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.clientErrorServer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.clientErrorServer} clientErrorServer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        clientErrorServer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.clientErrorServer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.error = reader.string();
                    break;
                case 3:
                    message.time = reader.string();
                    break;
                case 4:
                    message.userId = reader.int64();
                    break;
                case 5:
                    message.platform = reader.string();
                    break;
                case 6:
                    message.GameBaseVersion = reader.string();
                    break;
                case 7:
                    message.GameResVersion = reader.string();
                    break;
                case 8:
                    message.ProjectName = reader.string();
                    break;
                case 9:
                    message.package_name = reader.string();
                    break;
                case 10:
                    message.errorData = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a clientErrorServer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.clientErrorServer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.clientErrorServer} clientErrorServer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        clientErrorServer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a clientErrorServer message.
         * @function verify
         * @memberof CVP.clientErrorServer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        clientErrorServer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.error != null && message.hasOwnProperty("error"))
                if (!$util.isString(message.error))
                    return "error: string expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isString(message.time))
                    return "time: string expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId) && !(message.userId && $util.isInteger(message.userId.low) && $util.isInteger(message.userId.high)))
                    return "userId: integer|Long expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                if (!$util.isString(message.platform))
                    return "platform: string expected";
            if (message.GameBaseVersion != null && message.hasOwnProperty("GameBaseVersion"))
                if (!$util.isString(message.GameBaseVersion))
                    return "GameBaseVersion: string expected";
            if (message.GameResVersion != null && message.hasOwnProperty("GameResVersion"))
                if (!$util.isString(message.GameResVersion))
                    return "GameResVersion: string expected";
            if (message.ProjectName != null && message.hasOwnProperty("ProjectName"))
                if (!$util.isString(message.ProjectName))
                    return "ProjectName: string expected";
            if (message.package_name != null && message.hasOwnProperty("package_name"))
                if (!$util.isString(message.package_name))
                    return "package_name: string expected";
            if (message.errorData != null && message.hasOwnProperty("errorData"))
                if (!$util.isString(message.errorData))
                    return "errorData: string expected";
            return null;
        };

        /**
         * Creates a clientErrorServer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.clientErrorServer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.clientErrorServer} clientErrorServer
         */
        clientErrorServer.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.clientErrorServer)
                return object;
            var message = new $root.CVP.clientErrorServer();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.clientErrorServer.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.error != null)
                message.error = String(object.error);
            if (object.time != null)
                message.time = String(object.time);
            if (object.userId != null)
                if ($util.Long)
                    (message.userId = $util.Long.fromValue(object.userId)).unsigned = false;
                else if (typeof object.userId === "string")
                    message.userId = parseInt(object.userId, 10);
                else if (typeof object.userId === "number")
                    message.userId = object.userId;
                else if (typeof object.userId === "object")
                    message.userId = new $util.LongBits(object.userId.low >>> 0, object.userId.high >>> 0).toNumber();
            if (object.platform != null)
                message.platform = String(object.platform);
            if (object.GameBaseVersion != null)
                message.GameBaseVersion = String(object.GameBaseVersion);
            if (object.GameResVersion != null)
                message.GameResVersion = String(object.GameResVersion);
            if (object.ProjectName != null)
                message.ProjectName = String(object.ProjectName);
            if (object.package_name != null)
                message.package_name = String(object.package_name);
            if (object.errorData != null)
                message.errorData = String(object.errorData);
            return message;
        };

        /**
         * Creates a plain object from a clientErrorServer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.clientErrorServer
         * @static
         * @param {CVP.clientErrorServer} message clientErrorServer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        clientErrorServer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.error = "";
                object.time = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.userId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.userId = options.longs === String ? "0" : 0;
                object.platform = "";
                object.GameBaseVersion = "";
                object.GameResVersion = "";
                object.ProjectName = "";
                object.package_name = "";
                object.errorData = "";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.error != null && message.hasOwnProperty("error"))
                object.error = message.error;
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (typeof message.userId === "number")
                    object.userId = options.longs === String ? String(message.userId) : message.userId;
                else
                    object.userId = options.longs === String ? $util.Long.prototype.toString.call(message.userId) : options.longs === Number ? new $util.LongBits(message.userId.low >>> 0, message.userId.high >>> 0).toNumber() : message.userId;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = message.platform;
            if (message.GameBaseVersion != null && message.hasOwnProperty("GameBaseVersion"))
                object.GameBaseVersion = message.GameBaseVersion;
            if (message.GameResVersion != null && message.hasOwnProperty("GameResVersion"))
                object.GameResVersion = message.GameResVersion;
            if (message.ProjectName != null && message.hasOwnProperty("ProjectName"))
                object.ProjectName = message.ProjectName;
            if (message.package_name != null && message.hasOwnProperty("package_name"))
                object.package_name = message.package_name;
            if (message.errorData != null && message.hasOwnProperty("errorData"))
                object.errorData = message.errorData;
            return object;
        };

        /**
         * Converts this clientErrorServer to JSON.
         * @function toJSON
         * @memberof CVP.clientErrorServer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        clientErrorServer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return clientErrorServer;
    })();

    /**
     * MailType enum.
     * @name CVP.MailType
     * @enum {string}
     * @property {number} GIFT=1 GIFT value
     * @property {number} MSG=2 MSG value
     */
    CVP.MailType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "GIFT"] = 1;
        values[valuesById[2] = "MSG"] = 2;
        return values;
    })();

    CVP.RequestInbox = (function() {

        /**
         * Properties of a RequestInbox.
         * @memberof CVP
         * @interface IRequestInbox
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestInbox commonParams
         * @property {boolean|null} [isNumber] RequestInbox isNumber
         */

        /**
         * Constructs a new RequestInbox.
         * @memberof CVP
         * @classdesc Represents a RequestInbox.
         * @implements IRequestInbox
         * @constructor
         * @param {CVP.IRequestInbox=} [properties] Properties to set
         */
        function RequestInbox(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestInbox commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestInbox
         * @instance
         */
        RequestInbox.prototype.commonParams = null;

        /**
         * RequestInbox isNumber.
         * @member {boolean} isNumber
         * @memberof CVP.RequestInbox
         * @instance
         */
        RequestInbox.prototype.isNumber = false;

        /**
         * Creates a new RequestInbox instance using the specified properties.
         * @function create
         * @memberof CVP.RequestInbox
         * @static
         * @param {CVP.IRequestInbox=} [properties] Properties to set
         * @returns {CVP.RequestInbox} RequestInbox instance
         */
        RequestInbox.create = function create(properties) {
            return new RequestInbox(properties);
        };

        /**
         * Encodes the specified RequestInbox message. Does not implicitly {@link CVP.RequestInbox.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestInbox
         * @static
         * @param {CVP.IRequestInbox} message RequestInbox message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestInbox.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.isNumber != null && message.hasOwnProperty("isNumber"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNumber);
            return writer;
        };

        /**
         * Encodes the specified RequestInbox message, length delimited. Does not implicitly {@link CVP.RequestInbox.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestInbox
         * @static
         * @param {CVP.IRequestInbox} message RequestInbox message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestInbox.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestInbox message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestInbox
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestInbox} RequestInbox
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestInbox.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestInbox();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.isNumber = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestInbox message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestInbox
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestInbox} RequestInbox
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestInbox.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestInbox message.
         * @function verify
         * @memberof CVP.RequestInbox
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestInbox.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.isNumber != null && message.hasOwnProperty("isNumber"))
                if (typeof message.isNumber !== "boolean")
                    return "isNumber: boolean expected";
            return null;
        };

        /**
         * Creates a RequestInbox message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestInbox
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestInbox} RequestInbox
         */
        RequestInbox.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestInbox)
                return object;
            var message = new $root.CVP.RequestInbox();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestInbox.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.isNumber != null)
                message.isNumber = Boolean(object.isNumber);
            return message;
        };

        /**
         * Creates a plain object from a RequestInbox message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestInbox
         * @static
         * @param {CVP.RequestInbox} message RequestInbox
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestInbox.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.isNumber = false;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.isNumber != null && message.hasOwnProperty("isNumber"))
                object.isNumber = message.isNumber;
            return object;
        };

        /**
         * Converts this RequestInbox to JSON.
         * @function toJSON
         * @memberof CVP.RequestInbox
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestInbox.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestInbox;
    })();

    CVP.RequestInboxResult = (function() {

        /**
         * Properties of a RequestInboxResult.
         * @memberof CVP
         * @interface IRequestInboxResult
         * @property {Array.<CVP.IMail>|null} [mailList] RequestInboxResult mailList
         * @property {number|null} [mailNumber] RequestInboxResult mailNumber
         */

        /**
         * Constructs a new RequestInboxResult.
         * @memberof CVP
         * @classdesc Represents a RequestInboxResult.
         * @implements IRequestInboxResult
         * @constructor
         * @param {CVP.IRequestInboxResult=} [properties] Properties to set
         */
        function RequestInboxResult(properties) {
            this.mailList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestInboxResult mailList.
         * @member {Array.<CVP.IMail>} mailList
         * @memberof CVP.RequestInboxResult
         * @instance
         */
        RequestInboxResult.prototype.mailList = $util.emptyArray;

        /**
         * RequestInboxResult mailNumber.
         * @member {number} mailNumber
         * @memberof CVP.RequestInboxResult
         * @instance
         */
        RequestInboxResult.prototype.mailNumber = 0;

        /**
         * Creates a new RequestInboxResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestInboxResult
         * @static
         * @param {CVP.IRequestInboxResult=} [properties] Properties to set
         * @returns {CVP.RequestInboxResult} RequestInboxResult instance
         */
        RequestInboxResult.create = function create(properties) {
            return new RequestInboxResult(properties);
        };

        /**
         * Encodes the specified RequestInboxResult message. Does not implicitly {@link CVP.RequestInboxResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestInboxResult
         * @static
         * @param {CVP.IRequestInboxResult} message RequestInboxResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestInboxResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mailList != null && message.mailList.length)
                for (var i = 0; i < message.mailList.length; ++i)
                    $root.CVP.Mail.encode(message.mailList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.mailNumber != null && message.hasOwnProperty("mailNumber"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mailNumber);
            return writer;
        };

        /**
         * Encodes the specified RequestInboxResult message, length delimited. Does not implicitly {@link CVP.RequestInboxResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestInboxResult
         * @static
         * @param {CVP.IRequestInboxResult} message RequestInboxResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestInboxResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestInboxResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestInboxResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestInboxResult} RequestInboxResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestInboxResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestInboxResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.mailList && message.mailList.length))
                        message.mailList = [];
                    message.mailList.push($root.CVP.Mail.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.mailNumber = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestInboxResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestInboxResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestInboxResult} RequestInboxResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestInboxResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestInboxResult message.
         * @function verify
         * @memberof CVP.RequestInboxResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestInboxResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mailList != null && message.hasOwnProperty("mailList")) {
                if (!Array.isArray(message.mailList))
                    return "mailList: array expected";
                for (var i = 0; i < message.mailList.length; ++i) {
                    var error = $root.CVP.Mail.verify(message.mailList[i]);
                    if (error)
                        return "mailList." + error;
                }
            }
            if (message.mailNumber != null && message.hasOwnProperty("mailNumber"))
                if (!$util.isInteger(message.mailNumber))
                    return "mailNumber: integer expected";
            return null;
        };

        /**
         * Creates a RequestInboxResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestInboxResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestInboxResult} RequestInboxResult
         */
        RequestInboxResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestInboxResult)
                return object;
            var message = new $root.CVP.RequestInboxResult();
            if (object.mailList) {
                if (!Array.isArray(object.mailList))
                    throw TypeError(".CVP.RequestInboxResult.mailList: array expected");
                message.mailList = [];
                for (var i = 0; i < object.mailList.length; ++i) {
                    if (typeof object.mailList[i] !== "object")
                        throw TypeError(".CVP.RequestInboxResult.mailList: object expected");
                    message.mailList[i] = $root.CVP.Mail.fromObject(object.mailList[i]);
                }
            }
            if (object.mailNumber != null)
                message.mailNumber = object.mailNumber | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestInboxResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestInboxResult
         * @static
         * @param {CVP.RequestInboxResult} message RequestInboxResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestInboxResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.mailList = [];
            if (options.defaults)
                object.mailNumber = 0;
            if (message.mailList && message.mailList.length) {
                object.mailList = [];
                for (var j = 0; j < message.mailList.length; ++j)
                    object.mailList[j] = $root.CVP.Mail.toObject(message.mailList[j], options);
            }
            if (message.mailNumber != null && message.hasOwnProperty("mailNumber"))
                object.mailNumber = message.mailNumber;
            return object;
        };

        /**
         * Converts this RequestInboxResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestInboxResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestInboxResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestInboxResult;
    })();

    CVP.Mail = (function() {

        /**
         * Properties of a Mail.
         * @memberof CVP
         * @interface IMail
         * @property {string|null} [name] Mail name
         * @property {CVP.MailType|null} [mailType] Mail mailType
         * @property {string|null} [time] Mail time
         * @property {boolean|null} [isRead] Mail isRead
         * @property {number|null} [mailID] Mail mailID
         * @property {string|null} [mailText] Mail mailText
         * @property {Array.<CVP.IAttachment>|null} [attachment] Mail attachment
         * @property {boolean|null} [isCollect] Mail isCollect
         */

        /**
         * Constructs a new Mail.
         * @memberof CVP
         * @classdesc Represents a Mail.
         * @implements IMail
         * @constructor
         * @param {CVP.IMail=} [properties] Properties to set
         */
        function Mail(properties) {
            this.attachment = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Mail name.
         * @member {string} name
         * @memberof CVP.Mail
         * @instance
         */
        Mail.prototype.name = "";

        /**
         * Mail mailType.
         * @member {CVP.MailType} mailType
         * @memberof CVP.Mail
         * @instance
         */
        Mail.prototype.mailType = 1;

        /**
         * Mail time.
         * @member {string} time
         * @memberof CVP.Mail
         * @instance
         */
        Mail.prototype.time = "";

        /**
         * Mail isRead.
         * @member {boolean} isRead
         * @memberof CVP.Mail
         * @instance
         */
        Mail.prototype.isRead = false;

        /**
         * Mail mailID.
         * @member {number} mailID
         * @memberof CVP.Mail
         * @instance
         */
        Mail.prototype.mailID = 0;

        /**
         * Mail mailText.
         * @member {string} mailText
         * @memberof CVP.Mail
         * @instance
         */
        Mail.prototype.mailText = "";

        /**
         * Mail attachment.
         * @member {Array.<CVP.IAttachment>} attachment
         * @memberof CVP.Mail
         * @instance
         */
        Mail.prototype.attachment = $util.emptyArray;

        /**
         * Mail isCollect.
         * @member {boolean} isCollect
         * @memberof CVP.Mail
         * @instance
         */
        Mail.prototype.isCollect = false;

        /**
         * Creates a new Mail instance using the specified properties.
         * @function create
         * @memberof CVP.Mail
         * @static
         * @param {CVP.IMail=} [properties] Properties to set
         * @returns {CVP.Mail} Mail instance
         */
        Mail.create = function create(properties) {
            return new Mail(properties);
        };

        /**
         * Encodes the specified Mail message. Does not implicitly {@link CVP.Mail.verify|verify} messages.
         * @function encode
         * @memberof CVP.Mail
         * @static
         * @param {CVP.IMail} message Mail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Mail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.mailType != null && message.hasOwnProperty("mailType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mailType);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.time);
            if (message.isRead != null && message.hasOwnProperty("isRead"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isRead);
            if (message.mailID != null && message.hasOwnProperty("mailID"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.mailID);
            if (message.mailText != null && message.hasOwnProperty("mailText"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.mailText);
            if (message.attachment != null && message.attachment.length)
                for (var i = 0; i < message.attachment.length; ++i)
                    $root.CVP.Attachment.encode(message.attachment[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.isCollect != null && message.hasOwnProperty("isCollect"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.isCollect);
            return writer;
        };

        /**
         * Encodes the specified Mail message, length delimited. Does not implicitly {@link CVP.Mail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.Mail
         * @static
         * @param {CVP.IMail} message Mail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Mail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Mail message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.Mail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.Mail} Mail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Mail.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.Mail();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.mailType = reader.int32();
                    break;
                case 3:
                    message.time = reader.string();
                    break;
                case 4:
                    message.isRead = reader.bool();
                    break;
                case 5:
                    message.mailID = reader.int32();
                    break;
                case 6:
                    message.mailText = reader.string();
                    break;
                case 7:
                    if (!(message.attachment && message.attachment.length))
                        message.attachment = [];
                    message.attachment.push($root.CVP.Attachment.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.isCollect = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Mail message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.Mail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.Mail} Mail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Mail.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Mail message.
         * @function verify
         * @memberof CVP.Mail
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Mail.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.mailType != null && message.hasOwnProperty("mailType"))
                switch (message.mailType) {
                default:
                    return "mailType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isString(message.time))
                    return "time: string expected";
            if (message.isRead != null && message.hasOwnProperty("isRead"))
                if (typeof message.isRead !== "boolean")
                    return "isRead: boolean expected";
            if (message.mailID != null && message.hasOwnProperty("mailID"))
                if (!$util.isInteger(message.mailID))
                    return "mailID: integer expected";
            if (message.mailText != null && message.hasOwnProperty("mailText"))
                if (!$util.isString(message.mailText))
                    return "mailText: string expected";
            if (message.attachment != null && message.hasOwnProperty("attachment")) {
                if (!Array.isArray(message.attachment))
                    return "attachment: array expected";
                for (var i = 0; i < message.attachment.length; ++i) {
                    var error = $root.CVP.Attachment.verify(message.attachment[i]);
                    if (error)
                        return "attachment." + error;
                }
            }
            if (message.isCollect != null && message.hasOwnProperty("isCollect"))
                if (typeof message.isCollect !== "boolean")
                    return "isCollect: boolean expected";
            return null;
        };

        /**
         * Creates a Mail message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.Mail
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.Mail} Mail
         */
        Mail.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.Mail)
                return object;
            var message = new $root.CVP.Mail();
            if (object.name != null)
                message.name = String(object.name);
            switch (object.mailType) {
            case "GIFT":
            case 1:
                message.mailType = 1;
                break;
            case "MSG":
            case 2:
                message.mailType = 2;
                break;
            }
            if (object.time != null)
                message.time = String(object.time);
            if (object.isRead != null)
                message.isRead = Boolean(object.isRead);
            if (object.mailID != null)
                message.mailID = object.mailID | 0;
            if (object.mailText != null)
                message.mailText = String(object.mailText);
            if (object.attachment) {
                if (!Array.isArray(object.attachment))
                    throw TypeError(".CVP.Mail.attachment: array expected");
                message.attachment = [];
                for (var i = 0; i < object.attachment.length; ++i) {
                    if (typeof object.attachment[i] !== "object")
                        throw TypeError(".CVP.Mail.attachment: object expected");
                    message.attachment[i] = $root.CVP.Attachment.fromObject(object.attachment[i]);
                }
            }
            if (object.isCollect != null)
                message.isCollect = Boolean(object.isCollect);
            return message;
        };

        /**
         * Creates a plain object from a Mail message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.Mail
         * @static
         * @param {CVP.Mail} message Mail
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Mail.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.attachment = [];
            if (options.defaults) {
                object.name = "";
                object.mailType = options.enums === String ? "GIFT" : 1;
                object.time = "";
                object.isRead = false;
                object.mailID = 0;
                object.mailText = "";
                object.isCollect = false;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.mailType != null && message.hasOwnProperty("mailType"))
                object.mailType = options.enums === String ? $root.CVP.MailType[message.mailType] : message.mailType;
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            if (message.isRead != null && message.hasOwnProperty("isRead"))
                object.isRead = message.isRead;
            if (message.mailID != null && message.hasOwnProperty("mailID"))
                object.mailID = message.mailID;
            if (message.mailText != null && message.hasOwnProperty("mailText"))
                object.mailText = message.mailText;
            if (message.attachment && message.attachment.length) {
                object.attachment = [];
                for (var j = 0; j < message.attachment.length; ++j)
                    object.attachment[j] = $root.CVP.Attachment.toObject(message.attachment[j], options);
            }
            if (message.isCollect != null && message.hasOwnProperty("isCollect"))
                object.isCollect = message.isCollect;
            return object;
        };

        /**
         * Converts this Mail to JSON.
         * @function toJSON
         * @memberof CVP.Mail
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Mail.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Mail;
    })();

    CVP.Attachment = (function() {

        /**
         * Properties of an Attachment.
         * @memberof CVP
         * @interface IAttachment
         * @property {CVP.IGiftInfo|null} [giftInfo] Attachment giftInfo
         * @property {number|null} [baseCoins] Attachment baseCoins
         * @property {number|null} [HonorBonus] Attachment HonorBonus
         * @property {number|null} [vipBonus] Attachment vipBonus
         */

        /**
         * Constructs a new Attachment.
         * @memberof CVP
         * @classdesc Represents an Attachment.
         * @implements IAttachment
         * @constructor
         * @param {CVP.IAttachment=} [properties] Properties to set
         */
        function Attachment(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Attachment giftInfo.
         * @member {CVP.IGiftInfo|null|undefined} giftInfo
         * @memberof CVP.Attachment
         * @instance
         */
        Attachment.prototype.giftInfo = null;

        /**
         * Attachment baseCoins.
         * @member {number} baseCoins
         * @memberof CVP.Attachment
         * @instance
         */
        Attachment.prototype.baseCoins = 0;

        /**
         * Attachment HonorBonus.
         * @member {number} HonorBonus
         * @memberof CVP.Attachment
         * @instance
         */
        Attachment.prototype.HonorBonus = 0;

        /**
         * Attachment vipBonus.
         * @member {number} vipBonus
         * @memberof CVP.Attachment
         * @instance
         */
        Attachment.prototype.vipBonus = 0;

        /**
         * Creates a new Attachment instance using the specified properties.
         * @function create
         * @memberof CVP.Attachment
         * @static
         * @param {CVP.IAttachment=} [properties] Properties to set
         * @returns {CVP.Attachment} Attachment instance
         */
        Attachment.create = function create(properties) {
            return new Attachment(properties);
        };

        /**
         * Encodes the specified Attachment message. Does not implicitly {@link CVP.Attachment.verify|verify} messages.
         * @function encode
         * @memberof CVP.Attachment
         * @static
         * @param {CVP.IAttachment} message Attachment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Attachment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.giftInfo != null && message.hasOwnProperty("giftInfo"))
                $root.CVP.GiftInfo.encode(message.giftInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.baseCoins != null && message.hasOwnProperty("baseCoins"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.baseCoins);
            if (message.HonorBonus != null && message.hasOwnProperty("HonorBonus"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.HonorBonus);
            if (message.vipBonus != null && message.hasOwnProperty("vipBonus"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.vipBonus);
            return writer;
        };

        /**
         * Encodes the specified Attachment message, length delimited. Does not implicitly {@link CVP.Attachment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.Attachment
         * @static
         * @param {CVP.IAttachment} message Attachment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Attachment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Attachment message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.Attachment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.Attachment} Attachment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Attachment.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.Attachment();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.giftInfo = $root.CVP.GiftInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.baseCoins = reader.double();
                    break;
                case 3:
                    message.HonorBonus = reader.double();
                    break;
                case 4:
                    message.vipBonus = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Attachment message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.Attachment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.Attachment} Attachment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Attachment.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Attachment message.
         * @function verify
         * @memberof CVP.Attachment
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Attachment.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.giftInfo != null && message.hasOwnProperty("giftInfo")) {
                var error = $root.CVP.GiftInfo.verify(message.giftInfo);
                if (error)
                    return "giftInfo." + error;
            }
            if (message.baseCoins != null && message.hasOwnProperty("baseCoins"))
                if (typeof message.baseCoins !== "number")
                    return "baseCoins: number expected";
            if (message.HonorBonus != null && message.hasOwnProperty("HonorBonus"))
                if (typeof message.HonorBonus !== "number")
                    return "HonorBonus: number expected";
            if (message.vipBonus != null && message.hasOwnProperty("vipBonus"))
                if (typeof message.vipBonus !== "number")
                    return "vipBonus: number expected";
            return null;
        };

        /**
         * Creates an Attachment message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.Attachment
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.Attachment} Attachment
         */
        Attachment.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.Attachment)
                return object;
            var message = new $root.CVP.Attachment();
            if (object.giftInfo != null) {
                if (typeof object.giftInfo !== "object")
                    throw TypeError(".CVP.Attachment.giftInfo: object expected");
                message.giftInfo = $root.CVP.GiftInfo.fromObject(object.giftInfo);
            }
            if (object.baseCoins != null)
                message.baseCoins = Number(object.baseCoins);
            if (object.HonorBonus != null)
                message.HonorBonus = Number(object.HonorBonus);
            if (object.vipBonus != null)
                message.vipBonus = Number(object.vipBonus);
            return message;
        };

        /**
         * Creates a plain object from an Attachment message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.Attachment
         * @static
         * @param {CVP.Attachment} message Attachment
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Attachment.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.giftInfo = null;
                object.baseCoins = 0;
                object.HonorBonus = 0;
                object.vipBonus = 0;
            }
            if (message.giftInfo != null && message.hasOwnProperty("giftInfo"))
                object.giftInfo = $root.CVP.GiftInfo.toObject(message.giftInfo, options);
            if (message.baseCoins != null && message.hasOwnProperty("baseCoins"))
                object.baseCoins = options.json && !isFinite(message.baseCoins) ? String(message.baseCoins) : message.baseCoins;
            if (message.HonorBonus != null && message.hasOwnProperty("HonorBonus"))
                object.HonorBonus = options.json && !isFinite(message.HonorBonus) ? String(message.HonorBonus) : message.HonorBonus;
            if (message.vipBonus != null && message.hasOwnProperty("vipBonus"))
                object.vipBonus = options.json && !isFinite(message.vipBonus) ? String(message.vipBonus) : message.vipBonus;
            return object;
        };

        /**
         * Converts this Attachment to JSON.
         * @function toJSON
         * @memberof CVP.Attachment
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Attachment.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Attachment;
    })();

    CVP.RequestCollectGift = (function() {

        /**
         * Properties of a RequestCollectGift.
         * @memberof CVP
         * @interface IRequestCollectGift
         * @property {Array.<number>|null} [mailID] RequestCollectGift mailID
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestCollectGift commonParams
         */

        /**
         * Constructs a new RequestCollectGift.
         * @memberof CVP
         * @classdesc Represents a RequestCollectGift.
         * @implements IRequestCollectGift
         * @constructor
         * @param {CVP.IRequestCollectGift=} [properties] Properties to set
         */
        function RequestCollectGift(properties) {
            this.mailID = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestCollectGift mailID.
         * @member {Array.<number>} mailID
         * @memberof CVP.RequestCollectGift
         * @instance
         */
        RequestCollectGift.prototype.mailID = $util.emptyArray;

        /**
         * RequestCollectGift commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestCollectGift
         * @instance
         */
        RequestCollectGift.prototype.commonParams = null;

        /**
         * Creates a new RequestCollectGift instance using the specified properties.
         * @function create
         * @memberof CVP.RequestCollectGift
         * @static
         * @param {CVP.IRequestCollectGift=} [properties] Properties to set
         * @returns {CVP.RequestCollectGift} RequestCollectGift instance
         */
        RequestCollectGift.create = function create(properties) {
            return new RequestCollectGift(properties);
        };

        /**
         * Encodes the specified RequestCollectGift message. Does not implicitly {@link CVP.RequestCollectGift.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestCollectGift
         * @static
         * @param {CVP.IRequestCollectGift} message RequestCollectGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectGift.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mailID != null && message.mailID.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (var i = 0; i < message.mailID.length; ++i)
                    writer.int32(message.mailID[i]);
                writer.ldelim();
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestCollectGift message, length delimited. Does not implicitly {@link CVP.RequestCollectGift.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestCollectGift
         * @static
         * @param {CVP.IRequestCollectGift} message RequestCollectGift message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectGift.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestCollectGift message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestCollectGift
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestCollectGift} RequestCollectGift
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectGift.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestCollectGift();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.mailID && message.mailID.length))
                        message.mailID = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.mailID.push(reader.int32());
                    } else
                        message.mailID.push(reader.int32());
                    break;
                case 2:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestCollectGift message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestCollectGift
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestCollectGift} RequestCollectGift
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectGift.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestCollectGift message.
         * @function verify
         * @memberof CVP.RequestCollectGift
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestCollectGift.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mailID != null && message.hasOwnProperty("mailID")) {
                if (!Array.isArray(message.mailID))
                    return "mailID: array expected";
                for (var i = 0; i < message.mailID.length; ++i)
                    if (!$util.isInteger(message.mailID[i]))
                        return "mailID: integer[] expected";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestCollectGift message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestCollectGift
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestCollectGift} RequestCollectGift
         */
        RequestCollectGift.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestCollectGift)
                return object;
            var message = new $root.CVP.RequestCollectGift();
            if (object.mailID) {
                if (!Array.isArray(object.mailID))
                    throw TypeError(".CVP.RequestCollectGift.mailID: array expected");
                message.mailID = [];
                for (var i = 0; i < object.mailID.length; ++i)
                    message.mailID[i] = object.mailID[i] | 0;
            }
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestCollectGift.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestCollectGift message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestCollectGift
         * @static
         * @param {CVP.RequestCollectGift} message RequestCollectGift
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestCollectGift.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.mailID = [];
            if (options.defaults)
                object.commonParams = null;
            if (message.mailID && message.mailID.length) {
                object.mailID = [];
                for (var j = 0; j < message.mailID.length; ++j)
                    object.mailID[j] = message.mailID[j];
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestCollectGift to JSON.
         * @function toJSON
         * @memberof CVP.RequestCollectGift
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestCollectGift.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestCollectGift;
    })();

    CVP.RequestCollectGiftResult = (function() {

        /**
         * Properties of a RequestCollectGiftResult.
         * @memberof CVP
         * @interface IRequestCollectGiftResult
         * @property {Array.<CVP.IGiftInfo>|null} [giftInfo] RequestCollectGiftResult giftInfo
         */

        /**
         * Constructs a new RequestCollectGiftResult.
         * @memberof CVP
         * @classdesc Represents a RequestCollectGiftResult.
         * @implements IRequestCollectGiftResult
         * @constructor
         * @param {CVP.IRequestCollectGiftResult=} [properties] Properties to set
         */
        function RequestCollectGiftResult(properties) {
            this.giftInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestCollectGiftResult giftInfo.
         * @member {Array.<CVP.IGiftInfo>} giftInfo
         * @memberof CVP.RequestCollectGiftResult
         * @instance
         */
        RequestCollectGiftResult.prototype.giftInfo = $util.emptyArray;

        /**
         * Creates a new RequestCollectGiftResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestCollectGiftResult
         * @static
         * @param {CVP.IRequestCollectGiftResult=} [properties] Properties to set
         * @returns {CVP.RequestCollectGiftResult} RequestCollectGiftResult instance
         */
        RequestCollectGiftResult.create = function create(properties) {
            return new RequestCollectGiftResult(properties);
        };

        /**
         * Encodes the specified RequestCollectGiftResult message. Does not implicitly {@link CVP.RequestCollectGiftResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestCollectGiftResult
         * @static
         * @param {CVP.IRequestCollectGiftResult} message RequestCollectGiftResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectGiftResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.giftInfo != null && message.giftInfo.length)
                for (var i = 0; i < message.giftInfo.length; ++i)
                    $root.CVP.GiftInfo.encode(message.giftInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestCollectGiftResult message, length delimited. Does not implicitly {@link CVP.RequestCollectGiftResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestCollectGiftResult
         * @static
         * @param {CVP.IRequestCollectGiftResult} message RequestCollectGiftResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectGiftResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestCollectGiftResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestCollectGiftResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestCollectGiftResult} RequestCollectGiftResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectGiftResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestCollectGiftResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.giftInfo && message.giftInfo.length))
                        message.giftInfo = [];
                    message.giftInfo.push($root.CVP.GiftInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestCollectGiftResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestCollectGiftResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestCollectGiftResult} RequestCollectGiftResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectGiftResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestCollectGiftResult message.
         * @function verify
         * @memberof CVP.RequestCollectGiftResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestCollectGiftResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.giftInfo != null && message.hasOwnProperty("giftInfo")) {
                if (!Array.isArray(message.giftInfo))
                    return "giftInfo: array expected";
                for (var i = 0; i < message.giftInfo.length; ++i) {
                    var error = $root.CVP.GiftInfo.verify(message.giftInfo[i]);
                    if (error)
                        return "giftInfo." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestCollectGiftResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestCollectGiftResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestCollectGiftResult} RequestCollectGiftResult
         */
        RequestCollectGiftResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestCollectGiftResult)
                return object;
            var message = new $root.CVP.RequestCollectGiftResult();
            if (object.giftInfo) {
                if (!Array.isArray(object.giftInfo))
                    throw TypeError(".CVP.RequestCollectGiftResult.giftInfo: array expected");
                message.giftInfo = [];
                for (var i = 0; i < object.giftInfo.length; ++i) {
                    if (typeof object.giftInfo[i] !== "object")
                        throw TypeError(".CVP.RequestCollectGiftResult.giftInfo: object expected");
                    message.giftInfo[i] = $root.CVP.GiftInfo.fromObject(object.giftInfo[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestCollectGiftResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestCollectGiftResult
         * @static
         * @param {CVP.RequestCollectGiftResult} message RequestCollectGiftResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestCollectGiftResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.giftInfo = [];
            if (message.giftInfo && message.giftInfo.length) {
                object.giftInfo = [];
                for (var j = 0; j < message.giftInfo.length; ++j)
                    object.giftInfo[j] = $root.CVP.GiftInfo.toObject(message.giftInfo[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestCollectGiftResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestCollectGiftResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestCollectGiftResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestCollectGiftResult;
    })();

    CVP.GiftInfo = (function() {

        /**
         * Properties of a GiftInfo.
         * @memberof CVP
         * @interface IGiftInfo
         * @property {CVP.ValueType|null} [valueType] GiftInfo valueType
         * @property {number|null} [number] GiftInfo number
         */

        /**
         * Constructs a new GiftInfo.
         * @memberof CVP
         * @classdesc Represents a GiftInfo.
         * @implements IGiftInfo
         * @constructor
         * @param {CVP.IGiftInfo=} [properties] Properties to set
         */
        function GiftInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GiftInfo valueType.
         * @member {CVP.ValueType} valueType
         * @memberof CVP.GiftInfo
         * @instance
         */
        GiftInfo.prototype.valueType = 0;

        /**
         * GiftInfo number.
         * @member {number} number
         * @memberof CVP.GiftInfo
         * @instance
         */
        GiftInfo.prototype.number = 0;

        /**
         * Creates a new GiftInfo instance using the specified properties.
         * @function create
         * @memberof CVP.GiftInfo
         * @static
         * @param {CVP.IGiftInfo=} [properties] Properties to set
         * @returns {CVP.GiftInfo} GiftInfo instance
         */
        GiftInfo.create = function create(properties) {
            return new GiftInfo(properties);
        };

        /**
         * Encodes the specified GiftInfo message. Does not implicitly {@link CVP.GiftInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.GiftInfo
         * @static
         * @param {CVP.IGiftInfo} message GiftInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.valueType != null && message.hasOwnProperty("valueType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.valueType);
            if (message.number != null && message.hasOwnProperty("number"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.number);
            return writer;
        };

        /**
         * Encodes the specified GiftInfo message, length delimited. Does not implicitly {@link CVP.GiftInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.GiftInfo
         * @static
         * @param {CVP.IGiftInfo} message GiftInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GiftInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GiftInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.GiftInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.GiftInfo} GiftInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.GiftInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.valueType = reader.int32();
                    break;
                case 3:
                    message.number = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GiftInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.GiftInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.GiftInfo} GiftInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GiftInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GiftInfo message.
         * @function verify
         * @memberof CVP.GiftInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GiftInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.valueType != null && message.hasOwnProperty("valueType"))
                switch (message.valueType) {
                default:
                    return "valueType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.number != null && message.hasOwnProperty("number"))
                if (typeof message.number !== "number")
                    return "number: number expected";
            return null;
        };

        /**
         * Creates a GiftInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.GiftInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.GiftInfo} GiftInfo
         */
        GiftInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.GiftInfo)
                return object;
            var message = new $root.CVP.GiftInfo();
            switch (object.valueType) {
            case "COIN":
            case 0:
                message.valueType = 0;
                break;
            case "DIAMOND":
            case 1:
                message.valueType = 1;
                break;
            case "VAULT_KEY":
            case 2:
                message.valueType = 2;
                break;
            case "SCRATCH_CARD":
            case 3:
                message.valueType = 3;
                break;
            case "MOMENTS":
            case 4:
                message.valueType = 4;
                break;
            case "VIP_EXP":
            case 5:
                message.valueType = 5;
                break;
            case "MASTER_LICENCE":
            case 6:
                message.valueType = 6;
                break;
            }
            if (object.number != null)
                message.number = Number(object.number);
            return message;
        };

        /**
         * Creates a plain object from a GiftInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.GiftInfo
         * @static
         * @param {CVP.GiftInfo} message GiftInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GiftInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.valueType = options.enums === String ? "COIN" : 0;
                object.number = 0;
            }
            if (message.valueType != null && message.hasOwnProperty("valueType"))
                object.valueType = options.enums === String ? $root.CVP.ValueType[message.valueType] : message.valueType;
            if (message.number != null && message.hasOwnProperty("number"))
                object.number = options.json && !isFinite(message.number) ? String(message.number) : message.number;
            return object;
        };

        /**
         * Converts this GiftInfo to JSON.
         * @function toJSON
         * @memberof CVP.GiftInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GiftInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GiftInfo;
    })();

    CVP.RequestDelleteAllMail = (function() {

        /**
         * Properties of a RequestDelleteAllMail.
         * @memberof CVP
         * @interface IRequestDelleteAllMail
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestDelleteAllMail commonParams
         */

        /**
         * Constructs a new RequestDelleteAllMail.
         * @memberof CVP
         * @classdesc Represents a RequestDelleteAllMail.
         * @implements IRequestDelleteAllMail
         * @constructor
         * @param {CVP.IRequestDelleteAllMail=} [properties] Properties to set
         */
        function RequestDelleteAllMail(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDelleteAllMail commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestDelleteAllMail
         * @instance
         */
        RequestDelleteAllMail.prototype.commonParams = null;

        /**
         * Creates a new RequestDelleteAllMail instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDelleteAllMail
         * @static
         * @param {CVP.IRequestDelleteAllMail=} [properties] Properties to set
         * @returns {CVP.RequestDelleteAllMail} RequestDelleteAllMail instance
         */
        RequestDelleteAllMail.create = function create(properties) {
            return new RequestDelleteAllMail(properties);
        };

        /**
         * Encodes the specified RequestDelleteAllMail message. Does not implicitly {@link CVP.RequestDelleteAllMail.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDelleteAllMail
         * @static
         * @param {CVP.IRequestDelleteAllMail} message RequestDelleteAllMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDelleteAllMail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestDelleteAllMail message, length delimited. Does not implicitly {@link CVP.RequestDelleteAllMail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDelleteAllMail
         * @static
         * @param {CVP.IRequestDelleteAllMail} message RequestDelleteAllMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDelleteAllMail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDelleteAllMail message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDelleteAllMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDelleteAllMail} RequestDelleteAllMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDelleteAllMail.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDelleteAllMail();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDelleteAllMail message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDelleteAllMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDelleteAllMail} RequestDelleteAllMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDelleteAllMail.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDelleteAllMail message.
         * @function verify
         * @memberof CVP.RequestDelleteAllMail
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDelleteAllMail.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestDelleteAllMail message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDelleteAllMail
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDelleteAllMail} RequestDelleteAllMail
         */
        RequestDelleteAllMail.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDelleteAllMail)
                return object;
            var message = new $root.CVP.RequestDelleteAllMail();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestDelleteAllMail.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestDelleteAllMail message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDelleteAllMail
         * @static
         * @param {CVP.RequestDelleteAllMail} message RequestDelleteAllMail
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDelleteAllMail.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestDelleteAllMail to JSON.
         * @function toJSON
         * @memberof CVP.RequestDelleteAllMail
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDelleteAllMail.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDelleteAllMail;
    })();

    CVP.RequestDelleteAllMailResult = (function() {

        /**
         * Properties of a RequestDelleteAllMailResult.
         * @memberof CVP
         * @interface IRequestDelleteAllMailResult
         */

        /**
         * Constructs a new RequestDelleteAllMailResult.
         * @memberof CVP
         * @classdesc Represents a RequestDelleteAllMailResult.
         * @implements IRequestDelleteAllMailResult
         * @constructor
         * @param {CVP.IRequestDelleteAllMailResult=} [properties] Properties to set
         */
        function RequestDelleteAllMailResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new RequestDelleteAllMailResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDelleteAllMailResult
         * @static
         * @param {CVP.IRequestDelleteAllMailResult=} [properties] Properties to set
         * @returns {CVP.RequestDelleteAllMailResult} RequestDelleteAllMailResult instance
         */
        RequestDelleteAllMailResult.create = function create(properties) {
            return new RequestDelleteAllMailResult(properties);
        };

        /**
         * Encodes the specified RequestDelleteAllMailResult message. Does not implicitly {@link CVP.RequestDelleteAllMailResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDelleteAllMailResult
         * @static
         * @param {CVP.IRequestDelleteAllMailResult} message RequestDelleteAllMailResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDelleteAllMailResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified RequestDelleteAllMailResult message, length delimited. Does not implicitly {@link CVP.RequestDelleteAllMailResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDelleteAllMailResult
         * @static
         * @param {CVP.IRequestDelleteAllMailResult} message RequestDelleteAllMailResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDelleteAllMailResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDelleteAllMailResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDelleteAllMailResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDelleteAllMailResult} RequestDelleteAllMailResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDelleteAllMailResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDelleteAllMailResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDelleteAllMailResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDelleteAllMailResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDelleteAllMailResult} RequestDelleteAllMailResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDelleteAllMailResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDelleteAllMailResult message.
         * @function verify
         * @memberof CVP.RequestDelleteAllMailResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDelleteAllMailResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a RequestDelleteAllMailResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDelleteAllMailResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDelleteAllMailResult} RequestDelleteAllMailResult
         */
        RequestDelleteAllMailResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDelleteAllMailResult)
                return object;
            return new $root.CVP.RequestDelleteAllMailResult();
        };

        /**
         * Creates a plain object from a RequestDelleteAllMailResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDelleteAllMailResult
         * @static
         * @param {CVP.RequestDelleteAllMailResult} message RequestDelleteAllMailResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDelleteAllMailResult.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this RequestDelleteAllMailResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestDelleteAllMailResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDelleteAllMailResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDelleteAllMailResult;
    })();

    CVP.SendReadMail = (function() {

        /**
         * Properties of a SendReadMail.
         * @memberof CVP
         * @interface ISendReadMail
         * @property {number|null} [mailID] SendReadMail mailID
         */

        /**
         * Constructs a new SendReadMail.
         * @memberof CVP
         * @classdesc Represents a SendReadMail.
         * @implements ISendReadMail
         * @constructor
         * @param {CVP.ISendReadMail=} [properties] Properties to set
         */
        function SendReadMail(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendReadMail mailID.
         * @member {number} mailID
         * @memberof CVP.SendReadMail
         * @instance
         */
        SendReadMail.prototype.mailID = 0;

        /**
         * Creates a new SendReadMail instance using the specified properties.
         * @function create
         * @memberof CVP.SendReadMail
         * @static
         * @param {CVP.ISendReadMail=} [properties] Properties to set
         * @returns {CVP.SendReadMail} SendReadMail instance
         */
        SendReadMail.create = function create(properties) {
            return new SendReadMail(properties);
        };

        /**
         * Encodes the specified SendReadMail message. Does not implicitly {@link CVP.SendReadMail.verify|verify} messages.
         * @function encode
         * @memberof CVP.SendReadMail
         * @static
         * @param {CVP.ISendReadMail} message SendReadMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendReadMail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mailID != null && message.hasOwnProperty("mailID"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mailID);
            return writer;
        };

        /**
         * Encodes the specified SendReadMail message, length delimited. Does not implicitly {@link CVP.SendReadMail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SendReadMail
         * @static
         * @param {CVP.ISendReadMail} message SendReadMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendReadMail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendReadMail message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SendReadMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SendReadMail} SendReadMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendReadMail.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SendReadMail();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mailID = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendReadMail message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SendReadMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SendReadMail} SendReadMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendReadMail.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendReadMail message.
         * @function verify
         * @memberof CVP.SendReadMail
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendReadMail.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mailID != null && message.hasOwnProperty("mailID"))
                if (!$util.isInteger(message.mailID))
                    return "mailID: integer expected";
            return null;
        };

        /**
         * Creates a SendReadMail message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SendReadMail
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SendReadMail} SendReadMail
         */
        SendReadMail.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SendReadMail)
                return object;
            var message = new $root.CVP.SendReadMail();
            if (object.mailID != null)
                message.mailID = object.mailID | 0;
            return message;
        };

        /**
         * Creates a plain object from a SendReadMail message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SendReadMail
         * @static
         * @param {CVP.SendReadMail} message SendReadMail
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendReadMail.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.mailID = 0;
            if (message.mailID != null && message.hasOwnProperty("mailID"))
                object.mailID = message.mailID;
            return object;
        };

        /**
         * Converts this SendReadMail to JSON.
         * @function toJSON
         * @memberof CVP.SendReadMail
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendReadMail.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendReadMail;
    })();

    CVP.UpdateMail = (function() {

        /**
         * Properties of an UpdateMail.
         * @memberof CVP
         * @interface IUpdateMail
         * @property {number|null} [mailNumber] UpdateMail mailNumber
         */

        /**
         * Constructs a new UpdateMail.
         * @memberof CVP
         * @classdesc Represents an UpdateMail.
         * @implements IUpdateMail
         * @constructor
         * @param {CVP.IUpdateMail=} [properties] Properties to set
         */
        function UpdateMail(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdateMail mailNumber.
         * @member {number} mailNumber
         * @memberof CVP.UpdateMail
         * @instance
         */
        UpdateMail.prototype.mailNumber = 0;

        /**
         * Creates a new UpdateMail instance using the specified properties.
         * @function create
         * @memberof CVP.UpdateMail
         * @static
         * @param {CVP.IUpdateMail=} [properties] Properties to set
         * @returns {CVP.UpdateMail} UpdateMail instance
         */
        UpdateMail.create = function create(properties) {
            return new UpdateMail(properties);
        };

        /**
         * Encodes the specified UpdateMail message. Does not implicitly {@link CVP.UpdateMail.verify|verify} messages.
         * @function encode
         * @memberof CVP.UpdateMail
         * @static
         * @param {CVP.IUpdateMail} message UpdateMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateMail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mailNumber != null && message.hasOwnProperty("mailNumber"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mailNumber);
            return writer;
        };

        /**
         * Encodes the specified UpdateMail message, length delimited. Does not implicitly {@link CVP.UpdateMail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UpdateMail
         * @static
         * @param {CVP.IUpdateMail} message UpdateMail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateMail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdateMail message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UpdateMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UpdateMail} UpdateMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateMail.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UpdateMail();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mailNumber = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdateMail message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UpdateMail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UpdateMail} UpdateMail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateMail.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdateMail message.
         * @function verify
         * @memberof CVP.UpdateMail
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdateMail.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mailNumber != null && message.hasOwnProperty("mailNumber"))
                if (!$util.isInteger(message.mailNumber))
                    return "mailNumber: integer expected";
            return null;
        };

        /**
         * Creates an UpdateMail message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UpdateMail
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UpdateMail} UpdateMail
         */
        UpdateMail.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UpdateMail)
                return object;
            var message = new $root.CVP.UpdateMail();
            if (object.mailNumber != null)
                message.mailNumber = object.mailNumber | 0;
            return message;
        };

        /**
         * Creates a plain object from an UpdateMail message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UpdateMail
         * @static
         * @param {CVP.UpdateMail} message UpdateMail
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdateMail.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.mailNumber = 0;
            if (message.mailNumber != null && message.hasOwnProperty("mailNumber"))
                object.mailNumber = message.mailNumber;
            return object;
        };

        /**
         * Converts this UpdateMail to JSON.
         * @function toJSON
         * @memberof CVP.UpdateMail
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdateMail.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateMail;
    })();

    CVP.addMailResult = (function() {

        /**
         * Properties of an addMailResult.
         * @memberof CVP
         * @interface IaddMailResult
         * @property {number|null} [inboxNumber] addMailResult inboxNumber
         * @property {number|null} [userId] addMailResult userId
         */

        /**
         * Constructs a new addMailResult.
         * @memberof CVP
         * @classdesc Represents an addMailResult.
         * @implements IaddMailResult
         * @constructor
         * @param {CVP.IaddMailResult=} [properties] Properties to set
         */
        function addMailResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * addMailResult inboxNumber.
         * @member {number} inboxNumber
         * @memberof CVP.addMailResult
         * @instance
         */
        addMailResult.prototype.inboxNumber = 0;

        /**
         * addMailResult userId.
         * @member {number} userId
         * @memberof CVP.addMailResult
         * @instance
         */
        addMailResult.prototype.userId = 0;

        /**
         * Creates a new addMailResult instance using the specified properties.
         * @function create
         * @memberof CVP.addMailResult
         * @static
         * @param {CVP.IaddMailResult=} [properties] Properties to set
         * @returns {CVP.addMailResult} addMailResult instance
         */
        addMailResult.create = function create(properties) {
            return new addMailResult(properties);
        };

        /**
         * Encodes the specified addMailResult message. Does not implicitly {@link CVP.addMailResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.addMailResult
         * @static
         * @param {CVP.IaddMailResult} message addMailResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addMailResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.inboxNumber != null && message.hasOwnProperty("inboxNumber"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.inboxNumber);
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            return writer;
        };

        /**
         * Encodes the specified addMailResult message, length delimited. Does not implicitly {@link CVP.addMailResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.addMailResult
         * @static
         * @param {CVP.IaddMailResult} message addMailResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        addMailResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an addMailResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.addMailResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.addMailResult} addMailResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        addMailResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.addMailResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.inboxNumber = reader.int32();
                    break;
                case 2:
                    message.userId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an addMailResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.addMailResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.addMailResult} addMailResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        addMailResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an addMailResult message.
         * @function verify
         * @memberof CVP.addMailResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        addMailResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.inboxNumber != null && message.hasOwnProperty("inboxNumber"))
                if (!$util.isInteger(message.inboxNumber))
                    return "inboxNumber: integer expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            return null;
        };

        /**
         * Creates an addMailResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.addMailResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.addMailResult} addMailResult
         */
        addMailResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.addMailResult)
                return object;
            var message = new $root.CVP.addMailResult();
            if (object.inboxNumber != null)
                message.inboxNumber = object.inboxNumber | 0;
            if (object.userId != null)
                message.userId = object.userId | 0;
            return message;
        };

        /**
         * Creates a plain object from an addMailResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.addMailResult
         * @static
         * @param {CVP.addMailResult} message addMailResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        addMailResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.inboxNumber = 0;
                object.userId = 0;
            }
            if (message.inboxNumber != null && message.hasOwnProperty("inboxNumber"))
                object.inboxNumber = message.inboxNumber;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            return object;
        };

        /**
         * Converts this addMailResult to JSON.
         * @function toJSON
         * @memberof CVP.addMailResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        addMailResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return addMailResult;
    })();

    CVP.deeplink = (function() {

        /**
         * Properties of a deeplink.
         * @memberof CVP
         * @interface Ideeplink
         * @property {number|null} [stardUserID] deeplink stardUserID
         * @property {number|null} [endUserID] deeplink endUserID
         * @property {number|null} [coins] deeplink coins
         * @property {number|null} [scratchCards] deeplink scratchCards
         * @property {number|null} [subscriptionPeriod] deeplink subscriptionPeriod
         * @property {string|null} [startDate] deeplink startDate
         * @property {string|null} [endDate] deeplink endDate
         * @property {number|null} [claimRestriction] deeplink claimRestriction
         * @property {number|null} [generateNum] deeplink generateNum
         * @property {number|null} [period] deeplink period
         */

        /**
         * Constructs a new deeplink.
         * @memberof CVP
         * @classdesc Represents a deeplink.
         * @implements Ideeplink
         * @constructor
         * @param {CVP.Ideeplink=} [properties] Properties to set
         */
        function deeplink(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * deeplink stardUserID.
         * @member {number} stardUserID
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.stardUserID = 0;

        /**
         * deeplink endUserID.
         * @member {number} endUserID
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.endUserID = 0;

        /**
         * deeplink coins.
         * @member {number} coins
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.coins = 0;

        /**
         * deeplink scratchCards.
         * @member {number} scratchCards
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.scratchCards = 0;

        /**
         * deeplink subscriptionPeriod.
         * @member {number} subscriptionPeriod
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.subscriptionPeriod = 0;

        /**
         * deeplink startDate.
         * @member {string} startDate
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.startDate = "";

        /**
         * deeplink endDate.
         * @member {string} endDate
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.endDate = "";

        /**
         * deeplink claimRestriction.
         * @member {number} claimRestriction
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.claimRestriction = 0;

        /**
         * deeplink generateNum.
         * @member {number} generateNum
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.generateNum = 0;

        /**
         * deeplink period.
         * @member {number} period
         * @memberof CVP.deeplink
         * @instance
         */
        deeplink.prototype.period = 0;

        /**
         * Creates a new deeplink instance using the specified properties.
         * @function create
         * @memberof CVP.deeplink
         * @static
         * @param {CVP.Ideeplink=} [properties] Properties to set
         * @returns {CVP.deeplink} deeplink instance
         */
        deeplink.create = function create(properties) {
            return new deeplink(properties);
        };

        /**
         * Encodes the specified deeplink message. Does not implicitly {@link CVP.deeplink.verify|verify} messages.
         * @function encode
         * @memberof CVP.deeplink
         * @static
         * @param {CVP.Ideeplink} message deeplink message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        deeplink.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.stardUserID != null && message.hasOwnProperty("stardUserID"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.stardUserID);
            if (message.endUserID != null && message.hasOwnProperty("endUserID"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.endUserID);
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.coins);
            if (message.scratchCards != null && message.hasOwnProperty("scratchCards"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.scratchCards);
            if (message.subscriptionPeriod != null && message.hasOwnProperty("subscriptionPeriod"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.subscriptionPeriod);
            if (message.startDate != null && message.hasOwnProperty("startDate"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.startDate);
            if (message.endDate != null && message.hasOwnProperty("endDate"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.endDate);
            if (message.claimRestriction != null && message.hasOwnProperty("claimRestriction"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.claimRestriction);
            if (message.generateNum != null && message.hasOwnProperty("generateNum"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.generateNum);
            if (message.period != null && message.hasOwnProperty("period"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.period);
            return writer;
        };

        /**
         * Encodes the specified deeplink message, length delimited. Does not implicitly {@link CVP.deeplink.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.deeplink
         * @static
         * @param {CVP.Ideeplink} message deeplink message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        deeplink.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a deeplink message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.deeplink
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.deeplink} deeplink
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        deeplink.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.deeplink();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.stardUserID = reader.int32();
                    break;
                case 2:
                    message.endUserID = reader.int32();
                    break;
                case 3:
                    message.coins = reader.int32();
                    break;
                case 4:
                    message.scratchCards = reader.int32();
                    break;
                case 5:
                    message.subscriptionPeriod = reader.int32();
                    break;
                case 6:
                    message.startDate = reader.string();
                    break;
                case 7:
                    message.endDate = reader.string();
                    break;
                case 8:
                    message.claimRestriction = reader.int32();
                    break;
                case 9:
                    message.generateNum = reader.int32();
                    break;
                case 10:
                    message.period = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a deeplink message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.deeplink
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.deeplink} deeplink
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        deeplink.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a deeplink message.
         * @function verify
         * @memberof CVP.deeplink
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        deeplink.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.stardUserID != null && message.hasOwnProperty("stardUserID"))
                if (!$util.isInteger(message.stardUserID))
                    return "stardUserID: integer expected";
            if (message.endUserID != null && message.hasOwnProperty("endUserID"))
                if (!$util.isInteger(message.endUserID))
                    return "endUserID: integer expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (!$util.isInteger(message.coins))
                    return "coins: integer expected";
            if (message.scratchCards != null && message.hasOwnProperty("scratchCards"))
                if (!$util.isInteger(message.scratchCards))
                    return "scratchCards: integer expected";
            if (message.subscriptionPeriod != null && message.hasOwnProperty("subscriptionPeriod"))
                if (!$util.isInteger(message.subscriptionPeriod))
                    return "subscriptionPeriod: integer expected";
            if (message.startDate != null && message.hasOwnProperty("startDate"))
                if (!$util.isString(message.startDate))
                    return "startDate: string expected";
            if (message.endDate != null && message.hasOwnProperty("endDate"))
                if (!$util.isString(message.endDate))
                    return "endDate: string expected";
            if (message.claimRestriction != null && message.hasOwnProperty("claimRestriction"))
                if (!$util.isInteger(message.claimRestriction))
                    return "claimRestriction: integer expected";
            if (message.generateNum != null && message.hasOwnProperty("generateNum"))
                if (!$util.isInteger(message.generateNum))
                    return "generateNum: integer expected";
            if (message.period != null && message.hasOwnProperty("period"))
                if (!$util.isInteger(message.period))
                    return "period: integer expected";
            return null;
        };

        /**
         * Creates a deeplink message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.deeplink
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.deeplink} deeplink
         */
        deeplink.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.deeplink)
                return object;
            var message = new $root.CVP.deeplink();
            if (object.stardUserID != null)
                message.stardUserID = object.stardUserID | 0;
            if (object.endUserID != null)
                message.endUserID = object.endUserID | 0;
            if (object.coins != null)
                message.coins = object.coins | 0;
            if (object.scratchCards != null)
                message.scratchCards = object.scratchCards | 0;
            if (object.subscriptionPeriod != null)
                message.subscriptionPeriod = object.subscriptionPeriod | 0;
            if (object.startDate != null)
                message.startDate = String(object.startDate);
            if (object.endDate != null)
                message.endDate = String(object.endDate);
            if (object.claimRestriction != null)
                message.claimRestriction = object.claimRestriction | 0;
            if (object.generateNum != null)
                message.generateNum = object.generateNum | 0;
            if (object.period != null)
                message.period = object.period | 0;
            return message;
        };

        /**
         * Creates a plain object from a deeplink message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.deeplink
         * @static
         * @param {CVP.deeplink} message deeplink
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        deeplink.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.stardUserID = 0;
                object.endUserID = 0;
                object.coins = 0;
                object.scratchCards = 0;
                object.subscriptionPeriod = 0;
                object.startDate = "";
                object.endDate = "";
                object.claimRestriction = 0;
                object.generateNum = 0;
                object.period = 0;
            }
            if (message.stardUserID != null && message.hasOwnProperty("stardUserID"))
                object.stardUserID = message.stardUserID;
            if (message.endUserID != null && message.hasOwnProperty("endUserID"))
                object.endUserID = message.endUserID;
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = message.coins;
            if (message.scratchCards != null && message.hasOwnProperty("scratchCards"))
                object.scratchCards = message.scratchCards;
            if (message.subscriptionPeriod != null && message.hasOwnProperty("subscriptionPeriod"))
                object.subscriptionPeriod = message.subscriptionPeriod;
            if (message.startDate != null && message.hasOwnProperty("startDate"))
                object.startDate = message.startDate;
            if (message.endDate != null && message.hasOwnProperty("endDate"))
                object.endDate = message.endDate;
            if (message.claimRestriction != null && message.hasOwnProperty("claimRestriction"))
                object.claimRestriction = message.claimRestriction;
            if (message.generateNum != null && message.hasOwnProperty("generateNum"))
                object.generateNum = message.generateNum;
            if (message.period != null && message.hasOwnProperty("period"))
                object.period = message.period;
            return object;
        };

        /**
         * Converts this deeplink to JSON.
         * @function toJSON
         * @memberof CVP.deeplink
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        deeplink.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return deeplink;
    })();

    CVP.RequestLevelLeaderboard = (function() {

        /**
         * Properties of a RequestLevelLeaderboard.
         * @memberof CVP
         * @interface IRequestLevelLeaderboard
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestLevelLeaderboard commonParams
         * @property {number|null} [limit] RequestLevelLeaderboard limit
         */

        /**
         * Constructs a new RequestLevelLeaderboard.
         * @memberof CVP
         * @classdesc Represents a RequestLevelLeaderboard.
         * @implements IRequestLevelLeaderboard
         * @constructor
         * @param {CVP.IRequestLevelLeaderboard=} [properties] Properties to set
         */
        function RequestLevelLeaderboard(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestLevelLeaderboard commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestLevelLeaderboard
         * @instance
         */
        RequestLevelLeaderboard.prototype.commonParams = null;

        /**
         * RequestLevelLeaderboard limit.
         * @member {number} limit
         * @memberof CVP.RequestLevelLeaderboard
         * @instance
         */
        RequestLevelLeaderboard.prototype.limit = 0;

        /**
         * Creates a new RequestLevelLeaderboard instance using the specified properties.
         * @function create
         * @memberof CVP.RequestLevelLeaderboard
         * @static
         * @param {CVP.IRequestLevelLeaderboard=} [properties] Properties to set
         * @returns {CVP.RequestLevelLeaderboard} RequestLevelLeaderboard instance
         */
        RequestLevelLeaderboard.create = function create(properties) {
            return new RequestLevelLeaderboard(properties);
        };

        /**
         * Encodes the specified RequestLevelLeaderboard message. Does not implicitly {@link CVP.RequestLevelLeaderboard.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestLevelLeaderboard
         * @static
         * @param {CVP.IRequestLevelLeaderboard} message RequestLevelLeaderboard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLevelLeaderboard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.limit != null && message.hasOwnProperty("limit"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.limit);
            return writer;
        };

        /**
         * Encodes the specified RequestLevelLeaderboard message, length delimited. Does not implicitly {@link CVP.RequestLevelLeaderboard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestLevelLeaderboard
         * @static
         * @param {CVP.IRequestLevelLeaderboard} message RequestLevelLeaderboard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLevelLeaderboard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestLevelLeaderboard message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestLevelLeaderboard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestLevelLeaderboard} RequestLevelLeaderboard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLevelLeaderboard.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestLevelLeaderboard();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.limit = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestLevelLeaderboard message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestLevelLeaderboard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestLevelLeaderboard} RequestLevelLeaderboard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLevelLeaderboard.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestLevelLeaderboard message.
         * @function verify
         * @memberof CVP.RequestLevelLeaderboard
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestLevelLeaderboard.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.limit != null && message.hasOwnProperty("limit"))
                if (!$util.isInteger(message.limit))
                    return "limit: integer expected";
            return null;
        };

        /**
         * Creates a RequestLevelLeaderboard message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestLevelLeaderboard
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestLevelLeaderboard} RequestLevelLeaderboard
         */
        RequestLevelLeaderboard.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestLevelLeaderboard)
                return object;
            var message = new $root.CVP.RequestLevelLeaderboard();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestLevelLeaderboard.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.limit != null)
                message.limit = object.limit | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestLevelLeaderboard message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestLevelLeaderboard
         * @static
         * @param {CVP.RequestLevelLeaderboard} message RequestLevelLeaderboard
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestLevelLeaderboard.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.limit = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.limit != null && message.hasOwnProperty("limit"))
                object.limit = message.limit;
            return object;
        };

        /**
         * Converts this RequestLevelLeaderboard to JSON.
         * @function toJSON
         * @memberof CVP.RequestLevelLeaderboard
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestLevelLeaderboard.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLevelLeaderboard;
    })();

    CVP.ResultLevelLeaderboard = (function() {

        /**
         * Properties of a ResultLevelLeaderboard.
         * @memberof CVP
         * @interface IResultLevelLeaderboard
         * @property {Array.<CVP.ILevelLeaderboardInfo>|null} [levelLeaderboardInfoList] ResultLevelLeaderboard levelLeaderboardInfoList
         * @property {CVP.ILevelLeaderboardInfo|null} [ownLevelInfo] ResultLevelLeaderboard ownLevelInfo
         * @property {number|null} [time] ResultLevelLeaderboard time
         */

        /**
         * Constructs a new ResultLevelLeaderboard.
         * @memberof CVP
         * @classdesc Represents a ResultLevelLeaderboard.
         * @implements IResultLevelLeaderboard
         * @constructor
         * @param {CVP.IResultLevelLeaderboard=} [properties] Properties to set
         */
        function ResultLevelLeaderboard(properties) {
            this.levelLeaderboardInfoList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ResultLevelLeaderboard levelLeaderboardInfoList.
         * @member {Array.<CVP.ILevelLeaderboardInfo>} levelLeaderboardInfoList
         * @memberof CVP.ResultLevelLeaderboard
         * @instance
         */
        ResultLevelLeaderboard.prototype.levelLeaderboardInfoList = $util.emptyArray;

        /**
         * ResultLevelLeaderboard ownLevelInfo.
         * @member {CVP.ILevelLeaderboardInfo|null|undefined} ownLevelInfo
         * @memberof CVP.ResultLevelLeaderboard
         * @instance
         */
        ResultLevelLeaderboard.prototype.ownLevelInfo = null;

        /**
         * ResultLevelLeaderboard time.
         * @member {number} time
         * @memberof CVP.ResultLevelLeaderboard
         * @instance
         */
        ResultLevelLeaderboard.prototype.time = 0;

        /**
         * Creates a new ResultLevelLeaderboard instance using the specified properties.
         * @function create
         * @memberof CVP.ResultLevelLeaderboard
         * @static
         * @param {CVP.IResultLevelLeaderboard=} [properties] Properties to set
         * @returns {CVP.ResultLevelLeaderboard} ResultLevelLeaderboard instance
         */
        ResultLevelLeaderboard.create = function create(properties) {
            return new ResultLevelLeaderboard(properties);
        };

        /**
         * Encodes the specified ResultLevelLeaderboard message. Does not implicitly {@link CVP.ResultLevelLeaderboard.verify|verify} messages.
         * @function encode
         * @memberof CVP.ResultLevelLeaderboard
         * @static
         * @param {CVP.IResultLevelLeaderboard} message ResultLevelLeaderboard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResultLevelLeaderboard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.levelLeaderboardInfoList != null && message.levelLeaderboardInfoList.length)
                for (var i = 0; i < message.levelLeaderboardInfoList.length; ++i)
                    $root.CVP.LevelLeaderboardInfo.encode(message.levelLeaderboardInfoList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ownLevelInfo != null && message.hasOwnProperty("ownLevelInfo"))
                $root.CVP.LevelLeaderboardInfo.encode(message.ownLevelInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.time);
            return writer;
        };

        /**
         * Encodes the specified ResultLevelLeaderboard message, length delimited. Does not implicitly {@link CVP.ResultLevelLeaderboard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.ResultLevelLeaderboard
         * @static
         * @param {CVP.IResultLevelLeaderboard} message ResultLevelLeaderboard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResultLevelLeaderboard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ResultLevelLeaderboard message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.ResultLevelLeaderboard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.ResultLevelLeaderboard} ResultLevelLeaderboard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResultLevelLeaderboard.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.ResultLevelLeaderboard();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.levelLeaderboardInfoList && message.levelLeaderboardInfoList.length))
                        message.levelLeaderboardInfoList = [];
                    message.levelLeaderboardInfoList.push($root.CVP.LevelLeaderboardInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.ownLevelInfo = $root.CVP.LevelLeaderboardInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.time = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ResultLevelLeaderboard message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.ResultLevelLeaderboard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.ResultLevelLeaderboard} ResultLevelLeaderboard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResultLevelLeaderboard.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ResultLevelLeaderboard message.
         * @function verify
         * @memberof CVP.ResultLevelLeaderboard
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ResultLevelLeaderboard.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.levelLeaderboardInfoList != null && message.hasOwnProperty("levelLeaderboardInfoList")) {
                if (!Array.isArray(message.levelLeaderboardInfoList))
                    return "levelLeaderboardInfoList: array expected";
                for (var i = 0; i < message.levelLeaderboardInfoList.length; ++i) {
                    var error = $root.CVP.LevelLeaderboardInfo.verify(message.levelLeaderboardInfoList[i]);
                    if (error)
                        return "levelLeaderboardInfoList." + error;
                }
            }
            if (message.ownLevelInfo != null && message.hasOwnProperty("ownLevelInfo")) {
                var error = $root.CVP.LevelLeaderboardInfo.verify(message.ownLevelInfo);
                if (error)
                    return "ownLevelInfo." + error;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time))
                    return "time: integer expected";
            return null;
        };

        /**
         * Creates a ResultLevelLeaderboard message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.ResultLevelLeaderboard
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.ResultLevelLeaderboard} ResultLevelLeaderboard
         */
        ResultLevelLeaderboard.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.ResultLevelLeaderboard)
                return object;
            var message = new $root.CVP.ResultLevelLeaderboard();
            if (object.levelLeaderboardInfoList) {
                if (!Array.isArray(object.levelLeaderboardInfoList))
                    throw TypeError(".CVP.ResultLevelLeaderboard.levelLeaderboardInfoList: array expected");
                message.levelLeaderboardInfoList = [];
                for (var i = 0; i < object.levelLeaderboardInfoList.length; ++i) {
                    if (typeof object.levelLeaderboardInfoList[i] !== "object")
                        throw TypeError(".CVP.ResultLevelLeaderboard.levelLeaderboardInfoList: object expected");
                    message.levelLeaderboardInfoList[i] = $root.CVP.LevelLeaderboardInfo.fromObject(object.levelLeaderboardInfoList[i]);
                }
            }
            if (object.ownLevelInfo != null) {
                if (typeof object.ownLevelInfo !== "object")
                    throw TypeError(".CVP.ResultLevelLeaderboard.ownLevelInfo: object expected");
                message.ownLevelInfo = $root.CVP.LevelLeaderboardInfo.fromObject(object.ownLevelInfo);
            }
            if (object.time != null)
                message.time = object.time | 0;
            return message;
        };

        /**
         * Creates a plain object from a ResultLevelLeaderboard message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.ResultLevelLeaderboard
         * @static
         * @param {CVP.ResultLevelLeaderboard} message ResultLevelLeaderboard
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ResultLevelLeaderboard.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.levelLeaderboardInfoList = [];
            if (options.defaults) {
                object.ownLevelInfo = null;
                object.time = 0;
            }
            if (message.levelLeaderboardInfoList && message.levelLeaderboardInfoList.length) {
                object.levelLeaderboardInfoList = [];
                for (var j = 0; j < message.levelLeaderboardInfoList.length; ++j)
                    object.levelLeaderboardInfoList[j] = $root.CVP.LevelLeaderboardInfo.toObject(message.levelLeaderboardInfoList[j], options);
            }
            if (message.ownLevelInfo != null && message.hasOwnProperty("ownLevelInfo"))
                object.ownLevelInfo = $root.CVP.LevelLeaderboardInfo.toObject(message.ownLevelInfo, options);
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            return object;
        };

        /**
         * Converts this ResultLevelLeaderboard to JSON.
         * @function toJSON
         * @memberof CVP.ResultLevelLeaderboard
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ResultLevelLeaderboard.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResultLevelLeaderboard;
    })();

    CVP.LevelLeaderboardInfo = (function() {

        /**
         * Properties of a LevelLeaderboardInfo.
         * @memberof CVP
         * @interface ILevelLeaderboardInfo
         * @property {CVP.IUserInfo|null} [userInfo] LevelLeaderboardInfo userInfo
         */

        /**
         * Constructs a new LevelLeaderboardInfo.
         * @memberof CVP
         * @classdesc Represents a LevelLeaderboardInfo.
         * @implements ILevelLeaderboardInfo
         * @constructor
         * @param {CVP.ILevelLeaderboardInfo=} [properties] Properties to set
         */
        function LevelLeaderboardInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LevelLeaderboardInfo userInfo.
         * @member {CVP.IUserInfo|null|undefined} userInfo
         * @memberof CVP.LevelLeaderboardInfo
         * @instance
         */
        LevelLeaderboardInfo.prototype.userInfo = null;

        /**
         * Creates a new LevelLeaderboardInfo instance using the specified properties.
         * @function create
         * @memberof CVP.LevelLeaderboardInfo
         * @static
         * @param {CVP.ILevelLeaderboardInfo=} [properties] Properties to set
         * @returns {CVP.LevelLeaderboardInfo} LevelLeaderboardInfo instance
         */
        LevelLeaderboardInfo.create = function create(properties) {
            return new LevelLeaderboardInfo(properties);
        };

        /**
         * Encodes the specified LevelLeaderboardInfo message. Does not implicitly {@link CVP.LevelLeaderboardInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.LevelLeaderboardInfo
         * @static
         * @param {CVP.ILevelLeaderboardInfo} message LevelLeaderboardInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelLeaderboardInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userInfo != null && message.hasOwnProperty("userInfo"))
                $root.CVP.UserInfo.encode(message.userInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LevelLeaderboardInfo message, length delimited. Does not implicitly {@link CVP.LevelLeaderboardInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.LevelLeaderboardInfo
         * @static
         * @param {CVP.ILevelLeaderboardInfo} message LevelLeaderboardInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LevelLeaderboardInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LevelLeaderboardInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.LevelLeaderboardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.LevelLeaderboardInfo} LevelLeaderboardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelLeaderboardInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.LevelLeaderboardInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userInfo = $root.CVP.UserInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LevelLeaderboardInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.LevelLeaderboardInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.LevelLeaderboardInfo} LevelLeaderboardInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LevelLeaderboardInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LevelLeaderboardInfo message.
         * @function verify
         * @memberof CVP.LevelLeaderboardInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LevelLeaderboardInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userInfo != null && message.hasOwnProperty("userInfo")) {
                var error = $root.CVP.UserInfo.verify(message.userInfo);
                if (error)
                    return "userInfo." + error;
            }
            return null;
        };

        /**
         * Creates a LevelLeaderboardInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.LevelLeaderboardInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.LevelLeaderboardInfo} LevelLeaderboardInfo
         */
        LevelLeaderboardInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.LevelLeaderboardInfo)
                return object;
            var message = new $root.CVP.LevelLeaderboardInfo();
            if (object.userInfo != null) {
                if (typeof object.userInfo !== "object")
                    throw TypeError(".CVP.LevelLeaderboardInfo.userInfo: object expected");
                message.userInfo = $root.CVP.UserInfo.fromObject(object.userInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a LevelLeaderboardInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.LevelLeaderboardInfo
         * @static
         * @param {CVP.LevelLeaderboardInfo} message LevelLeaderboardInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LevelLeaderboardInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.userInfo = null;
            if (message.userInfo != null && message.hasOwnProperty("userInfo"))
                object.userInfo = $root.CVP.UserInfo.toObject(message.userInfo, options);
            return object;
        };

        /**
         * Converts this LevelLeaderboardInfo to JSON.
         * @function toJSON
         * @memberof CVP.LevelLeaderboardInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LevelLeaderboardInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LevelLeaderboardInfo;
    })();

    CVP.RequestDailyTopWinLeaderboard = (function() {

        /**
         * Properties of a RequestDailyTopWinLeaderboard.
         * @memberof CVP
         * @interface IRequestDailyTopWinLeaderboard
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestDailyTopWinLeaderboard commonParams
         * @property {number|null} [limit] RequestDailyTopWinLeaderboard limit
         */

        /**
         * Constructs a new RequestDailyTopWinLeaderboard.
         * @memberof CVP
         * @classdesc Represents a RequestDailyTopWinLeaderboard.
         * @implements IRequestDailyTopWinLeaderboard
         * @constructor
         * @param {CVP.IRequestDailyTopWinLeaderboard=} [properties] Properties to set
         */
        function RequestDailyTopWinLeaderboard(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestDailyTopWinLeaderboard commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @instance
         */
        RequestDailyTopWinLeaderboard.prototype.commonParams = null;

        /**
         * RequestDailyTopWinLeaderboard limit.
         * @member {number} limit
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @instance
         */
        RequestDailyTopWinLeaderboard.prototype.limit = 0;

        /**
         * Creates a new RequestDailyTopWinLeaderboard instance using the specified properties.
         * @function create
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @static
         * @param {CVP.IRequestDailyTopWinLeaderboard=} [properties] Properties to set
         * @returns {CVP.RequestDailyTopWinLeaderboard} RequestDailyTopWinLeaderboard instance
         */
        RequestDailyTopWinLeaderboard.create = function create(properties) {
            return new RequestDailyTopWinLeaderboard(properties);
        };

        /**
         * Encodes the specified RequestDailyTopWinLeaderboard message. Does not implicitly {@link CVP.RequestDailyTopWinLeaderboard.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @static
         * @param {CVP.IRequestDailyTopWinLeaderboard} message RequestDailyTopWinLeaderboard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDailyTopWinLeaderboard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.limit != null && message.hasOwnProperty("limit"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.limit);
            return writer;
        };

        /**
         * Encodes the specified RequestDailyTopWinLeaderboard message, length delimited. Does not implicitly {@link CVP.RequestDailyTopWinLeaderboard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @static
         * @param {CVP.IRequestDailyTopWinLeaderboard} message RequestDailyTopWinLeaderboard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestDailyTopWinLeaderboard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestDailyTopWinLeaderboard message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestDailyTopWinLeaderboard} RequestDailyTopWinLeaderboard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDailyTopWinLeaderboard.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestDailyTopWinLeaderboard();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.limit = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestDailyTopWinLeaderboard message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestDailyTopWinLeaderboard} RequestDailyTopWinLeaderboard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestDailyTopWinLeaderboard.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestDailyTopWinLeaderboard message.
         * @function verify
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestDailyTopWinLeaderboard.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.limit != null && message.hasOwnProperty("limit"))
                if (!$util.isInteger(message.limit))
                    return "limit: integer expected";
            return null;
        };

        /**
         * Creates a RequestDailyTopWinLeaderboard message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestDailyTopWinLeaderboard} RequestDailyTopWinLeaderboard
         */
        RequestDailyTopWinLeaderboard.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestDailyTopWinLeaderboard)
                return object;
            var message = new $root.CVP.RequestDailyTopWinLeaderboard();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestDailyTopWinLeaderboard.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.limit != null)
                message.limit = object.limit | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestDailyTopWinLeaderboard message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @static
         * @param {CVP.RequestDailyTopWinLeaderboard} message RequestDailyTopWinLeaderboard
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestDailyTopWinLeaderboard.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.limit = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.limit != null && message.hasOwnProperty("limit"))
                object.limit = message.limit;
            return object;
        };

        /**
         * Converts this RequestDailyTopWinLeaderboard to JSON.
         * @function toJSON
         * @memberof CVP.RequestDailyTopWinLeaderboard
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestDailyTopWinLeaderboard.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestDailyTopWinLeaderboard;
    })();

    CVP.ResultDailyTopWinLeaderboard = (function() {

        /**
         * Properties of a ResultDailyTopWinLeaderboard.
         * @memberof CVP
         * @interface IResultDailyTopWinLeaderboard
         * @property {Array.<CVP.IDailyTopWinInfo>|null} [dailyTopWinInfoList] ResultDailyTopWinLeaderboard dailyTopWinInfoList
         * @property {CVP.IDailyTopWinInfo|null} [ownDailyTopWinInfo] ResultDailyTopWinLeaderboard ownDailyTopWinInfo
         * @property {number|null} [time] ResultDailyTopWinLeaderboard time
         */

        /**
         * Constructs a new ResultDailyTopWinLeaderboard.
         * @memberof CVP
         * @classdesc Represents a ResultDailyTopWinLeaderboard.
         * @implements IResultDailyTopWinLeaderboard
         * @constructor
         * @param {CVP.IResultDailyTopWinLeaderboard=} [properties] Properties to set
         */
        function ResultDailyTopWinLeaderboard(properties) {
            this.dailyTopWinInfoList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ResultDailyTopWinLeaderboard dailyTopWinInfoList.
         * @member {Array.<CVP.IDailyTopWinInfo>} dailyTopWinInfoList
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @instance
         */
        ResultDailyTopWinLeaderboard.prototype.dailyTopWinInfoList = $util.emptyArray;

        /**
         * ResultDailyTopWinLeaderboard ownDailyTopWinInfo.
         * @member {CVP.IDailyTopWinInfo|null|undefined} ownDailyTopWinInfo
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @instance
         */
        ResultDailyTopWinLeaderboard.prototype.ownDailyTopWinInfo = null;

        /**
         * ResultDailyTopWinLeaderboard time.
         * @member {number} time
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @instance
         */
        ResultDailyTopWinLeaderboard.prototype.time = 0;

        /**
         * Creates a new ResultDailyTopWinLeaderboard instance using the specified properties.
         * @function create
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @static
         * @param {CVP.IResultDailyTopWinLeaderboard=} [properties] Properties to set
         * @returns {CVP.ResultDailyTopWinLeaderboard} ResultDailyTopWinLeaderboard instance
         */
        ResultDailyTopWinLeaderboard.create = function create(properties) {
            return new ResultDailyTopWinLeaderboard(properties);
        };

        /**
         * Encodes the specified ResultDailyTopWinLeaderboard message. Does not implicitly {@link CVP.ResultDailyTopWinLeaderboard.verify|verify} messages.
         * @function encode
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @static
         * @param {CVP.IResultDailyTopWinLeaderboard} message ResultDailyTopWinLeaderboard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResultDailyTopWinLeaderboard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.dailyTopWinInfoList != null && message.dailyTopWinInfoList.length)
                for (var i = 0; i < message.dailyTopWinInfoList.length; ++i)
                    $root.CVP.DailyTopWinInfo.encode(message.dailyTopWinInfoList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ownDailyTopWinInfo != null && message.hasOwnProperty("ownDailyTopWinInfo"))
                $root.CVP.DailyTopWinInfo.encode(message.ownDailyTopWinInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.time);
            return writer;
        };

        /**
         * Encodes the specified ResultDailyTopWinLeaderboard message, length delimited. Does not implicitly {@link CVP.ResultDailyTopWinLeaderboard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @static
         * @param {CVP.IResultDailyTopWinLeaderboard} message ResultDailyTopWinLeaderboard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResultDailyTopWinLeaderboard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ResultDailyTopWinLeaderboard message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.ResultDailyTopWinLeaderboard} ResultDailyTopWinLeaderboard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResultDailyTopWinLeaderboard.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.ResultDailyTopWinLeaderboard();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.dailyTopWinInfoList && message.dailyTopWinInfoList.length))
                        message.dailyTopWinInfoList = [];
                    message.dailyTopWinInfoList.push($root.CVP.DailyTopWinInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.ownDailyTopWinInfo = $root.CVP.DailyTopWinInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.time = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ResultDailyTopWinLeaderboard message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.ResultDailyTopWinLeaderboard} ResultDailyTopWinLeaderboard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResultDailyTopWinLeaderboard.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ResultDailyTopWinLeaderboard message.
         * @function verify
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ResultDailyTopWinLeaderboard.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.dailyTopWinInfoList != null && message.hasOwnProperty("dailyTopWinInfoList")) {
                if (!Array.isArray(message.dailyTopWinInfoList))
                    return "dailyTopWinInfoList: array expected";
                for (var i = 0; i < message.dailyTopWinInfoList.length; ++i) {
                    var error = $root.CVP.DailyTopWinInfo.verify(message.dailyTopWinInfoList[i]);
                    if (error)
                        return "dailyTopWinInfoList." + error;
                }
            }
            if (message.ownDailyTopWinInfo != null && message.hasOwnProperty("ownDailyTopWinInfo")) {
                var error = $root.CVP.DailyTopWinInfo.verify(message.ownDailyTopWinInfo);
                if (error)
                    return "ownDailyTopWinInfo." + error;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time))
                    return "time: integer expected";
            return null;
        };

        /**
         * Creates a ResultDailyTopWinLeaderboard message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.ResultDailyTopWinLeaderboard} ResultDailyTopWinLeaderboard
         */
        ResultDailyTopWinLeaderboard.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.ResultDailyTopWinLeaderboard)
                return object;
            var message = new $root.CVP.ResultDailyTopWinLeaderboard();
            if (object.dailyTopWinInfoList) {
                if (!Array.isArray(object.dailyTopWinInfoList))
                    throw TypeError(".CVP.ResultDailyTopWinLeaderboard.dailyTopWinInfoList: array expected");
                message.dailyTopWinInfoList = [];
                for (var i = 0; i < object.dailyTopWinInfoList.length; ++i) {
                    if (typeof object.dailyTopWinInfoList[i] !== "object")
                        throw TypeError(".CVP.ResultDailyTopWinLeaderboard.dailyTopWinInfoList: object expected");
                    message.dailyTopWinInfoList[i] = $root.CVP.DailyTopWinInfo.fromObject(object.dailyTopWinInfoList[i]);
                }
            }
            if (object.ownDailyTopWinInfo != null) {
                if (typeof object.ownDailyTopWinInfo !== "object")
                    throw TypeError(".CVP.ResultDailyTopWinLeaderboard.ownDailyTopWinInfo: object expected");
                message.ownDailyTopWinInfo = $root.CVP.DailyTopWinInfo.fromObject(object.ownDailyTopWinInfo);
            }
            if (object.time != null)
                message.time = object.time | 0;
            return message;
        };

        /**
         * Creates a plain object from a ResultDailyTopWinLeaderboard message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @static
         * @param {CVP.ResultDailyTopWinLeaderboard} message ResultDailyTopWinLeaderboard
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ResultDailyTopWinLeaderboard.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.dailyTopWinInfoList = [];
            if (options.defaults) {
                object.ownDailyTopWinInfo = null;
                object.time = 0;
            }
            if (message.dailyTopWinInfoList && message.dailyTopWinInfoList.length) {
                object.dailyTopWinInfoList = [];
                for (var j = 0; j < message.dailyTopWinInfoList.length; ++j)
                    object.dailyTopWinInfoList[j] = $root.CVP.DailyTopWinInfo.toObject(message.dailyTopWinInfoList[j], options);
            }
            if (message.ownDailyTopWinInfo != null && message.hasOwnProperty("ownDailyTopWinInfo"))
                object.ownDailyTopWinInfo = $root.CVP.DailyTopWinInfo.toObject(message.ownDailyTopWinInfo, options);
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            return object;
        };

        /**
         * Converts this ResultDailyTopWinLeaderboard to JSON.
         * @function toJSON
         * @memberof CVP.ResultDailyTopWinLeaderboard
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ResultDailyTopWinLeaderboard.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResultDailyTopWinLeaderboard;
    })();

    CVP.DailyTopWinInfo = (function() {

        /**
         * Properties of a DailyTopWinInfo.
         * @memberof CVP
         * @interface IDailyTopWinInfo
         * @property {CVP.IUserInfo|null} [userInfo] DailyTopWinInfo userInfo
         * @property {number|null} [coins] DailyTopWinInfo coins
         */

        /**
         * Constructs a new DailyTopWinInfo.
         * @memberof CVP
         * @classdesc Represents a DailyTopWinInfo.
         * @implements IDailyTopWinInfo
         * @constructor
         * @param {CVP.IDailyTopWinInfo=} [properties] Properties to set
         */
        function DailyTopWinInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DailyTopWinInfo userInfo.
         * @member {CVP.IUserInfo|null|undefined} userInfo
         * @memberof CVP.DailyTopWinInfo
         * @instance
         */
        DailyTopWinInfo.prototype.userInfo = null;

        /**
         * DailyTopWinInfo coins.
         * @member {number} coins
         * @memberof CVP.DailyTopWinInfo
         * @instance
         */
        DailyTopWinInfo.prototype.coins = 0;

        /**
         * Creates a new DailyTopWinInfo instance using the specified properties.
         * @function create
         * @memberof CVP.DailyTopWinInfo
         * @static
         * @param {CVP.IDailyTopWinInfo=} [properties] Properties to set
         * @returns {CVP.DailyTopWinInfo} DailyTopWinInfo instance
         */
        DailyTopWinInfo.create = function create(properties) {
            return new DailyTopWinInfo(properties);
        };

        /**
         * Encodes the specified DailyTopWinInfo message. Does not implicitly {@link CVP.DailyTopWinInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.DailyTopWinInfo
         * @static
         * @param {CVP.IDailyTopWinInfo} message DailyTopWinInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DailyTopWinInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userInfo != null && message.hasOwnProperty("userInfo"))
                $root.CVP.UserInfo.encode(message.userInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.coins);
            return writer;
        };

        /**
         * Encodes the specified DailyTopWinInfo message, length delimited. Does not implicitly {@link CVP.DailyTopWinInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.DailyTopWinInfo
         * @static
         * @param {CVP.IDailyTopWinInfo} message DailyTopWinInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DailyTopWinInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DailyTopWinInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.DailyTopWinInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.DailyTopWinInfo} DailyTopWinInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DailyTopWinInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.DailyTopWinInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userInfo = $root.CVP.UserInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.coins = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DailyTopWinInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.DailyTopWinInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.DailyTopWinInfo} DailyTopWinInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DailyTopWinInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DailyTopWinInfo message.
         * @function verify
         * @memberof CVP.DailyTopWinInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DailyTopWinInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userInfo != null && message.hasOwnProperty("userInfo")) {
                var error = $root.CVP.UserInfo.verify(message.userInfo);
                if (error)
                    return "userInfo." + error;
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            return null;
        };

        /**
         * Creates a DailyTopWinInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.DailyTopWinInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.DailyTopWinInfo} DailyTopWinInfo
         */
        DailyTopWinInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.DailyTopWinInfo)
                return object;
            var message = new $root.CVP.DailyTopWinInfo();
            if (object.userInfo != null) {
                if (typeof object.userInfo !== "object")
                    throw TypeError(".CVP.DailyTopWinInfo.userInfo: object expected");
                message.userInfo = $root.CVP.UserInfo.fromObject(object.userInfo);
            }
            if (object.coins != null)
                message.coins = Number(object.coins);
            return message;
        };

        /**
         * Creates a plain object from a DailyTopWinInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.DailyTopWinInfo
         * @static
         * @param {CVP.DailyTopWinInfo} message DailyTopWinInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DailyTopWinInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userInfo = null;
                object.coins = 0;
            }
            if (message.userInfo != null && message.hasOwnProperty("userInfo"))
                object.userInfo = $root.CVP.UserInfo.toObject(message.userInfo, options);
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            return object;
        };

        /**
         * Converts this DailyTopWinInfo to JSON.
         * @function toJSON
         * @memberof CVP.DailyTopWinInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DailyTopWinInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DailyTopWinInfo;
    })();

    CVP.RequestBestHandLeaderdoard = (function() {

        /**
         * Properties of a RequestBestHandLeaderdoard.
         * @memberof CVP
         * @interface IRequestBestHandLeaderdoard
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestBestHandLeaderdoard commonParams
         * @property {number|null} [limit] RequestBestHandLeaderdoard limit
         */

        /**
         * Constructs a new RequestBestHandLeaderdoard.
         * @memberof CVP
         * @classdesc Represents a RequestBestHandLeaderdoard.
         * @implements IRequestBestHandLeaderdoard
         * @constructor
         * @param {CVP.IRequestBestHandLeaderdoard=} [properties] Properties to set
         */
        function RequestBestHandLeaderdoard(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestBestHandLeaderdoard commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestBestHandLeaderdoard
         * @instance
         */
        RequestBestHandLeaderdoard.prototype.commonParams = null;

        /**
         * RequestBestHandLeaderdoard limit.
         * @member {number} limit
         * @memberof CVP.RequestBestHandLeaderdoard
         * @instance
         */
        RequestBestHandLeaderdoard.prototype.limit = 0;

        /**
         * Creates a new RequestBestHandLeaderdoard instance using the specified properties.
         * @function create
         * @memberof CVP.RequestBestHandLeaderdoard
         * @static
         * @param {CVP.IRequestBestHandLeaderdoard=} [properties] Properties to set
         * @returns {CVP.RequestBestHandLeaderdoard} RequestBestHandLeaderdoard instance
         */
        RequestBestHandLeaderdoard.create = function create(properties) {
            return new RequestBestHandLeaderdoard(properties);
        };

        /**
         * Encodes the specified RequestBestHandLeaderdoard message. Does not implicitly {@link CVP.RequestBestHandLeaderdoard.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestBestHandLeaderdoard
         * @static
         * @param {CVP.IRequestBestHandLeaderdoard} message RequestBestHandLeaderdoard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBestHandLeaderdoard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.limit != null && message.hasOwnProperty("limit"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.limit);
            return writer;
        };

        /**
         * Encodes the specified RequestBestHandLeaderdoard message, length delimited. Does not implicitly {@link CVP.RequestBestHandLeaderdoard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestBestHandLeaderdoard
         * @static
         * @param {CVP.IRequestBestHandLeaderdoard} message RequestBestHandLeaderdoard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestBestHandLeaderdoard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestBestHandLeaderdoard message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestBestHandLeaderdoard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestBestHandLeaderdoard} RequestBestHandLeaderdoard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBestHandLeaderdoard.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestBestHandLeaderdoard();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.limit = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestBestHandLeaderdoard message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestBestHandLeaderdoard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestBestHandLeaderdoard} RequestBestHandLeaderdoard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestBestHandLeaderdoard.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestBestHandLeaderdoard message.
         * @function verify
         * @memberof CVP.RequestBestHandLeaderdoard
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestBestHandLeaderdoard.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.limit != null && message.hasOwnProperty("limit"))
                if (!$util.isInteger(message.limit))
                    return "limit: integer expected";
            return null;
        };

        /**
         * Creates a RequestBestHandLeaderdoard message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestBestHandLeaderdoard
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestBestHandLeaderdoard} RequestBestHandLeaderdoard
         */
        RequestBestHandLeaderdoard.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestBestHandLeaderdoard)
                return object;
            var message = new $root.CVP.RequestBestHandLeaderdoard();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestBestHandLeaderdoard.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.limit != null)
                message.limit = object.limit | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestBestHandLeaderdoard message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestBestHandLeaderdoard
         * @static
         * @param {CVP.RequestBestHandLeaderdoard} message RequestBestHandLeaderdoard
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestBestHandLeaderdoard.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.limit = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.limit != null && message.hasOwnProperty("limit"))
                object.limit = message.limit;
            return object;
        };

        /**
         * Converts this RequestBestHandLeaderdoard to JSON.
         * @function toJSON
         * @memberof CVP.RequestBestHandLeaderdoard
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestBestHandLeaderdoard.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestBestHandLeaderdoard;
    })();

    CVP.ResultBestHandLeaderdoard = (function() {

        /**
         * Properties of a ResultBestHandLeaderdoard.
         * @memberof CVP
         * @interface IResultBestHandLeaderdoard
         * @property {Array.<CVP.IBestHandInfo>|null} [bestHandInfoList] ResultBestHandLeaderdoard bestHandInfoList
         * @property {CVP.IBestHandInfo|null} [ownBestHandInfo] ResultBestHandLeaderdoard ownBestHandInfo
         * @property {number|null} [time] ResultBestHandLeaderdoard time
         */

        /**
         * Constructs a new ResultBestHandLeaderdoard.
         * @memberof CVP
         * @classdesc Represents a ResultBestHandLeaderdoard.
         * @implements IResultBestHandLeaderdoard
         * @constructor
         * @param {CVP.IResultBestHandLeaderdoard=} [properties] Properties to set
         */
        function ResultBestHandLeaderdoard(properties) {
            this.bestHandInfoList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ResultBestHandLeaderdoard bestHandInfoList.
         * @member {Array.<CVP.IBestHandInfo>} bestHandInfoList
         * @memberof CVP.ResultBestHandLeaderdoard
         * @instance
         */
        ResultBestHandLeaderdoard.prototype.bestHandInfoList = $util.emptyArray;

        /**
         * ResultBestHandLeaderdoard ownBestHandInfo.
         * @member {CVP.IBestHandInfo|null|undefined} ownBestHandInfo
         * @memberof CVP.ResultBestHandLeaderdoard
         * @instance
         */
        ResultBestHandLeaderdoard.prototype.ownBestHandInfo = null;

        /**
         * ResultBestHandLeaderdoard time.
         * @member {number} time
         * @memberof CVP.ResultBestHandLeaderdoard
         * @instance
         */
        ResultBestHandLeaderdoard.prototype.time = 0;

        /**
         * Creates a new ResultBestHandLeaderdoard instance using the specified properties.
         * @function create
         * @memberof CVP.ResultBestHandLeaderdoard
         * @static
         * @param {CVP.IResultBestHandLeaderdoard=} [properties] Properties to set
         * @returns {CVP.ResultBestHandLeaderdoard} ResultBestHandLeaderdoard instance
         */
        ResultBestHandLeaderdoard.create = function create(properties) {
            return new ResultBestHandLeaderdoard(properties);
        };

        /**
         * Encodes the specified ResultBestHandLeaderdoard message. Does not implicitly {@link CVP.ResultBestHandLeaderdoard.verify|verify} messages.
         * @function encode
         * @memberof CVP.ResultBestHandLeaderdoard
         * @static
         * @param {CVP.IResultBestHandLeaderdoard} message ResultBestHandLeaderdoard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResultBestHandLeaderdoard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bestHandInfoList != null && message.bestHandInfoList.length)
                for (var i = 0; i < message.bestHandInfoList.length; ++i)
                    $root.CVP.BestHandInfo.encode(message.bestHandInfoList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ownBestHandInfo != null && message.hasOwnProperty("ownBestHandInfo"))
                $root.CVP.BestHandInfo.encode(message.ownBestHandInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.time);
            return writer;
        };

        /**
         * Encodes the specified ResultBestHandLeaderdoard message, length delimited. Does not implicitly {@link CVP.ResultBestHandLeaderdoard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.ResultBestHandLeaderdoard
         * @static
         * @param {CVP.IResultBestHandLeaderdoard} message ResultBestHandLeaderdoard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResultBestHandLeaderdoard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ResultBestHandLeaderdoard message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.ResultBestHandLeaderdoard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.ResultBestHandLeaderdoard} ResultBestHandLeaderdoard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResultBestHandLeaderdoard.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.ResultBestHandLeaderdoard();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.bestHandInfoList && message.bestHandInfoList.length))
                        message.bestHandInfoList = [];
                    message.bestHandInfoList.push($root.CVP.BestHandInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.ownBestHandInfo = $root.CVP.BestHandInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.time = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ResultBestHandLeaderdoard message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.ResultBestHandLeaderdoard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.ResultBestHandLeaderdoard} ResultBestHandLeaderdoard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResultBestHandLeaderdoard.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ResultBestHandLeaderdoard message.
         * @function verify
         * @memberof CVP.ResultBestHandLeaderdoard
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ResultBestHandLeaderdoard.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bestHandInfoList != null && message.hasOwnProperty("bestHandInfoList")) {
                if (!Array.isArray(message.bestHandInfoList))
                    return "bestHandInfoList: array expected";
                for (var i = 0; i < message.bestHandInfoList.length; ++i) {
                    var error = $root.CVP.BestHandInfo.verify(message.bestHandInfoList[i]);
                    if (error)
                        return "bestHandInfoList." + error;
                }
            }
            if (message.ownBestHandInfo != null && message.hasOwnProperty("ownBestHandInfo")) {
                var error = $root.CVP.BestHandInfo.verify(message.ownBestHandInfo);
                if (error)
                    return "ownBestHandInfo." + error;
            }
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time))
                    return "time: integer expected";
            return null;
        };

        /**
         * Creates a ResultBestHandLeaderdoard message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.ResultBestHandLeaderdoard
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.ResultBestHandLeaderdoard} ResultBestHandLeaderdoard
         */
        ResultBestHandLeaderdoard.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.ResultBestHandLeaderdoard)
                return object;
            var message = new $root.CVP.ResultBestHandLeaderdoard();
            if (object.bestHandInfoList) {
                if (!Array.isArray(object.bestHandInfoList))
                    throw TypeError(".CVP.ResultBestHandLeaderdoard.bestHandInfoList: array expected");
                message.bestHandInfoList = [];
                for (var i = 0; i < object.bestHandInfoList.length; ++i) {
                    if (typeof object.bestHandInfoList[i] !== "object")
                        throw TypeError(".CVP.ResultBestHandLeaderdoard.bestHandInfoList: object expected");
                    message.bestHandInfoList[i] = $root.CVP.BestHandInfo.fromObject(object.bestHandInfoList[i]);
                }
            }
            if (object.ownBestHandInfo != null) {
                if (typeof object.ownBestHandInfo !== "object")
                    throw TypeError(".CVP.ResultBestHandLeaderdoard.ownBestHandInfo: object expected");
                message.ownBestHandInfo = $root.CVP.BestHandInfo.fromObject(object.ownBestHandInfo);
            }
            if (object.time != null)
                message.time = object.time | 0;
            return message;
        };

        /**
         * Creates a plain object from a ResultBestHandLeaderdoard message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.ResultBestHandLeaderdoard
         * @static
         * @param {CVP.ResultBestHandLeaderdoard} message ResultBestHandLeaderdoard
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ResultBestHandLeaderdoard.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.bestHandInfoList = [];
            if (options.defaults) {
                object.ownBestHandInfo = null;
                object.time = 0;
            }
            if (message.bestHandInfoList && message.bestHandInfoList.length) {
                object.bestHandInfoList = [];
                for (var j = 0; j < message.bestHandInfoList.length; ++j)
                    object.bestHandInfoList[j] = $root.CVP.BestHandInfo.toObject(message.bestHandInfoList[j], options);
            }
            if (message.ownBestHandInfo != null && message.hasOwnProperty("ownBestHandInfo"))
                object.ownBestHandInfo = $root.CVP.BestHandInfo.toObject(message.ownBestHandInfo, options);
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            return object;
        };

        /**
         * Converts this ResultBestHandLeaderdoard to JSON.
         * @function toJSON
         * @memberof CVP.ResultBestHandLeaderdoard
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ResultBestHandLeaderdoard.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResultBestHandLeaderdoard;
    })();

    CVP.BestHandInfo = (function() {

        /**
         * Properties of a BestHandInfo.
         * @memberof CVP
         * @interface IBestHandInfo
         * @property {CVP.IUserInfo|null} [userInfo] BestHandInfo userInfo
         * @property {number|null} [machineId] BestHandInfo machineId
         * @property {Array.<string>|null} [cardArray] BestHandInfo cardArray
         * @property {number|null} [coins] BestHandInfo coins
         */

        /**
         * Constructs a new BestHandInfo.
         * @memberof CVP
         * @classdesc Represents a BestHandInfo.
         * @implements IBestHandInfo
         * @constructor
         * @param {CVP.IBestHandInfo=} [properties] Properties to set
         */
        function BestHandInfo(properties) {
            this.cardArray = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BestHandInfo userInfo.
         * @member {CVP.IUserInfo|null|undefined} userInfo
         * @memberof CVP.BestHandInfo
         * @instance
         */
        BestHandInfo.prototype.userInfo = null;

        /**
         * BestHandInfo machineId.
         * @member {number} machineId
         * @memberof CVP.BestHandInfo
         * @instance
         */
        BestHandInfo.prototype.machineId = 0;

        /**
         * BestHandInfo cardArray.
         * @member {Array.<string>} cardArray
         * @memberof CVP.BestHandInfo
         * @instance
         */
        BestHandInfo.prototype.cardArray = $util.emptyArray;

        /**
         * BestHandInfo coins.
         * @member {number} coins
         * @memberof CVP.BestHandInfo
         * @instance
         */
        BestHandInfo.prototype.coins = 0;

        /**
         * Creates a new BestHandInfo instance using the specified properties.
         * @function create
         * @memberof CVP.BestHandInfo
         * @static
         * @param {CVP.IBestHandInfo=} [properties] Properties to set
         * @returns {CVP.BestHandInfo} BestHandInfo instance
         */
        BestHandInfo.create = function create(properties) {
            return new BestHandInfo(properties);
        };

        /**
         * Encodes the specified BestHandInfo message. Does not implicitly {@link CVP.BestHandInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.BestHandInfo
         * @static
         * @param {CVP.IBestHandInfo} message BestHandInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BestHandInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userInfo != null && message.hasOwnProperty("userInfo"))
                $root.CVP.UserInfo.encode(message.userInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.machineId != null && message.hasOwnProperty("machineId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.machineId);
            if (message.cardArray != null && message.cardArray.length)
                for (var i = 0; i < message.cardArray.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.cardArray[i]);
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 4, wireType 1 =*/33).double(message.coins);
            return writer;
        };

        /**
         * Encodes the specified BestHandInfo message, length delimited. Does not implicitly {@link CVP.BestHandInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.BestHandInfo
         * @static
         * @param {CVP.IBestHandInfo} message BestHandInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BestHandInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BestHandInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.BestHandInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.BestHandInfo} BestHandInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BestHandInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.BestHandInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userInfo = $root.CVP.UserInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.machineId = reader.int32();
                    break;
                case 3:
                    if (!(message.cardArray && message.cardArray.length))
                        message.cardArray = [];
                    message.cardArray.push(reader.string());
                    break;
                case 4:
                    message.coins = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BestHandInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.BestHandInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.BestHandInfo} BestHandInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BestHandInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BestHandInfo message.
         * @function verify
         * @memberof CVP.BestHandInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BestHandInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userInfo != null && message.hasOwnProperty("userInfo")) {
                var error = $root.CVP.UserInfo.verify(message.userInfo);
                if (error)
                    return "userInfo." + error;
            }
            if (message.machineId != null && message.hasOwnProperty("machineId"))
                if (!$util.isInteger(message.machineId))
                    return "machineId: integer expected";
            if (message.cardArray != null && message.hasOwnProperty("cardArray")) {
                if (!Array.isArray(message.cardArray))
                    return "cardArray: array expected";
                for (var i = 0; i < message.cardArray.length; ++i)
                    if (!$util.isString(message.cardArray[i]))
                        return "cardArray: string[] expected";
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            return null;
        };

        /**
         * Creates a BestHandInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.BestHandInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.BestHandInfo} BestHandInfo
         */
        BestHandInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.BestHandInfo)
                return object;
            var message = new $root.CVP.BestHandInfo();
            if (object.userInfo != null) {
                if (typeof object.userInfo !== "object")
                    throw TypeError(".CVP.BestHandInfo.userInfo: object expected");
                message.userInfo = $root.CVP.UserInfo.fromObject(object.userInfo);
            }
            if (object.machineId != null)
                message.machineId = object.machineId | 0;
            if (object.cardArray) {
                if (!Array.isArray(object.cardArray))
                    throw TypeError(".CVP.BestHandInfo.cardArray: array expected");
                message.cardArray = [];
                for (var i = 0; i < object.cardArray.length; ++i)
                    message.cardArray[i] = String(object.cardArray[i]);
            }
            if (object.coins != null)
                message.coins = Number(object.coins);
            return message;
        };

        /**
         * Creates a plain object from a BestHandInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.BestHandInfo
         * @static
         * @param {CVP.BestHandInfo} message BestHandInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BestHandInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.cardArray = [];
            if (options.defaults) {
                object.userInfo = null;
                object.machineId = 0;
                object.coins = 0;
            }
            if (message.userInfo != null && message.hasOwnProperty("userInfo"))
                object.userInfo = $root.CVP.UserInfo.toObject(message.userInfo, options);
            if (message.machineId != null && message.hasOwnProperty("machineId"))
                object.machineId = message.machineId;
            if (message.cardArray && message.cardArray.length) {
                object.cardArray = [];
                for (var j = 0; j < message.cardArray.length; ++j)
                    object.cardArray[j] = message.cardArray[j];
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            return object;
        };

        /**
         * Converts this BestHandInfo to JSON.
         * @function toJSON
         * @memberof CVP.BestHandInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BestHandInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BestHandInfo;
    })();

    CVP.UserInfo = (function() {

        /**
         * Properties of a UserInfo.
         * @memberof CVP
         * @interface IUserInfo
         * @property {number|null} [rank] UserInfo rank
         * @property {CVP.SexType|null} [sex] UserInfo sex
         * @property {string|null} [name] UserInfo name
         * @property {number|null} [level] UserInfo level
         * @property {number|null} [country] UserInfo country
         * @property {CVP.IAvatarInfo|null} [avatarInfo] UserInfo avatarInfo
         */

        /**
         * Constructs a new UserInfo.
         * @memberof CVP
         * @classdesc Represents a UserInfo.
         * @implements IUserInfo
         * @constructor
         * @param {CVP.IUserInfo=} [properties] Properties to set
         */
        function UserInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserInfo rank.
         * @member {number} rank
         * @memberof CVP.UserInfo
         * @instance
         */
        UserInfo.prototype.rank = 0;

        /**
         * UserInfo sex.
         * @member {CVP.SexType} sex
         * @memberof CVP.UserInfo
         * @instance
         */
        UserInfo.prototype.sex = 1;

        /**
         * UserInfo name.
         * @member {string} name
         * @memberof CVP.UserInfo
         * @instance
         */
        UserInfo.prototype.name = "";

        /**
         * UserInfo level.
         * @member {number} level
         * @memberof CVP.UserInfo
         * @instance
         */
        UserInfo.prototype.level = 0;

        /**
         * UserInfo country.
         * @member {number} country
         * @memberof CVP.UserInfo
         * @instance
         */
        UserInfo.prototype.country = 0;

        /**
         * UserInfo avatarInfo.
         * @member {CVP.IAvatarInfo|null|undefined} avatarInfo
         * @memberof CVP.UserInfo
         * @instance
         */
        UserInfo.prototype.avatarInfo = null;

        /**
         * Creates a new UserInfo instance using the specified properties.
         * @function create
         * @memberof CVP.UserInfo
         * @static
         * @param {CVP.IUserInfo=} [properties] Properties to set
         * @returns {CVP.UserInfo} UserInfo instance
         */
        UserInfo.create = function create(properties) {
            return new UserInfo(properties);
        };

        /**
         * Encodes the specified UserInfo message. Does not implicitly {@link CVP.UserInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.UserInfo
         * @static
         * @param {CVP.IUserInfo} message UserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rank != null && message.hasOwnProperty("rank"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rank);
            if (message.sex != null && message.hasOwnProperty("sex"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.sex);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.level != null && message.hasOwnProperty("level"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
            if (message.country != null && message.hasOwnProperty("country"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.country);
            if (message.avatarInfo != null && message.hasOwnProperty("avatarInfo"))
                $root.CVP.AvatarInfo.encode(message.avatarInfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified UserInfo message, length delimited. Does not implicitly {@link CVP.UserInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UserInfo
         * @static
         * @param {CVP.IUserInfo} message UserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UserInfo} UserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UserInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rank = reader.int32();
                    break;
                case 2:
                    message.sex = reader.int32();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.level = reader.int32();
                    break;
                case 5:
                    message.country = reader.int32();
                    break;
                case 6:
                    message.avatarInfo = $root.CVP.AvatarInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UserInfo} UserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserInfo message.
         * @function verify
         * @memberof CVP.UserInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rank != null && message.hasOwnProperty("rank"))
                if (!$util.isInteger(message.rank))
                    return "rank: integer expected";
            if (message.sex != null && message.hasOwnProperty("sex"))
                switch (message.sex) {
                default:
                    return "sex: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.level != null && message.hasOwnProperty("level"))
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
            if (message.country != null && message.hasOwnProperty("country"))
                if (!$util.isInteger(message.country))
                    return "country: integer expected";
            if (message.avatarInfo != null && message.hasOwnProperty("avatarInfo")) {
                var error = $root.CVP.AvatarInfo.verify(message.avatarInfo);
                if (error)
                    return "avatarInfo." + error;
            }
            return null;
        };

        /**
         * Creates a UserInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UserInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UserInfo} UserInfo
         */
        UserInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UserInfo)
                return object;
            var message = new $root.CVP.UserInfo();
            if (object.rank != null)
                message.rank = object.rank | 0;
            switch (object.sex) {
            case "male":
            case 1:
                message.sex = 1;
                break;
            case "female":
            case 2:
                message.sex = 2;
                break;
            case "hide":
            case 3:
                message.sex = 3;
                break;
            }
            if (object.name != null)
                message.name = String(object.name);
            if (object.level != null)
                message.level = object.level | 0;
            if (object.country != null)
                message.country = object.country | 0;
            if (object.avatarInfo != null) {
                if (typeof object.avatarInfo !== "object")
                    throw TypeError(".CVP.UserInfo.avatarInfo: object expected");
                message.avatarInfo = $root.CVP.AvatarInfo.fromObject(object.avatarInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a UserInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UserInfo
         * @static
         * @param {CVP.UserInfo} message UserInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.rank = 0;
                object.sex = options.enums === String ? "male" : 1;
                object.name = "";
                object.level = 0;
                object.country = 0;
                object.avatarInfo = null;
            }
            if (message.rank != null && message.hasOwnProperty("rank"))
                object.rank = message.rank;
            if (message.sex != null && message.hasOwnProperty("sex"))
                object.sex = options.enums === String ? $root.CVP.SexType[message.sex] : message.sex;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.level != null && message.hasOwnProperty("level"))
                object.level = message.level;
            if (message.country != null && message.hasOwnProperty("country"))
                object.country = message.country;
            if (message.avatarInfo != null && message.hasOwnProperty("avatarInfo"))
                object.avatarInfo = $root.CVP.AvatarInfo.toObject(message.avatarInfo, options);
            return object;
        };

        /**
         * Converts this UserInfo to JSON.
         * @function toJSON
         * @memberof CVP.UserInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserInfo;
    })();

    CVP.AvatarInfo = (function() {

        /**
         * Properties of an AvatarInfo.
         * @memberof CVP
         * @interface IAvatarInfo
         * @property {number|null} [avatarId] AvatarInfo avatarId
         * @property {string|null} [avatarType] AvatarInfo avatarType
         * @property {string|null} [avatarUrl] AvatarInfo avatarUrl
         */

        /**
         * Constructs a new AvatarInfo.
         * @memberof CVP
         * @classdesc Represents an AvatarInfo.
         * @implements IAvatarInfo
         * @constructor
         * @param {CVP.IAvatarInfo=} [properties] Properties to set
         */
        function AvatarInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AvatarInfo avatarId.
         * @member {number} avatarId
         * @memberof CVP.AvatarInfo
         * @instance
         */
        AvatarInfo.prototype.avatarId = 0;

        /**
         * AvatarInfo avatarType.
         * @member {string} avatarType
         * @memberof CVP.AvatarInfo
         * @instance
         */
        AvatarInfo.prototype.avatarType = "";

        /**
         * AvatarInfo avatarUrl.
         * @member {string} avatarUrl
         * @memberof CVP.AvatarInfo
         * @instance
         */
        AvatarInfo.prototype.avatarUrl = "";

        /**
         * Creates a new AvatarInfo instance using the specified properties.
         * @function create
         * @memberof CVP.AvatarInfo
         * @static
         * @param {CVP.IAvatarInfo=} [properties] Properties to set
         * @returns {CVP.AvatarInfo} AvatarInfo instance
         */
        AvatarInfo.create = function create(properties) {
            return new AvatarInfo(properties);
        };

        /**
         * Encodes the specified AvatarInfo message. Does not implicitly {@link CVP.AvatarInfo.verify|verify} messages.
         * @function encode
         * @memberof CVP.AvatarInfo
         * @static
         * @param {CVP.IAvatarInfo} message AvatarInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AvatarInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.avatarId != null && message.hasOwnProperty("avatarId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.avatarId);
            if (message.avatarType != null && message.hasOwnProperty("avatarType"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.avatarType);
            if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.avatarUrl);
            return writer;
        };

        /**
         * Encodes the specified AvatarInfo message, length delimited. Does not implicitly {@link CVP.AvatarInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.AvatarInfo
         * @static
         * @param {CVP.IAvatarInfo} message AvatarInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AvatarInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AvatarInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.AvatarInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.AvatarInfo} AvatarInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AvatarInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.AvatarInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.avatarId = reader.int32();
                    break;
                case 2:
                    message.avatarType = reader.string();
                    break;
                case 3:
                    message.avatarUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AvatarInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.AvatarInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.AvatarInfo} AvatarInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AvatarInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AvatarInfo message.
         * @function verify
         * @memberof CVP.AvatarInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AvatarInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.avatarId != null && message.hasOwnProperty("avatarId"))
                if (!$util.isInteger(message.avatarId))
                    return "avatarId: integer expected";
            if (message.avatarType != null && message.hasOwnProperty("avatarType"))
                if (!$util.isString(message.avatarType))
                    return "avatarType: string expected";
            if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
                if (!$util.isString(message.avatarUrl))
                    return "avatarUrl: string expected";
            return null;
        };

        /**
         * Creates an AvatarInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.AvatarInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.AvatarInfo} AvatarInfo
         */
        AvatarInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.AvatarInfo)
                return object;
            var message = new $root.CVP.AvatarInfo();
            if (object.avatarId != null)
                message.avatarId = object.avatarId | 0;
            if (object.avatarType != null)
                message.avatarType = String(object.avatarType);
            if (object.avatarUrl != null)
                message.avatarUrl = String(object.avatarUrl);
            return message;
        };

        /**
         * Creates a plain object from an AvatarInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.AvatarInfo
         * @static
         * @param {CVP.AvatarInfo} message AvatarInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AvatarInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.avatarId = 0;
                object.avatarType = "";
                object.avatarUrl = "";
            }
            if (message.avatarId != null && message.hasOwnProperty("avatarId"))
                object.avatarId = message.avatarId;
            if (message.avatarType != null && message.hasOwnProperty("avatarType"))
                object.avatarType = message.avatarType;
            if (message.avatarUrl != null && message.hasOwnProperty("avatarUrl"))
                object.avatarUrl = message.avatarUrl;
            return object;
        };

        /**
         * Converts this AvatarInfo to JSON.
         * @function toJSON
         * @memberof CVP.AvatarInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AvatarInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AvatarInfo;
    })();

    CVP.RequestLobbyData = (function() {

        /**
         * Properties of a RequestLobbyData.
         * @memberof CVP
         * @interface IRequestLobbyData
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestLobbyData commonParams
         */

        /**
         * Constructs a new RequestLobbyData.
         * @memberof CVP
         * @classdesc Represents a RequestLobbyData.
         * @implements IRequestLobbyData
         * @constructor
         * @param {CVP.IRequestLobbyData=} [properties] Properties to set
         */
        function RequestLobbyData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestLobbyData commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestLobbyData
         * @instance
         */
        RequestLobbyData.prototype.commonParams = null;

        /**
         * Creates a new RequestLobbyData instance using the specified properties.
         * @function create
         * @memberof CVP.RequestLobbyData
         * @static
         * @param {CVP.IRequestLobbyData=} [properties] Properties to set
         * @returns {CVP.RequestLobbyData} RequestLobbyData instance
         */
        RequestLobbyData.create = function create(properties) {
            return new RequestLobbyData(properties);
        };

        /**
         * Encodes the specified RequestLobbyData message. Does not implicitly {@link CVP.RequestLobbyData.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestLobbyData
         * @static
         * @param {CVP.IRequestLobbyData} message RequestLobbyData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLobbyData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestLobbyData message, length delimited. Does not implicitly {@link CVP.RequestLobbyData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestLobbyData
         * @static
         * @param {CVP.IRequestLobbyData} message RequestLobbyData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLobbyData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestLobbyData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestLobbyData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestLobbyData} RequestLobbyData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLobbyData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestLobbyData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestLobbyData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestLobbyData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestLobbyData} RequestLobbyData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLobbyData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestLobbyData message.
         * @function verify
         * @memberof CVP.RequestLobbyData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestLobbyData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestLobbyData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestLobbyData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestLobbyData} RequestLobbyData
         */
        RequestLobbyData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestLobbyData)
                return object;
            var message = new $root.CVP.RequestLobbyData();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestLobbyData.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestLobbyData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestLobbyData
         * @static
         * @param {CVP.RequestLobbyData} message RequestLobbyData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestLobbyData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestLobbyData to JSON.
         * @function toJSON
         * @memberof CVP.RequestLobbyData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestLobbyData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLobbyData;
    })();

    CVP.RequestLobbyDataResult = (function() {

        /**
         * Properties of a RequestLobbyDataResult.
         * @memberof CVP
         * @interface IRequestLobbyDataResult
         * @property {Array.<CVP.IRoomData>|null} [RoomDataList] RequestLobbyDataResult RoomDataList
         * @property {CVP.IBonusInfo|null} [bonusInfo] RequestLobbyDataResult bonusInfo
         * @property {boolean|null} [pigIsFull] RequestLobbyDataResult pigIsFull
         * @property {boolean|null} [vaultIsOpen] RequestLobbyDataResult vaultIsOpen
         * @property {boolean|null} [isHaveInterstitial] RequestLobbyDataResult isHaveInterstitial
         * @property {number|null} [bindReward] RequestLobbyDataResult bindReward
         * @property {number|null} [inboxNumber] RequestLobbyDataResult inboxNumber
         * @property {number|null} [achievementNumber] RequestLobbyDataResult achievementNumber
         * @property {boolean|null} [isSignIn] RequestLobbyDataResult isSignIn
         * @property {CVP.SignType|null} [signType] RequestLobbyDataResult signType
         * @property {Array.<CVP.IVipData>|null} [VipDataList] RequestLobbyDataResult VipDataList
         * @property {Array.<string>|null} [gameAdIdList] RequestLobbyDataResult gameAdIdList
         * @property {boolean|null} [isClaim] RequestLobbyDataResult isClaim
         * @property {boolean|null} [isHaveFreeSubScribe] RequestLobbyDataResult isHaveFreeSubScribe
         * @property {boolean|null} [isBuyInvitation] RequestLobbyDataResult isBuyInvitation
         * @property {boolean|null} [isShowPersonalDeal] RequestLobbyDataResult isShowPersonalDeal
         * @property {number|null} [guideTipsKeepTime] RequestLobbyDataResult guideTipsKeepTime
         * @property {number|null} [guideTipsCoolDownTime] RequestLobbyDataResult guideTipsCoolDownTime
         * @property {number|null} [frequency] RequestLobbyDataResult frequency
         * @property {number|null} [removeAd] RequestLobbyDataResult removeAd
         * @property {CVP.IShopItem|null} [removeAdItem] RequestLobbyDataResult removeAdItem
         * @property {number|null} [changeProfileReward] RequestLobbyDataResult changeProfileReward
         * @property {number|null} [guideTipsInitialCooldownTime] RequestLobbyDataResult guideTipsInitialCooldownTime
         */

        /**
         * Constructs a new RequestLobbyDataResult.
         * @memberof CVP
         * @classdesc Represents a RequestLobbyDataResult.
         * @implements IRequestLobbyDataResult
         * @constructor
         * @param {CVP.IRequestLobbyDataResult=} [properties] Properties to set
         */
        function RequestLobbyDataResult(properties) {
            this.RoomDataList = [];
            this.VipDataList = [];
            this.gameAdIdList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestLobbyDataResult RoomDataList.
         * @member {Array.<CVP.IRoomData>} RoomDataList
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.RoomDataList = $util.emptyArray;

        /**
         * RequestLobbyDataResult bonusInfo.
         * @member {CVP.IBonusInfo|null|undefined} bonusInfo
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.bonusInfo = null;

        /**
         * RequestLobbyDataResult pigIsFull.
         * @member {boolean} pigIsFull
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.pigIsFull = false;

        /**
         * RequestLobbyDataResult vaultIsOpen.
         * @member {boolean} vaultIsOpen
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.vaultIsOpen = false;

        /**
         * RequestLobbyDataResult isHaveInterstitial.
         * @member {boolean} isHaveInterstitial
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.isHaveInterstitial = false;

        /**
         * RequestLobbyDataResult bindReward.
         * @member {number} bindReward
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.bindReward = 0;

        /**
         * RequestLobbyDataResult inboxNumber.
         * @member {number} inboxNumber
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.inboxNumber = 0;

        /**
         * RequestLobbyDataResult achievementNumber.
         * @member {number} achievementNumber
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.achievementNumber = 0;

        /**
         * RequestLobbyDataResult isSignIn.
         * @member {boolean} isSignIn
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.isSignIn = false;

        /**
         * RequestLobbyDataResult signType.
         * @member {CVP.SignType} signType
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.signType = 0;

        /**
         * RequestLobbyDataResult VipDataList.
         * @member {Array.<CVP.IVipData>} VipDataList
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.VipDataList = $util.emptyArray;

        /**
         * RequestLobbyDataResult gameAdIdList.
         * @member {Array.<string>} gameAdIdList
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.gameAdIdList = $util.emptyArray;

        /**
         * RequestLobbyDataResult isClaim.
         * @member {boolean} isClaim
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.isClaim = false;

        /**
         * RequestLobbyDataResult isHaveFreeSubScribe.
         * @member {boolean} isHaveFreeSubScribe
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.isHaveFreeSubScribe = false;

        /**
         * RequestLobbyDataResult isBuyInvitation.
         * @member {boolean} isBuyInvitation
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.isBuyInvitation = false;

        /**
         * RequestLobbyDataResult isShowPersonalDeal.
         * @member {boolean} isShowPersonalDeal
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.isShowPersonalDeal = false;

        /**
         * RequestLobbyDataResult guideTipsKeepTime.
         * @member {number} guideTipsKeepTime
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.guideTipsKeepTime = 0;

        /**
         * RequestLobbyDataResult guideTipsCoolDownTime.
         * @member {number} guideTipsCoolDownTime
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.guideTipsCoolDownTime = 0;

        /**
         * RequestLobbyDataResult frequency.
         * @member {number} frequency
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.frequency = 0;

        /**
         * RequestLobbyDataResult removeAd.
         * @member {number} removeAd
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.removeAd = 0;

        /**
         * RequestLobbyDataResult removeAdItem.
         * @member {CVP.IShopItem|null|undefined} removeAdItem
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.removeAdItem = null;

        /**
         * RequestLobbyDataResult changeProfileReward.
         * @member {number} changeProfileReward
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.changeProfileReward = 0;

        /**
         * RequestLobbyDataResult guideTipsInitialCooldownTime.
         * @member {number} guideTipsInitialCooldownTime
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         */
        RequestLobbyDataResult.prototype.guideTipsInitialCooldownTime = 0;

        /**
         * Creates a new RequestLobbyDataResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestLobbyDataResult
         * @static
         * @param {CVP.IRequestLobbyDataResult=} [properties] Properties to set
         * @returns {CVP.RequestLobbyDataResult} RequestLobbyDataResult instance
         */
        RequestLobbyDataResult.create = function create(properties) {
            return new RequestLobbyDataResult(properties);
        };

        /**
         * Encodes the specified RequestLobbyDataResult message. Does not implicitly {@link CVP.RequestLobbyDataResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestLobbyDataResult
         * @static
         * @param {CVP.IRequestLobbyDataResult} message RequestLobbyDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLobbyDataResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.RoomDataList != null && message.RoomDataList.length)
                for (var i = 0; i < message.RoomDataList.length; ++i)
                    $root.CVP.RoomData.encode(message.RoomDataList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.bonusInfo != null && message.hasOwnProperty("bonusInfo"))
                $root.CVP.BonusInfo.encode(message.bonusInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.pigIsFull != null && message.hasOwnProperty("pigIsFull"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.pigIsFull);
            if (message.vaultIsOpen != null && message.hasOwnProperty("vaultIsOpen"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.vaultIsOpen);
            if (message.isHaveInterstitial != null && message.hasOwnProperty("isHaveInterstitial"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isHaveInterstitial);
            if (message.bindReward != null && message.hasOwnProperty("bindReward"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.bindReward);
            if (message.inboxNumber != null && message.hasOwnProperty("inboxNumber"))
                writer.uint32(/* id 7, wireType 1 =*/57).double(message.inboxNumber);
            if (message.achievementNumber != null && message.hasOwnProperty("achievementNumber"))
                writer.uint32(/* id 8, wireType 1 =*/65).double(message.achievementNumber);
            if (message.isSignIn != null && message.hasOwnProperty("isSignIn"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.isSignIn);
            if (message.signType != null && message.hasOwnProperty("signType"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.signType);
            if (message.VipDataList != null && message.VipDataList.length)
                for (var i = 0; i < message.VipDataList.length; ++i)
                    $root.CVP.VipData.encode(message.VipDataList[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.gameAdIdList != null && message.gameAdIdList.length)
                for (var i = 0; i < message.gameAdIdList.length; ++i)
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.gameAdIdList[i]);
            if (message.isClaim != null && message.hasOwnProperty("isClaim"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.isClaim);
            if (message.isHaveFreeSubScribe != null && message.hasOwnProperty("isHaveFreeSubScribe"))
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.isHaveFreeSubScribe);
            if (message.isBuyInvitation != null && message.hasOwnProperty("isBuyInvitation"))
                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.isBuyInvitation);
            if (message.isShowPersonalDeal != null && message.hasOwnProperty("isShowPersonalDeal"))
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.isShowPersonalDeal);
            if (message.guideTipsKeepTime != null && message.hasOwnProperty("guideTipsKeepTime"))
                writer.uint32(/* id 17, wireType 0 =*/136).int32(message.guideTipsKeepTime);
            if (message.guideTipsCoolDownTime != null && message.hasOwnProperty("guideTipsCoolDownTime"))
                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.guideTipsCoolDownTime);
            if (message.frequency != null && message.hasOwnProperty("frequency"))
                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.frequency);
            if (message.removeAd != null && message.hasOwnProperty("removeAd"))
                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.removeAd);
            if (message.removeAdItem != null && message.hasOwnProperty("removeAdItem"))
                $root.CVP.ShopItem.encode(message.removeAdItem, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
            if (message.changeProfileReward != null && message.hasOwnProperty("changeProfileReward"))
                writer.uint32(/* id 22, wireType 1 =*/177).double(message.changeProfileReward);
            if (message.guideTipsInitialCooldownTime != null && message.hasOwnProperty("guideTipsInitialCooldownTime"))
                writer.uint32(/* id 23, wireType 0 =*/184).int32(message.guideTipsInitialCooldownTime);
            return writer;
        };

        /**
         * Encodes the specified RequestLobbyDataResult message, length delimited. Does not implicitly {@link CVP.RequestLobbyDataResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestLobbyDataResult
         * @static
         * @param {CVP.IRequestLobbyDataResult} message RequestLobbyDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestLobbyDataResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestLobbyDataResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestLobbyDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestLobbyDataResult} RequestLobbyDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLobbyDataResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestLobbyDataResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.RoomDataList && message.RoomDataList.length))
                        message.RoomDataList = [];
                    message.RoomDataList.push($root.CVP.RoomData.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.bonusInfo = $root.CVP.BonusInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.pigIsFull = reader.bool();
                    break;
                case 4:
                    message.vaultIsOpen = reader.bool();
                    break;
                case 5:
                    message.isHaveInterstitial = reader.bool();
                    break;
                case 6:
                    message.bindReward = reader.double();
                    break;
                case 7:
                    message.inboxNumber = reader.double();
                    break;
                case 8:
                    message.achievementNumber = reader.double();
                    break;
                case 9:
                    message.isSignIn = reader.bool();
                    break;
                case 10:
                    message.signType = reader.int32();
                    break;
                case 11:
                    if (!(message.VipDataList && message.VipDataList.length))
                        message.VipDataList = [];
                    message.VipDataList.push($root.CVP.VipData.decode(reader, reader.uint32()));
                    break;
                case 12:
                    if (!(message.gameAdIdList && message.gameAdIdList.length))
                        message.gameAdIdList = [];
                    message.gameAdIdList.push(reader.string());
                    break;
                case 13:
                    message.isClaim = reader.bool();
                    break;
                case 14:
                    message.isHaveFreeSubScribe = reader.bool();
                    break;
                case 15:
                    message.isBuyInvitation = reader.bool();
                    break;
                case 16:
                    message.isShowPersonalDeal = reader.bool();
                    break;
                case 17:
                    message.guideTipsKeepTime = reader.int32();
                    break;
                case 18:
                    message.guideTipsCoolDownTime = reader.int32();
                    break;
                case 19:
                    message.frequency = reader.int32();
                    break;
                case 20:
                    message.removeAd = reader.int32();
                    break;
                case 21:
                    message.removeAdItem = $root.CVP.ShopItem.decode(reader, reader.uint32());
                    break;
                case 22:
                    message.changeProfileReward = reader.double();
                    break;
                case 23:
                    message.guideTipsInitialCooldownTime = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestLobbyDataResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestLobbyDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestLobbyDataResult} RequestLobbyDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestLobbyDataResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestLobbyDataResult message.
         * @function verify
         * @memberof CVP.RequestLobbyDataResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestLobbyDataResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.RoomDataList != null && message.hasOwnProperty("RoomDataList")) {
                if (!Array.isArray(message.RoomDataList))
                    return "RoomDataList: array expected";
                for (var i = 0; i < message.RoomDataList.length; ++i) {
                    var error = $root.CVP.RoomData.verify(message.RoomDataList[i]);
                    if (error)
                        return "RoomDataList." + error;
                }
            }
            if (message.bonusInfo != null && message.hasOwnProperty("bonusInfo")) {
                var error = $root.CVP.BonusInfo.verify(message.bonusInfo);
                if (error)
                    return "bonusInfo." + error;
            }
            if (message.pigIsFull != null && message.hasOwnProperty("pigIsFull"))
                if (typeof message.pigIsFull !== "boolean")
                    return "pigIsFull: boolean expected";
            if (message.vaultIsOpen != null && message.hasOwnProperty("vaultIsOpen"))
                if (typeof message.vaultIsOpen !== "boolean")
                    return "vaultIsOpen: boolean expected";
            if (message.isHaveInterstitial != null && message.hasOwnProperty("isHaveInterstitial"))
                if (typeof message.isHaveInterstitial !== "boolean")
                    return "isHaveInterstitial: boolean expected";
            if (message.bindReward != null && message.hasOwnProperty("bindReward"))
                if (typeof message.bindReward !== "number")
                    return "bindReward: number expected";
            if (message.inboxNumber != null && message.hasOwnProperty("inboxNumber"))
                if (typeof message.inboxNumber !== "number")
                    return "inboxNumber: number expected";
            if (message.achievementNumber != null && message.hasOwnProperty("achievementNumber"))
                if (typeof message.achievementNumber !== "number")
                    return "achievementNumber: number expected";
            if (message.isSignIn != null && message.hasOwnProperty("isSignIn"))
                if (typeof message.isSignIn !== "boolean")
                    return "isSignIn: boolean expected";
            if (message.signType != null && message.hasOwnProperty("signType"))
                switch (message.signType) {
                default:
                    return "signType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.VipDataList != null && message.hasOwnProperty("VipDataList")) {
                if (!Array.isArray(message.VipDataList))
                    return "VipDataList: array expected";
                for (var i = 0; i < message.VipDataList.length; ++i) {
                    var error = $root.CVP.VipData.verify(message.VipDataList[i]);
                    if (error)
                        return "VipDataList." + error;
                }
            }
            if (message.gameAdIdList != null && message.hasOwnProperty("gameAdIdList")) {
                if (!Array.isArray(message.gameAdIdList))
                    return "gameAdIdList: array expected";
                for (var i = 0; i < message.gameAdIdList.length; ++i)
                    if (!$util.isString(message.gameAdIdList[i]))
                        return "gameAdIdList: string[] expected";
            }
            if (message.isClaim != null && message.hasOwnProperty("isClaim"))
                if (typeof message.isClaim !== "boolean")
                    return "isClaim: boolean expected";
            if (message.isHaveFreeSubScribe != null && message.hasOwnProperty("isHaveFreeSubScribe"))
                if (typeof message.isHaveFreeSubScribe !== "boolean")
                    return "isHaveFreeSubScribe: boolean expected";
            if (message.isBuyInvitation != null && message.hasOwnProperty("isBuyInvitation"))
                if (typeof message.isBuyInvitation !== "boolean")
                    return "isBuyInvitation: boolean expected";
            if (message.isShowPersonalDeal != null && message.hasOwnProperty("isShowPersonalDeal"))
                if (typeof message.isShowPersonalDeal !== "boolean")
                    return "isShowPersonalDeal: boolean expected";
            if (message.guideTipsKeepTime != null && message.hasOwnProperty("guideTipsKeepTime"))
                if (!$util.isInteger(message.guideTipsKeepTime))
                    return "guideTipsKeepTime: integer expected";
            if (message.guideTipsCoolDownTime != null && message.hasOwnProperty("guideTipsCoolDownTime"))
                if (!$util.isInteger(message.guideTipsCoolDownTime))
                    return "guideTipsCoolDownTime: integer expected";
            if (message.frequency != null && message.hasOwnProperty("frequency"))
                if (!$util.isInteger(message.frequency))
                    return "frequency: integer expected";
            if (message.removeAd != null && message.hasOwnProperty("removeAd"))
                if (!$util.isInteger(message.removeAd))
                    return "removeAd: integer expected";
            if (message.removeAdItem != null && message.hasOwnProperty("removeAdItem")) {
                var error = $root.CVP.ShopItem.verify(message.removeAdItem);
                if (error)
                    return "removeAdItem." + error;
            }
            if (message.changeProfileReward != null && message.hasOwnProperty("changeProfileReward"))
                if (typeof message.changeProfileReward !== "number")
                    return "changeProfileReward: number expected";
            if (message.guideTipsInitialCooldownTime != null && message.hasOwnProperty("guideTipsInitialCooldownTime"))
                if (!$util.isInteger(message.guideTipsInitialCooldownTime))
                    return "guideTipsInitialCooldownTime: integer expected";
            return null;
        };

        /**
         * Creates a RequestLobbyDataResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestLobbyDataResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestLobbyDataResult} RequestLobbyDataResult
         */
        RequestLobbyDataResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestLobbyDataResult)
                return object;
            var message = new $root.CVP.RequestLobbyDataResult();
            if (object.RoomDataList) {
                if (!Array.isArray(object.RoomDataList))
                    throw TypeError(".CVP.RequestLobbyDataResult.RoomDataList: array expected");
                message.RoomDataList = [];
                for (var i = 0; i < object.RoomDataList.length; ++i) {
                    if (typeof object.RoomDataList[i] !== "object")
                        throw TypeError(".CVP.RequestLobbyDataResult.RoomDataList: object expected");
                    message.RoomDataList[i] = $root.CVP.RoomData.fromObject(object.RoomDataList[i]);
                }
            }
            if (object.bonusInfo != null) {
                if (typeof object.bonusInfo !== "object")
                    throw TypeError(".CVP.RequestLobbyDataResult.bonusInfo: object expected");
                message.bonusInfo = $root.CVP.BonusInfo.fromObject(object.bonusInfo);
            }
            if (object.pigIsFull != null)
                message.pigIsFull = Boolean(object.pigIsFull);
            if (object.vaultIsOpen != null)
                message.vaultIsOpen = Boolean(object.vaultIsOpen);
            if (object.isHaveInterstitial != null)
                message.isHaveInterstitial = Boolean(object.isHaveInterstitial);
            if (object.bindReward != null)
                message.bindReward = Number(object.bindReward);
            if (object.inboxNumber != null)
                message.inboxNumber = Number(object.inboxNumber);
            if (object.achievementNumber != null)
                message.achievementNumber = Number(object.achievementNumber);
            if (object.isSignIn != null)
                message.isSignIn = Boolean(object.isSignIn);
            switch (object.signType) {
            case "NON":
            case 0:
                message.signType = 0;
                break;
            case "NORMAL":
            case 1:
                message.signType = 1;
                break;
            case "PURCHASE":
            case 2:
                message.signType = 2;
                break;
            case "BOTH":
            case 3:
                message.signType = 3;
                break;
            }
            if (object.VipDataList) {
                if (!Array.isArray(object.VipDataList))
                    throw TypeError(".CVP.RequestLobbyDataResult.VipDataList: array expected");
                message.VipDataList = [];
                for (var i = 0; i < object.VipDataList.length; ++i) {
                    if (typeof object.VipDataList[i] !== "object")
                        throw TypeError(".CVP.RequestLobbyDataResult.VipDataList: object expected");
                    message.VipDataList[i] = $root.CVP.VipData.fromObject(object.VipDataList[i]);
                }
            }
            if (object.gameAdIdList) {
                if (!Array.isArray(object.gameAdIdList))
                    throw TypeError(".CVP.RequestLobbyDataResult.gameAdIdList: array expected");
                message.gameAdIdList = [];
                for (var i = 0; i < object.gameAdIdList.length; ++i)
                    message.gameAdIdList[i] = String(object.gameAdIdList[i]);
            }
            if (object.isClaim != null)
                message.isClaim = Boolean(object.isClaim);
            if (object.isHaveFreeSubScribe != null)
                message.isHaveFreeSubScribe = Boolean(object.isHaveFreeSubScribe);
            if (object.isBuyInvitation != null)
                message.isBuyInvitation = Boolean(object.isBuyInvitation);
            if (object.isShowPersonalDeal != null)
                message.isShowPersonalDeal = Boolean(object.isShowPersonalDeal);
            if (object.guideTipsKeepTime != null)
                message.guideTipsKeepTime = object.guideTipsKeepTime | 0;
            if (object.guideTipsCoolDownTime != null)
                message.guideTipsCoolDownTime = object.guideTipsCoolDownTime | 0;
            if (object.frequency != null)
                message.frequency = object.frequency | 0;
            if (object.removeAd != null)
                message.removeAd = object.removeAd | 0;
            if (object.removeAdItem != null) {
                if (typeof object.removeAdItem !== "object")
                    throw TypeError(".CVP.RequestLobbyDataResult.removeAdItem: object expected");
                message.removeAdItem = $root.CVP.ShopItem.fromObject(object.removeAdItem);
            }
            if (object.changeProfileReward != null)
                message.changeProfileReward = Number(object.changeProfileReward);
            if (object.guideTipsInitialCooldownTime != null)
                message.guideTipsInitialCooldownTime = object.guideTipsInitialCooldownTime | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestLobbyDataResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestLobbyDataResult
         * @static
         * @param {CVP.RequestLobbyDataResult} message RequestLobbyDataResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestLobbyDataResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.RoomDataList = [];
                object.VipDataList = [];
                object.gameAdIdList = [];
            }
            if (options.defaults) {
                object.bonusInfo = null;
                object.pigIsFull = false;
                object.vaultIsOpen = false;
                object.isHaveInterstitial = false;
                object.bindReward = 0;
                object.inboxNumber = 0;
                object.achievementNumber = 0;
                object.isSignIn = false;
                object.signType = options.enums === String ? "NON" : 0;
                object.isClaim = false;
                object.isHaveFreeSubScribe = false;
                object.isBuyInvitation = false;
                object.isShowPersonalDeal = false;
                object.guideTipsKeepTime = 0;
                object.guideTipsCoolDownTime = 0;
                object.frequency = 0;
                object.removeAd = 0;
                object.removeAdItem = null;
                object.changeProfileReward = 0;
                object.guideTipsInitialCooldownTime = 0;
            }
            if (message.RoomDataList && message.RoomDataList.length) {
                object.RoomDataList = [];
                for (var j = 0; j < message.RoomDataList.length; ++j)
                    object.RoomDataList[j] = $root.CVP.RoomData.toObject(message.RoomDataList[j], options);
            }
            if (message.bonusInfo != null && message.hasOwnProperty("bonusInfo"))
                object.bonusInfo = $root.CVP.BonusInfo.toObject(message.bonusInfo, options);
            if (message.pigIsFull != null && message.hasOwnProperty("pigIsFull"))
                object.pigIsFull = message.pigIsFull;
            if (message.vaultIsOpen != null && message.hasOwnProperty("vaultIsOpen"))
                object.vaultIsOpen = message.vaultIsOpen;
            if (message.isHaveInterstitial != null && message.hasOwnProperty("isHaveInterstitial"))
                object.isHaveInterstitial = message.isHaveInterstitial;
            if (message.bindReward != null && message.hasOwnProperty("bindReward"))
                object.bindReward = options.json && !isFinite(message.bindReward) ? String(message.bindReward) : message.bindReward;
            if (message.inboxNumber != null && message.hasOwnProperty("inboxNumber"))
                object.inboxNumber = options.json && !isFinite(message.inboxNumber) ? String(message.inboxNumber) : message.inboxNumber;
            if (message.achievementNumber != null && message.hasOwnProperty("achievementNumber"))
                object.achievementNumber = options.json && !isFinite(message.achievementNumber) ? String(message.achievementNumber) : message.achievementNumber;
            if (message.isSignIn != null && message.hasOwnProperty("isSignIn"))
                object.isSignIn = message.isSignIn;
            if (message.signType != null && message.hasOwnProperty("signType"))
                object.signType = options.enums === String ? $root.CVP.SignType[message.signType] : message.signType;
            if (message.VipDataList && message.VipDataList.length) {
                object.VipDataList = [];
                for (var j = 0; j < message.VipDataList.length; ++j)
                    object.VipDataList[j] = $root.CVP.VipData.toObject(message.VipDataList[j], options);
            }
            if (message.gameAdIdList && message.gameAdIdList.length) {
                object.gameAdIdList = [];
                for (var j = 0; j < message.gameAdIdList.length; ++j)
                    object.gameAdIdList[j] = message.gameAdIdList[j];
            }
            if (message.isClaim != null && message.hasOwnProperty("isClaim"))
                object.isClaim = message.isClaim;
            if (message.isHaveFreeSubScribe != null && message.hasOwnProperty("isHaveFreeSubScribe"))
                object.isHaveFreeSubScribe = message.isHaveFreeSubScribe;
            if (message.isBuyInvitation != null && message.hasOwnProperty("isBuyInvitation"))
                object.isBuyInvitation = message.isBuyInvitation;
            if (message.isShowPersonalDeal != null && message.hasOwnProperty("isShowPersonalDeal"))
                object.isShowPersonalDeal = message.isShowPersonalDeal;
            if (message.guideTipsKeepTime != null && message.hasOwnProperty("guideTipsKeepTime"))
                object.guideTipsKeepTime = message.guideTipsKeepTime;
            if (message.guideTipsCoolDownTime != null && message.hasOwnProperty("guideTipsCoolDownTime"))
                object.guideTipsCoolDownTime = message.guideTipsCoolDownTime;
            if (message.frequency != null && message.hasOwnProperty("frequency"))
                object.frequency = message.frequency;
            if (message.removeAd != null && message.hasOwnProperty("removeAd"))
                object.removeAd = message.removeAd;
            if (message.removeAdItem != null && message.hasOwnProperty("removeAdItem"))
                object.removeAdItem = $root.CVP.ShopItem.toObject(message.removeAdItem, options);
            if (message.changeProfileReward != null && message.hasOwnProperty("changeProfileReward"))
                object.changeProfileReward = options.json && !isFinite(message.changeProfileReward) ? String(message.changeProfileReward) : message.changeProfileReward;
            if (message.guideTipsInitialCooldownTime != null && message.hasOwnProperty("guideTipsInitialCooldownTime"))
                object.guideTipsInitialCooldownTime = message.guideTipsInitialCooldownTime;
            return object;
        };

        /**
         * Converts this RequestLobbyDataResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestLobbyDataResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestLobbyDataResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestLobbyDataResult;
    })();

    CVP.RequestGetAdIdList = (function() {

        /**
         * Properties of a RequestGetAdIdList.
         * @memberof CVP
         * @interface IRequestGetAdIdList
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestGetAdIdList commonParams
         */

        /**
         * Constructs a new RequestGetAdIdList.
         * @memberof CVP
         * @classdesc Represents a RequestGetAdIdList.
         * @implements IRequestGetAdIdList
         * @constructor
         * @param {CVP.IRequestGetAdIdList=} [properties] Properties to set
         */
        function RequestGetAdIdList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGetAdIdList commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestGetAdIdList
         * @instance
         */
        RequestGetAdIdList.prototype.commonParams = null;

        /**
         * Creates a new RequestGetAdIdList instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGetAdIdList
         * @static
         * @param {CVP.IRequestGetAdIdList=} [properties] Properties to set
         * @returns {CVP.RequestGetAdIdList} RequestGetAdIdList instance
         */
        RequestGetAdIdList.create = function create(properties) {
            return new RequestGetAdIdList(properties);
        };

        /**
         * Encodes the specified RequestGetAdIdList message. Does not implicitly {@link CVP.RequestGetAdIdList.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGetAdIdList
         * @static
         * @param {CVP.IRequestGetAdIdList} message RequestGetAdIdList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetAdIdList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestGetAdIdList message, length delimited. Does not implicitly {@link CVP.RequestGetAdIdList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGetAdIdList
         * @static
         * @param {CVP.IRequestGetAdIdList} message RequestGetAdIdList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetAdIdList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGetAdIdList message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGetAdIdList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGetAdIdList} RequestGetAdIdList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetAdIdList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGetAdIdList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGetAdIdList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGetAdIdList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGetAdIdList} RequestGetAdIdList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetAdIdList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGetAdIdList message.
         * @function verify
         * @memberof CVP.RequestGetAdIdList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGetAdIdList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestGetAdIdList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGetAdIdList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGetAdIdList} RequestGetAdIdList
         */
        RequestGetAdIdList.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGetAdIdList)
                return object;
            var message = new $root.CVP.RequestGetAdIdList();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestGetAdIdList.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestGetAdIdList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGetAdIdList
         * @static
         * @param {CVP.RequestGetAdIdList} message RequestGetAdIdList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGetAdIdList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestGetAdIdList to JSON.
         * @function toJSON
         * @memberof CVP.RequestGetAdIdList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGetAdIdList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGetAdIdList;
    })();

    CVP.RequestGetAdIdListResult = (function() {

        /**
         * Properties of a RequestGetAdIdListResult.
         * @memberof CVP
         * @interface IRequestGetAdIdListResult
         * @property {Array.<string>|null} [gameAdIdList] RequestGetAdIdListResult gameAdIdList
         */

        /**
         * Constructs a new RequestGetAdIdListResult.
         * @memberof CVP
         * @classdesc Represents a RequestGetAdIdListResult.
         * @implements IRequestGetAdIdListResult
         * @constructor
         * @param {CVP.IRequestGetAdIdListResult=} [properties] Properties to set
         */
        function RequestGetAdIdListResult(properties) {
            this.gameAdIdList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGetAdIdListResult gameAdIdList.
         * @member {Array.<string>} gameAdIdList
         * @memberof CVP.RequestGetAdIdListResult
         * @instance
         */
        RequestGetAdIdListResult.prototype.gameAdIdList = $util.emptyArray;

        /**
         * Creates a new RequestGetAdIdListResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGetAdIdListResult
         * @static
         * @param {CVP.IRequestGetAdIdListResult=} [properties] Properties to set
         * @returns {CVP.RequestGetAdIdListResult} RequestGetAdIdListResult instance
         */
        RequestGetAdIdListResult.create = function create(properties) {
            return new RequestGetAdIdListResult(properties);
        };

        /**
         * Encodes the specified RequestGetAdIdListResult message. Does not implicitly {@link CVP.RequestGetAdIdListResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGetAdIdListResult
         * @static
         * @param {CVP.IRequestGetAdIdListResult} message RequestGetAdIdListResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetAdIdListResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameAdIdList != null && message.gameAdIdList.length)
                for (var i = 0; i < message.gameAdIdList.length; ++i)
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.gameAdIdList[i]);
            return writer;
        };

        /**
         * Encodes the specified RequestGetAdIdListResult message, length delimited. Does not implicitly {@link CVP.RequestGetAdIdListResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGetAdIdListResult
         * @static
         * @param {CVP.IRequestGetAdIdListResult} message RequestGetAdIdListResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetAdIdListResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGetAdIdListResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGetAdIdListResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGetAdIdListResult} RequestGetAdIdListResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetAdIdListResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGetAdIdListResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 12:
                    if (!(message.gameAdIdList && message.gameAdIdList.length))
                        message.gameAdIdList = [];
                    message.gameAdIdList.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGetAdIdListResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGetAdIdListResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGetAdIdListResult} RequestGetAdIdListResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetAdIdListResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGetAdIdListResult message.
         * @function verify
         * @memberof CVP.RequestGetAdIdListResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGetAdIdListResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameAdIdList != null && message.hasOwnProperty("gameAdIdList")) {
                if (!Array.isArray(message.gameAdIdList))
                    return "gameAdIdList: array expected";
                for (var i = 0; i < message.gameAdIdList.length; ++i)
                    if (!$util.isString(message.gameAdIdList[i]))
                        return "gameAdIdList: string[] expected";
            }
            return null;
        };

        /**
         * Creates a RequestGetAdIdListResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGetAdIdListResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGetAdIdListResult} RequestGetAdIdListResult
         */
        RequestGetAdIdListResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGetAdIdListResult)
                return object;
            var message = new $root.CVP.RequestGetAdIdListResult();
            if (object.gameAdIdList) {
                if (!Array.isArray(object.gameAdIdList))
                    throw TypeError(".CVP.RequestGetAdIdListResult.gameAdIdList: array expected");
                message.gameAdIdList = [];
                for (var i = 0; i < object.gameAdIdList.length; ++i)
                    message.gameAdIdList[i] = String(object.gameAdIdList[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestGetAdIdListResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGetAdIdListResult
         * @static
         * @param {CVP.RequestGetAdIdListResult} message RequestGetAdIdListResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGetAdIdListResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.gameAdIdList = [];
            if (message.gameAdIdList && message.gameAdIdList.length) {
                object.gameAdIdList = [];
                for (var j = 0; j < message.gameAdIdList.length; ++j)
                    object.gameAdIdList[j] = message.gameAdIdList[j];
            }
            return object;
        };

        /**
         * Converts this RequestGetAdIdListResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestGetAdIdListResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGetAdIdListResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGetAdIdListResult;
    })();

    /**
     * SignType enum.
     * @name CVP.SignType
     * @enum {string}
     * @property {number} NON=0 NON value
     * @property {number} NORMAL=1 NORMAL value
     * @property {number} PURCHASE=2 PURCHASE value
     * @property {number} BOTH=3 BOTH value
     */
    CVP.SignType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NON"] = 0;
        values[valuesById[1] = "NORMAL"] = 1;
        values[valuesById[2] = "PURCHASE"] = 2;
        values[valuesById[3] = "BOTH"] = 3;
        return values;
    })();

    /**
     * RoomType enum.
     * @name CVP.RoomType
     * @enum {string}
     * @property {number} NORMAL=0 NORMAL value
     * @property {number} UPDATING=1 UPDATING value
     * @property {number} COMINGSOON=2 COMINGSOON value
     * @property {number} UKNOWNCOMINGSOON=3 UKNOWNCOMINGSOON value
     */
    CVP.RoomType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NORMAL"] = 0;
        values[valuesById[1] = "UPDATING"] = 1;
        values[valuesById[2] = "COMINGSOON"] = 2;
        values[valuesById[3] = "UKNOWNCOMINGSOON"] = 3;
        return values;
    })();

    /**
     * RoomTag enum.
     * @name CVP.RoomTag
     * @enum {string}
     * @property {number} NORMAL=0 NORMAL value
     * @property {number} NEW=1 NEW value
     * @property {number} HOT=2 HOT value
     */
    CVP.RoomTag = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NORMAL"] = 0;
        values[valuesById[1] = "NEW"] = 1;
        values[valuesById[2] = "HOT"] = 2;
        return values;
    })();

    CVP.RoomData = (function() {

        /**
         * Properties of a RoomData.
         * @memberof CVP
         * @interface IRoomData
         * @property {number|null} [id] RoomData id
         * @property {string|null} [name] RoomData name
         * @property {Array.<number>|null} [handList] RoomData handList
         * @property {CVP.RoomType|null} [roomType] RoomData roomType
         * @property {Array.<CVP.RoomType>|null} [roomTypeList] RoomData roomTypeList
         * @property {CVP.RoomTag|null} [roomTag] RoomData roomTag
         * @property {number|null} [peopleNum] RoomData peopleNum
         */

        /**
         * Constructs a new RoomData.
         * @memberof CVP
         * @classdesc Represents a RoomData.
         * @implements IRoomData
         * @constructor
         * @param {CVP.IRoomData=} [properties] Properties to set
         */
        function RoomData(properties) {
            this.handList = [];
            this.roomTypeList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomData id.
         * @member {number} id
         * @memberof CVP.RoomData
         * @instance
         */
        RoomData.prototype.id = 0;

        /**
         * RoomData name.
         * @member {string} name
         * @memberof CVP.RoomData
         * @instance
         */
        RoomData.prototype.name = "";

        /**
         * RoomData handList.
         * @member {Array.<number>} handList
         * @memberof CVP.RoomData
         * @instance
         */
        RoomData.prototype.handList = $util.emptyArray;

        /**
         * RoomData roomType.
         * @member {CVP.RoomType} roomType
         * @memberof CVP.RoomData
         * @instance
         */
        RoomData.prototype.roomType = 0;

        /**
         * RoomData roomTypeList.
         * @member {Array.<CVP.RoomType>} roomTypeList
         * @memberof CVP.RoomData
         * @instance
         */
        RoomData.prototype.roomTypeList = $util.emptyArray;

        /**
         * RoomData roomTag.
         * @member {CVP.RoomTag} roomTag
         * @memberof CVP.RoomData
         * @instance
         */
        RoomData.prototype.roomTag = 0;

        /**
         * RoomData peopleNum.
         * @member {number} peopleNum
         * @memberof CVP.RoomData
         * @instance
         */
        RoomData.prototype.peopleNum = 0;

        /**
         * Creates a new RoomData instance using the specified properties.
         * @function create
         * @memberof CVP.RoomData
         * @static
         * @param {CVP.IRoomData=} [properties] Properties to set
         * @returns {CVP.RoomData} RoomData instance
         */
        RoomData.create = function create(properties) {
            return new RoomData(properties);
        };

        /**
         * Encodes the specified RoomData message. Does not implicitly {@link CVP.RoomData.verify|verify} messages.
         * @function encode
         * @memberof CVP.RoomData
         * @static
         * @param {CVP.IRoomData} message RoomData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.handList != null && message.handList.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.handList.length; ++i)
                    writer.int32(message.handList[i]);
                writer.ldelim();
            }
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomType);
            if (message.roomTypeList != null && message.roomTypeList.length) {
                writer.uint32(/* id 5, wireType 2 =*/42).fork();
                for (var i = 0; i < message.roomTypeList.length; ++i)
                    writer.int32(message.roomTypeList[i]);
                writer.ldelim();
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.roomTag);
            if (message.peopleNum != null && message.hasOwnProperty("peopleNum"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.peopleNum);
            return writer;
        };

        /**
         * Encodes the specified RoomData message, length delimited. Does not implicitly {@link CVP.RoomData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RoomData
         * @static
         * @param {CVP.IRoomData} message RoomData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RoomData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RoomData} RoomData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RoomData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.int32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    if (!(message.handList && message.handList.length))
                        message.handList = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.handList.push(reader.int32());
                    } else
                        message.handList.push(reader.int32());
                    break;
                case 4:
                    message.roomType = reader.int32();
                    break;
                case 5:
                    if (!(message.roomTypeList && message.roomTypeList.length))
                        message.roomTypeList = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.roomTypeList.push(reader.int32());
                    } else
                        message.roomTypeList.push(reader.int32());
                    break;
                case 6:
                    message.roomTag = reader.int32();
                    break;
                case 7:
                    message.peopleNum = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RoomData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RoomData} RoomData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomData message.
         * @function verify
         * @memberof CVP.RoomData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.handList != null && message.hasOwnProperty("handList")) {
                if (!Array.isArray(message.handList))
                    return "handList: array expected";
                for (var i = 0; i < message.handList.length; ++i)
                    if (!$util.isInteger(message.handList[i]))
                        return "handList: integer[] expected";
            }
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                switch (message.roomType) {
                default:
                    return "roomType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.roomTypeList != null && message.hasOwnProperty("roomTypeList")) {
                if (!Array.isArray(message.roomTypeList))
                    return "roomTypeList: array expected";
                for (var i = 0; i < message.roomTypeList.length; ++i)
                    switch (message.roomTypeList[i]) {
                    default:
                        return "roomTypeList: enum value[] expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                switch (message.roomTag) {
                default:
                    return "roomTag: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.peopleNum != null && message.hasOwnProperty("peopleNum"))
                if (!$util.isInteger(message.peopleNum))
                    return "peopleNum: integer expected";
            return null;
        };

        /**
         * Creates a RoomData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RoomData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RoomData} RoomData
         */
        RoomData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RoomData)
                return object;
            var message = new $root.CVP.RoomData();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.handList) {
                if (!Array.isArray(object.handList))
                    throw TypeError(".CVP.RoomData.handList: array expected");
                message.handList = [];
                for (var i = 0; i < object.handList.length; ++i)
                    message.handList[i] = object.handList[i] | 0;
            }
            switch (object.roomType) {
            case "NORMAL":
            case 0:
                message.roomType = 0;
                break;
            case "UPDATING":
            case 1:
                message.roomType = 1;
                break;
            case "COMINGSOON":
            case 2:
                message.roomType = 2;
                break;
            case "UKNOWNCOMINGSOON":
            case 3:
                message.roomType = 3;
                break;
            }
            if (object.roomTypeList) {
                if (!Array.isArray(object.roomTypeList))
                    throw TypeError(".CVP.RoomData.roomTypeList: array expected");
                message.roomTypeList = [];
                for (var i = 0; i < object.roomTypeList.length; ++i)
                    switch (object.roomTypeList[i]) {
                    default:
                    case "NORMAL":
                    case 0:
                        message.roomTypeList[i] = 0;
                        break;
                    case "UPDATING":
                    case 1:
                        message.roomTypeList[i] = 1;
                        break;
                    case "COMINGSOON":
                    case 2:
                        message.roomTypeList[i] = 2;
                        break;
                    case "UKNOWNCOMINGSOON":
                    case 3:
                        message.roomTypeList[i] = 3;
                        break;
                    }
            }
            switch (object.roomTag) {
            case "NORMAL":
            case 0:
                message.roomTag = 0;
                break;
            case "NEW":
            case 1:
                message.roomTag = 1;
                break;
            case "HOT":
            case 2:
                message.roomTag = 2;
                break;
            }
            if (object.peopleNum != null)
                message.peopleNum = object.peopleNum | 0;
            return message;
        };

        /**
         * Creates a plain object from a RoomData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RoomData
         * @static
         * @param {CVP.RoomData} message RoomData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.handList = [];
                object.roomTypeList = [];
            }
            if (options.defaults) {
                object.id = 0;
                object.name = "";
                object.roomType = options.enums === String ? "NORMAL" : 0;
                object.roomTag = options.enums === String ? "NORMAL" : 0;
                object.peopleNum = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.handList && message.handList.length) {
                object.handList = [];
                for (var j = 0; j < message.handList.length; ++j)
                    object.handList[j] = message.handList[j];
            }
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                object.roomType = options.enums === String ? $root.CVP.RoomType[message.roomType] : message.roomType;
            if (message.roomTypeList && message.roomTypeList.length) {
                object.roomTypeList = [];
                for (var j = 0; j < message.roomTypeList.length; ++j)
                    object.roomTypeList[j] = options.enums === String ? $root.CVP.RoomType[message.roomTypeList[j]] : message.roomTypeList[j];
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = options.enums === String ? $root.CVP.RoomTag[message.roomTag] : message.roomTag;
            if (message.peopleNum != null && message.hasOwnProperty("peopleNum"))
                object.peopleNum = message.peopleNum;
            return object;
        };

        /**
         * Converts this RoomData to JSON.
         * @function toJSON
         * @memberof CVP.RoomData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomData;
    })();

    CVP.UpdateSystemInforms = (function() {

        /**
         * Properties of an UpdateSystemInforms.
         * @memberof CVP
         * @interface IUpdateSystemInforms
         * @property {Array.<CVP.ISysytemInforms>|null} [systemInforms] UpdateSystemInforms systemInforms
         */

        /**
         * Constructs a new UpdateSystemInforms.
         * @memberof CVP
         * @classdesc Represents an UpdateSystemInforms.
         * @implements IUpdateSystemInforms
         * @constructor
         * @param {CVP.IUpdateSystemInforms=} [properties] Properties to set
         */
        function UpdateSystemInforms(properties) {
            this.systemInforms = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdateSystemInforms systemInforms.
         * @member {Array.<CVP.ISysytemInforms>} systemInforms
         * @memberof CVP.UpdateSystemInforms
         * @instance
         */
        UpdateSystemInforms.prototype.systemInforms = $util.emptyArray;

        /**
         * Creates a new UpdateSystemInforms instance using the specified properties.
         * @function create
         * @memberof CVP.UpdateSystemInforms
         * @static
         * @param {CVP.IUpdateSystemInforms=} [properties] Properties to set
         * @returns {CVP.UpdateSystemInforms} UpdateSystemInforms instance
         */
        UpdateSystemInforms.create = function create(properties) {
            return new UpdateSystemInforms(properties);
        };

        /**
         * Encodes the specified UpdateSystemInforms message. Does not implicitly {@link CVP.UpdateSystemInforms.verify|verify} messages.
         * @function encode
         * @memberof CVP.UpdateSystemInforms
         * @static
         * @param {CVP.IUpdateSystemInforms} message UpdateSystemInforms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateSystemInforms.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.systemInforms != null && message.systemInforms.length)
                for (var i = 0; i < message.systemInforms.length; ++i)
                    $root.CVP.SysytemInforms.encode(message.systemInforms[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified UpdateSystemInforms message, length delimited. Does not implicitly {@link CVP.UpdateSystemInforms.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UpdateSystemInforms
         * @static
         * @param {CVP.IUpdateSystemInforms} message UpdateSystemInforms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateSystemInforms.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdateSystemInforms message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UpdateSystemInforms
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UpdateSystemInforms} UpdateSystemInforms
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateSystemInforms.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UpdateSystemInforms();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.systemInforms && message.systemInforms.length))
                        message.systemInforms = [];
                    message.systemInforms.push($root.CVP.SysytemInforms.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdateSystemInforms message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UpdateSystemInforms
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UpdateSystemInforms} UpdateSystemInforms
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateSystemInforms.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdateSystemInforms message.
         * @function verify
         * @memberof CVP.UpdateSystemInforms
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdateSystemInforms.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.systemInforms != null && message.hasOwnProperty("systemInforms")) {
                if (!Array.isArray(message.systemInforms))
                    return "systemInforms: array expected";
                for (var i = 0; i < message.systemInforms.length; ++i) {
                    var error = $root.CVP.SysytemInforms.verify(message.systemInforms[i]);
                    if (error)
                        return "systemInforms." + error;
                }
            }
            return null;
        };

        /**
         * Creates an UpdateSystemInforms message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UpdateSystemInforms
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UpdateSystemInforms} UpdateSystemInforms
         */
        UpdateSystemInforms.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UpdateSystemInforms)
                return object;
            var message = new $root.CVP.UpdateSystemInforms();
            if (object.systemInforms) {
                if (!Array.isArray(object.systemInforms))
                    throw TypeError(".CVP.UpdateSystemInforms.systemInforms: array expected");
                message.systemInforms = [];
                for (var i = 0; i < object.systemInforms.length; ++i) {
                    if (typeof object.systemInforms[i] !== "object")
                        throw TypeError(".CVP.UpdateSystemInforms.systemInforms: object expected");
                    message.systemInforms[i] = $root.CVP.SysytemInforms.fromObject(object.systemInforms[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an UpdateSystemInforms message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UpdateSystemInforms
         * @static
         * @param {CVP.UpdateSystemInforms} message UpdateSystemInforms
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdateSystemInforms.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.systemInforms = [];
            if (message.systemInforms && message.systemInforms.length) {
                object.systemInforms = [];
                for (var j = 0; j < message.systemInforms.length; ++j)
                    object.systemInforms[j] = $root.CVP.SysytemInforms.toObject(message.systemInforms[j], options);
            }
            return object;
        };

        /**
         * Converts this UpdateSystemInforms to JSON.
         * @function toJSON
         * @memberof CVP.UpdateSystemInforms
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdateSystemInforms.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateSystemInforms;
    })();

    /**
     * WinType enum.
     * @name CVP.WinType
     * @enum {string}
     * @property {number} BIGWIN=0 BIGWIN value
     * @property {number} JACKPOT=1 JACKPOT value
     */
    CVP.WinType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "BIGWIN"] = 0;
        values[valuesById[1] = "JACKPOT"] = 1;
        return values;
    })();

    CVP.SysytemInforms = (function() {

        /**
         * Properties of a SysytemInforms.
         * @memberof CVP
         * @interface ISysytemInforms
         * @property {string|null} [name] SysytemInforms name
         * @property {number|null} [winCoins] SysytemInforms winCoins
         * @property {number|null} [roomId] SysytemInforms roomId
         * @property {CVP.WinType|null} [type] SysytemInforms type
         * @property {number|Long|null} [time] SysytemInforms time
         */

        /**
         * Constructs a new SysytemInforms.
         * @memberof CVP
         * @classdesc Represents a SysytemInforms.
         * @implements ISysytemInforms
         * @constructor
         * @param {CVP.ISysytemInforms=} [properties] Properties to set
         */
        function SysytemInforms(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SysytemInforms name.
         * @member {string} name
         * @memberof CVP.SysytemInforms
         * @instance
         */
        SysytemInforms.prototype.name = "";

        /**
         * SysytemInforms winCoins.
         * @member {number} winCoins
         * @memberof CVP.SysytemInforms
         * @instance
         */
        SysytemInforms.prototype.winCoins = 0;

        /**
         * SysytemInforms roomId.
         * @member {number} roomId
         * @memberof CVP.SysytemInforms
         * @instance
         */
        SysytemInforms.prototype.roomId = 0;

        /**
         * SysytemInforms type.
         * @member {CVP.WinType} type
         * @memberof CVP.SysytemInforms
         * @instance
         */
        SysytemInforms.prototype.type = 0;

        /**
         * SysytemInforms time.
         * @member {number|Long} time
         * @memberof CVP.SysytemInforms
         * @instance
         */
        SysytemInforms.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new SysytemInforms instance using the specified properties.
         * @function create
         * @memberof CVP.SysytemInforms
         * @static
         * @param {CVP.ISysytemInforms=} [properties] Properties to set
         * @returns {CVP.SysytemInforms} SysytemInforms instance
         */
        SysytemInforms.create = function create(properties) {
            return new SysytemInforms(properties);
        };

        /**
         * Encodes the specified SysytemInforms message. Does not implicitly {@link CVP.SysytemInforms.verify|verify} messages.
         * @function encode
         * @memberof CVP.SysytemInforms
         * @static
         * @param {CVP.ISysytemInforms} message SysytemInforms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SysytemInforms.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.winCoins != null && message.hasOwnProperty("winCoins"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.winCoins);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomId);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.time);
            return writer;
        };

        /**
         * Encodes the specified SysytemInforms message, length delimited. Does not implicitly {@link CVP.SysytemInforms.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SysytemInforms
         * @static
         * @param {CVP.ISysytemInforms} message SysytemInforms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SysytemInforms.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SysytemInforms message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SysytemInforms
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SysytemInforms} SysytemInforms
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SysytemInforms.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SysytemInforms();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.winCoins = reader.double();
                    break;
                case 3:
                    message.roomId = reader.int32();
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                case 5:
                    message.time = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SysytemInforms message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SysytemInforms
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SysytemInforms} SysytemInforms
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SysytemInforms.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SysytemInforms message.
         * @function verify
         * @memberof CVP.SysytemInforms
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SysytemInforms.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.winCoins != null && message.hasOwnProperty("winCoins"))
                if (typeof message.winCoins !== "number")
                    return "winCoins: number expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                default:
                    return "type: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                    return "time: integer|Long expected";
            return null;
        };

        /**
         * Creates a SysytemInforms message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SysytemInforms
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SysytemInforms} SysytemInforms
         */
        SysytemInforms.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SysytemInforms)
                return object;
            var message = new $root.CVP.SysytemInforms();
            if (object.name != null)
                message.name = String(object.name);
            if (object.winCoins != null)
                message.winCoins = Number(object.winCoins);
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            switch (object.type) {
            case "BIGWIN":
            case 0:
                message.type = 0;
                break;
            case "JACKPOT":
            case 1:
                message.type = 1;
                break;
            }
            if (object.time != null)
                if ($util.Long)
                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                else if (typeof object.time === "string")
                    message.time = parseInt(object.time, 10);
                else if (typeof object.time === "number")
                    message.time = object.time;
                else if (typeof object.time === "object")
                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a SysytemInforms message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SysytemInforms
         * @static
         * @param {CVP.SysytemInforms} message SysytemInforms
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SysytemInforms.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.winCoins = 0;
                object.roomId = 0;
                object.type = options.enums === String ? "BIGWIN" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.time = options.longs === String ? "0" : 0;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.winCoins != null && message.hasOwnProperty("winCoins"))
                object.winCoins = options.json && !isFinite(message.winCoins) ? String(message.winCoins) : message.winCoins;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.CVP.WinType[message.type] : message.type;
            if (message.time != null && message.hasOwnProperty("time"))
                if (typeof message.time === "number")
                    object.time = options.longs === String ? String(message.time) : message.time;
                else
                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
            return object;
        };

        /**
         * Converts this SysytemInforms to JSON.
         * @function toJSON
         * @memberof CVP.SysytemInforms
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SysytemInforms.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SysytemInforms;
    })();

    CVP.SendUserPushToken = (function() {

        /**
         * Properties of a SendUserPushToken.
         * @memberof CVP
         * @interface ISendUserPushToken
         * @property {string|null} [pushtoken] SendUserPushToken pushtoken
         */

        /**
         * Constructs a new SendUserPushToken.
         * @memberof CVP
         * @classdesc Represents a SendUserPushToken.
         * @implements ISendUserPushToken
         * @constructor
         * @param {CVP.ISendUserPushToken=} [properties] Properties to set
         */
        function SendUserPushToken(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendUserPushToken pushtoken.
         * @member {string} pushtoken
         * @memberof CVP.SendUserPushToken
         * @instance
         */
        SendUserPushToken.prototype.pushtoken = "";

        /**
         * Creates a new SendUserPushToken instance using the specified properties.
         * @function create
         * @memberof CVP.SendUserPushToken
         * @static
         * @param {CVP.ISendUserPushToken=} [properties] Properties to set
         * @returns {CVP.SendUserPushToken} SendUserPushToken instance
         */
        SendUserPushToken.create = function create(properties) {
            return new SendUserPushToken(properties);
        };

        /**
         * Encodes the specified SendUserPushToken message. Does not implicitly {@link CVP.SendUserPushToken.verify|verify} messages.
         * @function encode
         * @memberof CVP.SendUserPushToken
         * @static
         * @param {CVP.ISendUserPushToken} message SendUserPushToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendUserPushToken.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pushtoken != null && message.hasOwnProperty("pushtoken"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pushtoken);
            return writer;
        };

        /**
         * Encodes the specified SendUserPushToken message, length delimited. Does not implicitly {@link CVP.SendUserPushToken.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SendUserPushToken
         * @static
         * @param {CVP.ISendUserPushToken} message SendUserPushToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendUserPushToken.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendUserPushToken message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SendUserPushToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SendUserPushToken} SendUserPushToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendUserPushToken.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SendUserPushToken();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pushtoken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendUserPushToken message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SendUserPushToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SendUserPushToken} SendUserPushToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendUserPushToken.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendUserPushToken message.
         * @function verify
         * @memberof CVP.SendUserPushToken
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendUserPushToken.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pushtoken != null && message.hasOwnProperty("pushtoken"))
                if (!$util.isString(message.pushtoken))
                    return "pushtoken: string expected";
            return null;
        };

        /**
         * Creates a SendUserPushToken message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SendUserPushToken
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SendUserPushToken} SendUserPushToken
         */
        SendUserPushToken.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SendUserPushToken)
                return object;
            var message = new $root.CVP.SendUserPushToken();
            if (object.pushtoken != null)
                message.pushtoken = String(object.pushtoken);
            return message;
        };

        /**
         * Creates a plain object from a SendUserPushToken message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SendUserPushToken
         * @static
         * @param {CVP.SendUserPushToken} message SendUserPushToken
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendUserPushToken.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.pushtoken = "";
            if (message.pushtoken != null && message.hasOwnProperty("pushtoken"))
                object.pushtoken = message.pushtoken;
            return object;
        };

        /**
         * Converts this SendUserPushToken to JSON.
         * @function toJSON
         * @memberof CVP.SendUserPushToken
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendUserPushToken.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendUserPushToken;
    })();

    CVP.RequestGetChangeProfileReward = (function() {

        /**
         * Properties of a RequestGetChangeProfileReward.
         * @memberof CVP
         * @interface IRequestGetChangeProfileReward
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestGetChangeProfileReward commonParams
         */

        /**
         * Constructs a new RequestGetChangeProfileReward.
         * @memberof CVP
         * @classdesc Represents a RequestGetChangeProfileReward.
         * @implements IRequestGetChangeProfileReward
         * @constructor
         * @param {CVP.IRequestGetChangeProfileReward=} [properties] Properties to set
         */
        function RequestGetChangeProfileReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGetChangeProfileReward commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestGetChangeProfileReward
         * @instance
         */
        RequestGetChangeProfileReward.prototype.commonParams = null;

        /**
         * Creates a new RequestGetChangeProfileReward instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGetChangeProfileReward
         * @static
         * @param {CVP.IRequestGetChangeProfileReward=} [properties] Properties to set
         * @returns {CVP.RequestGetChangeProfileReward} RequestGetChangeProfileReward instance
         */
        RequestGetChangeProfileReward.create = function create(properties) {
            return new RequestGetChangeProfileReward(properties);
        };

        /**
         * Encodes the specified RequestGetChangeProfileReward message. Does not implicitly {@link CVP.RequestGetChangeProfileReward.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGetChangeProfileReward
         * @static
         * @param {CVP.IRequestGetChangeProfileReward} message RequestGetChangeProfileReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetChangeProfileReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestGetChangeProfileReward message, length delimited. Does not implicitly {@link CVP.RequestGetChangeProfileReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGetChangeProfileReward
         * @static
         * @param {CVP.IRequestGetChangeProfileReward} message RequestGetChangeProfileReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetChangeProfileReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGetChangeProfileReward message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGetChangeProfileReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGetChangeProfileReward} RequestGetChangeProfileReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetChangeProfileReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGetChangeProfileReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGetChangeProfileReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGetChangeProfileReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGetChangeProfileReward} RequestGetChangeProfileReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetChangeProfileReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGetChangeProfileReward message.
         * @function verify
         * @memberof CVP.RequestGetChangeProfileReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGetChangeProfileReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestGetChangeProfileReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGetChangeProfileReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGetChangeProfileReward} RequestGetChangeProfileReward
         */
        RequestGetChangeProfileReward.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGetChangeProfileReward)
                return object;
            var message = new $root.CVP.RequestGetChangeProfileReward();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestGetChangeProfileReward.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestGetChangeProfileReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGetChangeProfileReward
         * @static
         * @param {CVP.RequestGetChangeProfileReward} message RequestGetChangeProfileReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGetChangeProfileReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestGetChangeProfileReward to JSON.
         * @function toJSON
         * @memberof CVP.RequestGetChangeProfileReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGetChangeProfileReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGetChangeProfileReward;
    })();

    CVP.RequestGetChangeProfileRewardResult = (function() {

        /**
         * Properties of a RequestGetChangeProfileRewardResult.
         * @memberof CVP
         * @interface IRequestGetChangeProfileRewardResult
         * @property {number|null} [coins] RequestGetChangeProfileRewardResult coins
         */

        /**
         * Constructs a new RequestGetChangeProfileRewardResult.
         * @memberof CVP
         * @classdesc Represents a RequestGetChangeProfileRewardResult.
         * @implements IRequestGetChangeProfileRewardResult
         * @constructor
         * @param {CVP.IRequestGetChangeProfileRewardResult=} [properties] Properties to set
         */
        function RequestGetChangeProfileRewardResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGetChangeProfileRewardResult coins.
         * @member {number} coins
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @instance
         */
        RequestGetChangeProfileRewardResult.prototype.coins = 0;

        /**
         * Creates a new RequestGetChangeProfileRewardResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @static
         * @param {CVP.IRequestGetChangeProfileRewardResult=} [properties] Properties to set
         * @returns {CVP.RequestGetChangeProfileRewardResult} RequestGetChangeProfileRewardResult instance
         */
        RequestGetChangeProfileRewardResult.create = function create(properties) {
            return new RequestGetChangeProfileRewardResult(properties);
        };

        /**
         * Encodes the specified RequestGetChangeProfileRewardResult message. Does not implicitly {@link CVP.RequestGetChangeProfileRewardResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @static
         * @param {CVP.IRequestGetChangeProfileRewardResult} message RequestGetChangeProfileRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetChangeProfileRewardResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            return writer;
        };

        /**
         * Encodes the specified RequestGetChangeProfileRewardResult message, length delimited. Does not implicitly {@link CVP.RequestGetChangeProfileRewardResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @static
         * @param {CVP.IRequestGetChangeProfileRewardResult} message RequestGetChangeProfileRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetChangeProfileRewardResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGetChangeProfileRewardResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGetChangeProfileRewardResult} RequestGetChangeProfileRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetChangeProfileRewardResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGetChangeProfileRewardResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGetChangeProfileRewardResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGetChangeProfileRewardResult} RequestGetChangeProfileRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetChangeProfileRewardResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGetChangeProfileRewardResult message.
         * @function verify
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGetChangeProfileRewardResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            return null;
        };

        /**
         * Creates a RequestGetChangeProfileRewardResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGetChangeProfileRewardResult} RequestGetChangeProfileRewardResult
         */
        RequestGetChangeProfileRewardResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGetChangeProfileRewardResult)
                return object;
            var message = new $root.CVP.RequestGetChangeProfileRewardResult();
            if (object.coins != null)
                message.coins = Number(object.coins);
            return message;
        };

        /**
         * Creates a plain object from a RequestGetChangeProfileRewardResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @static
         * @param {CVP.RequestGetChangeProfileRewardResult} message RequestGetChangeProfileRewardResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGetChangeProfileRewardResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.coins = 0;
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            return object;
        };

        /**
         * Converts this RequestGetChangeProfileRewardResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestGetChangeProfileRewardResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGetChangeProfileRewardResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGetChangeProfileRewardResult;
    })();

    CVP.RequestGetRoomPeopleNum = (function() {

        /**
         * Properties of a RequestGetRoomPeopleNum.
         * @memberof CVP
         * @interface IRequestGetRoomPeopleNum
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestGetRoomPeopleNum commonParams
         */

        /**
         * Constructs a new RequestGetRoomPeopleNum.
         * @memberof CVP
         * @classdesc Represents a RequestGetRoomPeopleNum.
         * @implements IRequestGetRoomPeopleNum
         * @constructor
         * @param {CVP.IRequestGetRoomPeopleNum=} [properties] Properties to set
         */
        function RequestGetRoomPeopleNum(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGetRoomPeopleNum commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestGetRoomPeopleNum
         * @instance
         */
        RequestGetRoomPeopleNum.prototype.commonParams = null;

        /**
         * Creates a new RequestGetRoomPeopleNum instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGetRoomPeopleNum
         * @static
         * @param {CVP.IRequestGetRoomPeopleNum=} [properties] Properties to set
         * @returns {CVP.RequestGetRoomPeopleNum} RequestGetRoomPeopleNum instance
         */
        RequestGetRoomPeopleNum.create = function create(properties) {
            return new RequestGetRoomPeopleNum(properties);
        };

        /**
         * Encodes the specified RequestGetRoomPeopleNum message. Does not implicitly {@link CVP.RequestGetRoomPeopleNum.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGetRoomPeopleNum
         * @static
         * @param {CVP.IRequestGetRoomPeopleNum} message RequestGetRoomPeopleNum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetRoomPeopleNum.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestGetRoomPeopleNum message, length delimited. Does not implicitly {@link CVP.RequestGetRoomPeopleNum.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGetRoomPeopleNum
         * @static
         * @param {CVP.IRequestGetRoomPeopleNum} message RequestGetRoomPeopleNum message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetRoomPeopleNum.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGetRoomPeopleNum message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGetRoomPeopleNum
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGetRoomPeopleNum} RequestGetRoomPeopleNum
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetRoomPeopleNum.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGetRoomPeopleNum();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGetRoomPeopleNum message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGetRoomPeopleNum
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGetRoomPeopleNum} RequestGetRoomPeopleNum
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetRoomPeopleNum.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGetRoomPeopleNum message.
         * @function verify
         * @memberof CVP.RequestGetRoomPeopleNum
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGetRoomPeopleNum.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestGetRoomPeopleNum message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGetRoomPeopleNum
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGetRoomPeopleNum} RequestGetRoomPeopleNum
         */
        RequestGetRoomPeopleNum.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGetRoomPeopleNum)
                return object;
            var message = new $root.CVP.RequestGetRoomPeopleNum();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestGetRoomPeopleNum.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestGetRoomPeopleNum message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGetRoomPeopleNum
         * @static
         * @param {CVP.RequestGetRoomPeopleNum} message RequestGetRoomPeopleNum
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGetRoomPeopleNum.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestGetRoomPeopleNum to JSON.
         * @function toJSON
         * @memberof CVP.RequestGetRoomPeopleNum
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGetRoomPeopleNum.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGetRoomPeopleNum;
    })();

    CVP.RequestGetRoomPeopleNumResult = (function() {

        /**
         * Properties of a RequestGetRoomPeopleNumResult.
         * @memberof CVP
         * @interface IRequestGetRoomPeopleNumResult
         * @property {Array.<CVP.IRoomData>|null} [RoomDataList] RequestGetRoomPeopleNumResult RoomDataList
         */

        /**
         * Constructs a new RequestGetRoomPeopleNumResult.
         * @memberof CVP
         * @classdesc Represents a RequestGetRoomPeopleNumResult.
         * @implements IRequestGetRoomPeopleNumResult
         * @constructor
         * @param {CVP.IRequestGetRoomPeopleNumResult=} [properties] Properties to set
         */
        function RequestGetRoomPeopleNumResult(properties) {
            this.RoomDataList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGetRoomPeopleNumResult RoomDataList.
         * @member {Array.<CVP.IRoomData>} RoomDataList
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @instance
         */
        RequestGetRoomPeopleNumResult.prototype.RoomDataList = $util.emptyArray;

        /**
         * Creates a new RequestGetRoomPeopleNumResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @static
         * @param {CVP.IRequestGetRoomPeopleNumResult=} [properties] Properties to set
         * @returns {CVP.RequestGetRoomPeopleNumResult} RequestGetRoomPeopleNumResult instance
         */
        RequestGetRoomPeopleNumResult.create = function create(properties) {
            return new RequestGetRoomPeopleNumResult(properties);
        };

        /**
         * Encodes the specified RequestGetRoomPeopleNumResult message. Does not implicitly {@link CVP.RequestGetRoomPeopleNumResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @static
         * @param {CVP.IRequestGetRoomPeopleNumResult} message RequestGetRoomPeopleNumResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetRoomPeopleNumResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.RoomDataList != null && message.RoomDataList.length)
                for (var i = 0; i < message.RoomDataList.length; ++i)
                    $root.CVP.RoomData.encode(message.RoomDataList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestGetRoomPeopleNumResult message, length delimited. Does not implicitly {@link CVP.RequestGetRoomPeopleNumResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @static
         * @param {CVP.IRequestGetRoomPeopleNumResult} message RequestGetRoomPeopleNumResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGetRoomPeopleNumResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGetRoomPeopleNumResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGetRoomPeopleNumResult} RequestGetRoomPeopleNumResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetRoomPeopleNumResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGetRoomPeopleNumResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.RoomDataList && message.RoomDataList.length))
                        message.RoomDataList = [];
                    message.RoomDataList.push($root.CVP.RoomData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGetRoomPeopleNumResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGetRoomPeopleNumResult} RequestGetRoomPeopleNumResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGetRoomPeopleNumResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGetRoomPeopleNumResult message.
         * @function verify
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGetRoomPeopleNumResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.RoomDataList != null && message.hasOwnProperty("RoomDataList")) {
                if (!Array.isArray(message.RoomDataList))
                    return "RoomDataList: array expected";
                for (var i = 0; i < message.RoomDataList.length; ++i) {
                    var error = $root.CVP.RoomData.verify(message.RoomDataList[i]);
                    if (error)
                        return "RoomDataList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestGetRoomPeopleNumResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGetRoomPeopleNumResult} RequestGetRoomPeopleNumResult
         */
        RequestGetRoomPeopleNumResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGetRoomPeopleNumResult)
                return object;
            var message = new $root.CVP.RequestGetRoomPeopleNumResult();
            if (object.RoomDataList) {
                if (!Array.isArray(object.RoomDataList))
                    throw TypeError(".CVP.RequestGetRoomPeopleNumResult.RoomDataList: array expected");
                message.RoomDataList = [];
                for (var i = 0; i < object.RoomDataList.length; ++i) {
                    if (typeof object.RoomDataList[i] !== "object")
                        throw TypeError(".CVP.RequestGetRoomPeopleNumResult.RoomDataList: object expected");
                    message.RoomDataList[i] = $root.CVP.RoomData.fromObject(object.RoomDataList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestGetRoomPeopleNumResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @static
         * @param {CVP.RequestGetRoomPeopleNumResult} message RequestGetRoomPeopleNumResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGetRoomPeopleNumResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.RoomDataList = [];
            if (message.RoomDataList && message.RoomDataList.length) {
                object.RoomDataList = [];
                for (var j = 0; j < message.RoomDataList.length; ++j)
                    object.RoomDataList[j] = $root.CVP.RoomData.toObject(message.RoomDataList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestGetRoomPeopleNumResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestGetRoomPeopleNumResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGetRoomPeopleNumResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGetRoomPeopleNumResult;
    })();

    CVP.RequestSystemInforms = (function() {

        /**
         * Properties of a RequestSystemInforms.
         * @memberof CVP
         * @interface IRequestSystemInforms
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestSystemInforms commonParams
         */

        /**
         * Constructs a new RequestSystemInforms.
         * @memberof CVP
         * @classdesc Represents a RequestSystemInforms.
         * @implements IRequestSystemInforms
         * @constructor
         * @param {CVP.IRequestSystemInforms=} [properties] Properties to set
         */
        function RequestSystemInforms(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSystemInforms commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestSystemInforms
         * @instance
         */
        RequestSystemInforms.prototype.commonParams = null;

        /**
         * Creates a new RequestSystemInforms instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSystemInforms
         * @static
         * @param {CVP.IRequestSystemInforms=} [properties] Properties to set
         * @returns {CVP.RequestSystemInforms} RequestSystemInforms instance
         */
        RequestSystemInforms.create = function create(properties) {
            return new RequestSystemInforms(properties);
        };

        /**
         * Encodes the specified RequestSystemInforms message. Does not implicitly {@link CVP.RequestSystemInforms.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSystemInforms
         * @static
         * @param {CVP.IRequestSystemInforms} message RequestSystemInforms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSystemInforms.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestSystemInforms message, length delimited. Does not implicitly {@link CVP.RequestSystemInforms.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSystemInforms
         * @static
         * @param {CVP.IRequestSystemInforms} message RequestSystemInforms message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSystemInforms.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSystemInforms message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSystemInforms
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSystemInforms} RequestSystemInforms
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSystemInforms.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSystemInforms();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSystemInforms message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSystemInforms
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSystemInforms} RequestSystemInforms
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSystemInforms.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSystemInforms message.
         * @function verify
         * @memberof CVP.RequestSystemInforms
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSystemInforms.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestSystemInforms message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSystemInforms
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSystemInforms} RequestSystemInforms
         */
        RequestSystemInforms.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSystemInforms)
                return object;
            var message = new $root.CVP.RequestSystemInforms();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestSystemInforms.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestSystemInforms message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSystemInforms
         * @static
         * @param {CVP.RequestSystemInforms} message RequestSystemInforms
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSystemInforms.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestSystemInforms to JSON.
         * @function toJSON
         * @memberof CVP.RequestSystemInforms
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSystemInforms.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSystemInforms;
    })();

    CVP.RequestSystemInformsResult = (function() {

        /**
         * Properties of a RequestSystemInformsResult.
         * @memberof CVP
         * @interface IRequestSystemInformsResult
         * @property {Array.<CVP.ISysytemInforms>|null} [systemInforms] RequestSystemInformsResult systemInforms
         */

        /**
         * Constructs a new RequestSystemInformsResult.
         * @memberof CVP
         * @classdesc Represents a RequestSystemInformsResult.
         * @implements IRequestSystemInformsResult
         * @constructor
         * @param {CVP.IRequestSystemInformsResult=} [properties] Properties to set
         */
        function RequestSystemInformsResult(properties) {
            this.systemInforms = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSystemInformsResult systemInforms.
         * @member {Array.<CVP.ISysytemInforms>} systemInforms
         * @memberof CVP.RequestSystemInformsResult
         * @instance
         */
        RequestSystemInformsResult.prototype.systemInforms = $util.emptyArray;

        /**
         * Creates a new RequestSystemInformsResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSystemInformsResult
         * @static
         * @param {CVP.IRequestSystemInformsResult=} [properties] Properties to set
         * @returns {CVP.RequestSystemInformsResult} RequestSystemInformsResult instance
         */
        RequestSystemInformsResult.create = function create(properties) {
            return new RequestSystemInformsResult(properties);
        };

        /**
         * Encodes the specified RequestSystemInformsResult message. Does not implicitly {@link CVP.RequestSystemInformsResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSystemInformsResult
         * @static
         * @param {CVP.IRequestSystemInformsResult} message RequestSystemInformsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSystemInformsResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.systemInforms != null && message.systemInforms.length)
                for (var i = 0; i < message.systemInforms.length; ++i)
                    $root.CVP.SysytemInforms.encode(message.systemInforms[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestSystemInformsResult message, length delimited. Does not implicitly {@link CVP.RequestSystemInformsResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSystemInformsResult
         * @static
         * @param {CVP.IRequestSystemInformsResult} message RequestSystemInformsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSystemInformsResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSystemInformsResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSystemInformsResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSystemInformsResult} RequestSystemInformsResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSystemInformsResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSystemInformsResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.systemInforms && message.systemInforms.length))
                        message.systemInforms = [];
                    message.systemInforms.push($root.CVP.SysytemInforms.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSystemInformsResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSystemInformsResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSystemInformsResult} RequestSystemInformsResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSystemInformsResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSystemInformsResult message.
         * @function verify
         * @memberof CVP.RequestSystemInformsResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSystemInformsResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.systemInforms != null && message.hasOwnProperty("systemInforms")) {
                if (!Array.isArray(message.systemInforms))
                    return "systemInforms: array expected";
                for (var i = 0; i < message.systemInforms.length; ++i) {
                    var error = $root.CVP.SysytemInforms.verify(message.systemInforms[i]);
                    if (error)
                        return "systemInforms." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestSystemInformsResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSystemInformsResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSystemInformsResult} RequestSystemInformsResult
         */
        RequestSystemInformsResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSystemInformsResult)
                return object;
            var message = new $root.CVP.RequestSystemInformsResult();
            if (object.systemInforms) {
                if (!Array.isArray(object.systemInforms))
                    throw TypeError(".CVP.RequestSystemInformsResult.systemInforms: array expected");
                message.systemInforms = [];
                for (var i = 0; i < object.systemInforms.length; ++i) {
                    if (typeof object.systemInforms[i] !== "object")
                        throw TypeError(".CVP.RequestSystemInformsResult.systemInforms: object expected");
                    message.systemInforms[i] = $root.CVP.SysytemInforms.fromObject(object.systemInforms[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestSystemInformsResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSystemInformsResult
         * @static
         * @param {CVP.RequestSystemInformsResult} message RequestSystemInformsResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSystemInformsResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.systemInforms = [];
            if (message.systemInforms && message.systemInforms.length) {
                object.systemInforms = [];
                for (var j = 0; j < message.systemInforms.length; ++j)
                    object.systemInforms[j] = $root.CVP.SysytemInforms.toObject(message.systemInforms[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestSystemInformsResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestSystemInformsResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSystemInformsResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSystemInformsResult;
    })();

    CVP.RequestTestA = (function() {

        /**
         * Properties of a RequestTestA.
         * @memberof CVP
         * @interface IRequestTestA
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestTestA commonParams
         */

        /**
         * Constructs a new RequestTestA.
         * @memberof CVP
         * @classdesc Represents a RequestTestA.
         * @implements IRequestTestA
         * @constructor
         * @param {CVP.IRequestTestA=} [properties] Properties to set
         */
        function RequestTestA(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTestA commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestTestA
         * @instance
         */
        RequestTestA.prototype.commonParams = null;

        /**
         * Creates a new RequestTestA instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTestA
         * @static
         * @param {CVP.IRequestTestA=} [properties] Properties to set
         * @returns {CVP.RequestTestA} RequestTestA instance
         */
        RequestTestA.create = function create(properties) {
            return new RequestTestA(properties);
        };

        /**
         * Encodes the specified RequestTestA message. Does not implicitly {@link CVP.RequestTestA.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTestA
         * @static
         * @param {CVP.IRequestTestA} message RequestTestA message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestA.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestTestA message, length delimited. Does not implicitly {@link CVP.RequestTestA.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTestA
         * @static
         * @param {CVP.IRequestTestA} message RequestTestA message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestA.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTestA message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTestA
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTestA} RequestTestA
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestA.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTestA();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTestA message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTestA
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTestA} RequestTestA
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestA.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTestA message.
         * @function verify
         * @memberof CVP.RequestTestA
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTestA.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestTestA message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTestA
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTestA} RequestTestA
         */
        RequestTestA.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTestA)
                return object;
            var message = new $root.CVP.RequestTestA();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestTestA.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestTestA message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTestA
         * @static
         * @param {CVP.RequestTestA} message RequestTestA
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTestA.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestTestA to JSON.
         * @function toJSON
         * @memberof CVP.RequestTestA
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTestA.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTestA;
    })();

    CVP.RequestTestAResult = (function() {

        /**
         * Properties of a RequestTestAResult.
         * @memberof CVP
         * @interface IRequestTestAResult
         */

        /**
         * Constructs a new RequestTestAResult.
         * @memberof CVP
         * @classdesc Represents a RequestTestAResult.
         * @implements IRequestTestAResult
         * @constructor
         * @param {CVP.IRequestTestAResult=} [properties] Properties to set
         */
        function RequestTestAResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new RequestTestAResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTestAResult
         * @static
         * @param {CVP.IRequestTestAResult=} [properties] Properties to set
         * @returns {CVP.RequestTestAResult} RequestTestAResult instance
         */
        RequestTestAResult.create = function create(properties) {
            return new RequestTestAResult(properties);
        };

        /**
         * Encodes the specified RequestTestAResult message. Does not implicitly {@link CVP.RequestTestAResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTestAResult
         * @static
         * @param {CVP.IRequestTestAResult} message RequestTestAResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestAResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified RequestTestAResult message, length delimited. Does not implicitly {@link CVP.RequestTestAResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTestAResult
         * @static
         * @param {CVP.IRequestTestAResult} message RequestTestAResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestAResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTestAResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTestAResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTestAResult} RequestTestAResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestAResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTestAResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTestAResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTestAResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTestAResult} RequestTestAResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestAResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTestAResult message.
         * @function verify
         * @memberof CVP.RequestTestAResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTestAResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a RequestTestAResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTestAResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTestAResult} RequestTestAResult
         */
        RequestTestAResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTestAResult)
                return object;
            return new $root.CVP.RequestTestAResult();
        };

        /**
         * Creates a plain object from a RequestTestAResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTestAResult
         * @static
         * @param {CVP.RequestTestAResult} message RequestTestAResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTestAResult.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this RequestTestAResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestTestAResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTestAResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTestAResult;
    })();

    CVP.RequestTestB = (function() {

        /**
         * Properties of a RequestTestB.
         * @memberof CVP
         * @interface IRequestTestB
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestTestB commonParams
         */

        /**
         * Constructs a new RequestTestB.
         * @memberof CVP
         * @classdesc Represents a RequestTestB.
         * @implements IRequestTestB
         * @constructor
         * @param {CVP.IRequestTestB=} [properties] Properties to set
         */
        function RequestTestB(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTestB commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestTestB
         * @instance
         */
        RequestTestB.prototype.commonParams = null;

        /**
         * Creates a new RequestTestB instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTestB
         * @static
         * @param {CVP.IRequestTestB=} [properties] Properties to set
         * @returns {CVP.RequestTestB} RequestTestB instance
         */
        RequestTestB.create = function create(properties) {
            return new RequestTestB(properties);
        };

        /**
         * Encodes the specified RequestTestB message. Does not implicitly {@link CVP.RequestTestB.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTestB
         * @static
         * @param {CVP.IRequestTestB} message RequestTestB message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestB.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestTestB message, length delimited. Does not implicitly {@link CVP.RequestTestB.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTestB
         * @static
         * @param {CVP.IRequestTestB} message RequestTestB message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestB.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTestB message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTestB
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTestB} RequestTestB
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestB.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTestB();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTestB message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTestB
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTestB} RequestTestB
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestB.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTestB message.
         * @function verify
         * @memberof CVP.RequestTestB
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTestB.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestTestB message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTestB
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTestB} RequestTestB
         */
        RequestTestB.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTestB)
                return object;
            var message = new $root.CVP.RequestTestB();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestTestB.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestTestB message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTestB
         * @static
         * @param {CVP.RequestTestB} message RequestTestB
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTestB.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestTestB to JSON.
         * @function toJSON
         * @memberof CVP.RequestTestB
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTestB.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTestB;
    })();

    CVP.RequestTestBResult = (function() {

        /**
         * Properties of a RequestTestBResult.
         * @memberof CVP
         * @interface IRequestTestBResult
         */

        /**
         * Constructs a new RequestTestBResult.
         * @memberof CVP
         * @classdesc Represents a RequestTestBResult.
         * @implements IRequestTestBResult
         * @constructor
         * @param {CVP.IRequestTestBResult=} [properties] Properties to set
         */
        function RequestTestBResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new RequestTestBResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTestBResult
         * @static
         * @param {CVP.IRequestTestBResult=} [properties] Properties to set
         * @returns {CVP.RequestTestBResult} RequestTestBResult instance
         */
        RequestTestBResult.create = function create(properties) {
            return new RequestTestBResult(properties);
        };

        /**
         * Encodes the specified RequestTestBResult message. Does not implicitly {@link CVP.RequestTestBResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTestBResult
         * @static
         * @param {CVP.IRequestTestBResult} message RequestTestBResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestBResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified RequestTestBResult message, length delimited. Does not implicitly {@link CVP.RequestTestBResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTestBResult
         * @static
         * @param {CVP.IRequestTestBResult} message RequestTestBResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestBResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTestBResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTestBResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTestBResult} RequestTestBResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestBResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTestBResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTestBResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTestBResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTestBResult} RequestTestBResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestBResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTestBResult message.
         * @function verify
         * @memberof CVP.RequestTestBResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTestBResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a RequestTestBResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTestBResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTestBResult} RequestTestBResult
         */
        RequestTestBResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTestBResult)
                return object;
            return new $root.CVP.RequestTestBResult();
        };

        /**
         * Creates a plain object from a RequestTestBResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTestBResult
         * @static
         * @param {CVP.RequestTestBResult} message RequestTestBResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTestBResult.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this RequestTestBResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestTestBResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTestBResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTestBResult;
    })();

    CVP.RequestTestC = (function() {

        /**
         * Properties of a RequestTestC.
         * @memberof CVP
         * @interface IRequestTestC
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestTestC commonParams
         */

        /**
         * Constructs a new RequestTestC.
         * @memberof CVP
         * @classdesc Represents a RequestTestC.
         * @implements IRequestTestC
         * @constructor
         * @param {CVP.IRequestTestC=} [properties] Properties to set
         */
        function RequestTestC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTestC commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestTestC
         * @instance
         */
        RequestTestC.prototype.commonParams = null;

        /**
         * Creates a new RequestTestC instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTestC
         * @static
         * @param {CVP.IRequestTestC=} [properties] Properties to set
         * @returns {CVP.RequestTestC} RequestTestC instance
         */
        RequestTestC.create = function create(properties) {
            return new RequestTestC(properties);
        };

        /**
         * Encodes the specified RequestTestC message. Does not implicitly {@link CVP.RequestTestC.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTestC
         * @static
         * @param {CVP.IRequestTestC} message RequestTestC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestTestC message, length delimited. Does not implicitly {@link CVP.RequestTestC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTestC
         * @static
         * @param {CVP.IRequestTestC} message RequestTestC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTestC message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTestC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTestC} RequestTestC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTestC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTestC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTestC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTestC} RequestTestC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTestC message.
         * @function verify
         * @memberof CVP.RequestTestC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTestC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestTestC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTestC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTestC} RequestTestC
         */
        RequestTestC.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTestC)
                return object;
            var message = new $root.CVP.RequestTestC();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestTestC.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestTestC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTestC
         * @static
         * @param {CVP.RequestTestC} message RequestTestC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTestC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestTestC to JSON.
         * @function toJSON
         * @memberof CVP.RequestTestC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTestC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTestC;
    })();

    CVP.RequestTestCResult = (function() {

        /**
         * Properties of a RequestTestCResult.
         * @memberof CVP
         * @interface IRequestTestCResult
         */

        /**
         * Constructs a new RequestTestCResult.
         * @memberof CVP
         * @classdesc Represents a RequestTestCResult.
         * @implements IRequestTestCResult
         * @constructor
         * @param {CVP.IRequestTestCResult=} [properties] Properties to set
         */
        function RequestTestCResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new RequestTestCResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTestCResult
         * @static
         * @param {CVP.IRequestTestCResult=} [properties] Properties to set
         * @returns {CVP.RequestTestCResult} RequestTestCResult instance
         */
        RequestTestCResult.create = function create(properties) {
            return new RequestTestCResult(properties);
        };

        /**
         * Encodes the specified RequestTestCResult message. Does not implicitly {@link CVP.RequestTestCResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTestCResult
         * @static
         * @param {CVP.IRequestTestCResult} message RequestTestCResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestCResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified RequestTestCResult message, length delimited. Does not implicitly {@link CVP.RequestTestCResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTestCResult
         * @static
         * @param {CVP.IRequestTestCResult} message RequestTestCResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTestCResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTestCResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTestCResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTestCResult} RequestTestCResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestCResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTestCResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTestCResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTestCResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTestCResult} RequestTestCResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTestCResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTestCResult message.
         * @function verify
         * @memberof CVP.RequestTestCResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTestCResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a RequestTestCResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTestCResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTestCResult} RequestTestCResult
         */
        RequestTestCResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTestCResult)
                return object;
            return new $root.CVP.RequestTestCResult();
        };

        /**
         * Creates a plain object from a RequestTestCResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTestCResult
         * @static
         * @param {CVP.RequestTestCResult} message RequestTestCResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTestCResult.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this RequestTestCResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestTestCResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTestCResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTestCResult;
    })();

    CVP.RequestRecoverMsg = (function() {

        /**
         * Properties of a RequestRecoverMsg.
         * @memberof CVP
         * @interface IRequestRecoverMsg
         * @property {number|Long|null} [lastMsgIdx] RequestRecoverMsg lastMsgIdx
         * @property {Array.<CVP.IReoveredMsg>|null} [msgList] RequestRecoverMsg msgList
         */

        /**
         * Constructs a new RequestRecoverMsg.
         * @memberof CVP
         * @classdesc Represents a RequestRecoverMsg.
         * @implements IRequestRecoverMsg
         * @constructor
         * @param {CVP.IRequestRecoverMsg=} [properties] Properties to set
         */
        function RequestRecoverMsg(properties) {
            this.msgList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestRecoverMsg lastMsgIdx.
         * @member {number|Long} lastMsgIdx
         * @memberof CVP.RequestRecoverMsg
         * @instance
         */
        RequestRecoverMsg.prototype.lastMsgIdx = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RequestRecoverMsg msgList.
         * @member {Array.<CVP.IReoveredMsg>} msgList
         * @memberof CVP.RequestRecoverMsg
         * @instance
         */
        RequestRecoverMsg.prototype.msgList = $util.emptyArray;

        /**
         * Creates a new RequestRecoverMsg instance using the specified properties.
         * @function create
         * @memberof CVP.RequestRecoverMsg
         * @static
         * @param {CVP.IRequestRecoverMsg=} [properties] Properties to set
         * @returns {CVP.RequestRecoverMsg} RequestRecoverMsg instance
         */
        RequestRecoverMsg.create = function create(properties) {
            return new RequestRecoverMsg(properties);
        };

        /**
         * Encodes the specified RequestRecoverMsg message. Does not implicitly {@link CVP.RequestRecoverMsg.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestRecoverMsg
         * @static
         * @param {CVP.IRequestRecoverMsg} message RequestRecoverMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRecoverMsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.lastMsgIdx != null && message.hasOwnProperty("lastMsgIdx"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.lastMsgIdx);
            if (message.msgList != null && message.msgList.length)
                for (var i = 0; i < message.msgList.length; ++i)
                    $root.CVP.ReoveredMsg.encode(message.msgList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestRecoverMsg message, length delimited. Does not implicitly {@link CVP.RequestRecoverMsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestRecoverMsg
         * @static
         * @param {CVP.IRequestRecoverMsg} message RequestRecoverMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRecoverMsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestRecoverMsg message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestRecoverMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestRecoverMsg} RequestRecoverMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRecoverMsg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestRecoverMsg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.lastMsgIdx = reader.int64();
                    break;
                case 2:
                    if (!(message.msgList && message.msgList.length))
                        message.msgList = [];
                    message.msgList.push($root.CVP.ReoveredMsg.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestRecoverMsg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestRecoverMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestRecoverMsg} RequestRecoverMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRecoverMsg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestRecoverMsg message.
         * @function verify
         * @memberof CVP.RequestRecoverMsg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestRecoverMsg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.lastMsgIdx != null && message.hasOwnProperty("lastMsgIdx"))
                if (!$util.isInteger(message.lastMsgIdx) && !(message.lastMsgIdx && $util.isInteger(message.lastMsgIdx.low) && $util.isInteger(message.lastMsgIdx.high)))
                    return "lastMsgIdx: integer|Long expected";
            if (message.msgList != null && message.hasOwnProperty("msgList")) {
                if (!Array.isArray(message.msgList))
                    return "msgList: array expected";
                for (var i = 0; i < message.msgList.length; ++i) {
                    var error = $root.CVP.ReoveredMsg.verify(message.msgList[i]);
                    if (error)
                        return "msgList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestRecoverMsg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestRecoverMsg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestRecoverMsg} RequestRecoverMsg
         */
        RequestRecoverMsg.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestRecoverMsg)
                return object;
            var message = new $root.CVP.RequestRecoverMsg();
            if (object.lastMsgIdx != null)
                if ($util.Long)
                    (message.lastMsgIdx = $util.Long.fromValue(object.lastMsgIdx)).unsigned = false;
                else if (typeof object.lastMsgIdx === "string")
                    message.lastMsgIdx = parseInt(object.lastMsgIdx, 10);
                else if (typeof object.lastMsgIdx === "number")
                    message.lastMsgIdx = object.lastMsgIdx;
                else if (typeof object.lastMsgIdx === "object")
                    message.lastMsgIdx = new $util.LongBits(object.lastMsgIdx.low >>> 0, object.lastMsgIdx.high >>> 0).toNumber();
            if (object.msgList) {
                if (!Array.isArray(object.msgList))
                    throw TypeError(".CVP.RequestRecoverMsg.msgList: array expected");
                message.msgList = [];
                for (var i = 0; i < object.msgList.length; ++i) {
                    if (typeof object.msgList[i] !== "object")
                        throw TypeError(".CVP.RequestRecoverMsg.msgList: object expected");
                    message.msgList[i] = $root.CVP.ReoveredMsg.fromObject(object.msgList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestRecoverMsg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestRecoverMsg
         * @static
         * @param {CVP.RequestRecoverMsg} message RequestRecoverMsg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestRecoverMsg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.msgList = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.lastMsgIdx = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lastMsgIdx = options.longs === String ? "0" : 0;
            if (message.lastMsgIdx != null && message.hasOwnProperty("lastMsgIdx"))
                if (typeof message.lastMsgIdx === "number")
                    object.lastMsgIdx = options.longs === String ? String(message.lastMsgIdx) : message.lastMsgIdx;
                else
                    object.lastMsgIdx = options.longs === String ? $util.Long.prototype.toString.call(message.lastMsgIdx) : options.longs === Number ? new $util.LongBits(message.lastMsgIdx.low >>> 0, message.lastMsgIdx.high >>> 0).toNumber() : message.lastMsgIdx;
            if (message.msgList && message.msgList.length) {
                object.msgList = [];
                for (var j = 0; j < message.msgList.length; ++j)
                    object.msgList[j] = $root.CVP.ReoveredMsg.toObject(message.msgList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestRecoverMsg to JSON.
         * @function toJSON
         * @memberof CVP.RequestRecoverMsg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestRecoverMsg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestRecoverMsg;
    })();

    CVP.ReoveredMsg = (function() {

        /**
         * Properties of a ReoveredMsg.
         * @memberof CVP
         * @interface IReoveredMsg
         * @property {string|null} [cmd] ReoveredMsg cmd
         * @property {string|null} [msg] ReoveredMsg msg
         */

        /**
         * Constructs a new ReoveredMsg.
         * @memberof CVP
         * @classdesc Represents a ReoveredMsg.
         * @implements IReoveredMsg
         * @constructor
         * @param {CVP.IReoveredMsg=} [properties] Properties to set
         */
        function ReoveredMsg(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ReoveredMsg cmd.
         * @member {string} cmd
         * @memberof CVP.ReoveredMsg
         * @instance
         */
        ReoveredMsg.prototype.cmd = "";

        /**
         * ReoveredMsg msg.
         * @member {string} msg
         * @memberof CVP.ReoveredMsg
         * @instance
         */
        ReoveredMsg.prototype.msg = "";

        /**
         * Creates a new ReoveredMsg instance using the specified properties.
         * @function create
         * @memberof CVP.ReoveredMsg
         * @static
         * @param {CVP.IReoveredMsg=} [properties] Properties to set
         * @returns {CVP.ReoveredMsg} ReoveredMsg instance
         */
        ReoveredMsg.create = function create(properties) {
            return new ReoveredMsg(properties);
        };

        /**
         * Encodes the specified ReoveredMsg message. Does not implicitly {@link CVP.ReoveredMsg.verify|verify} messages.
         * @function encode
         * @memberof CVP.ReoveredMsg
         * @static
         * @param {CVP.IReoveredMsg} message ReoveredMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReoveredMsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.cmd);
            if (message.msg != null && message.hasOwnProperty("msg"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.msg);
            return writer;
        };

        /**
         * Encodes the specified ReoveredMsg message, length delimited. Does not implicitly {@link CVP.ReoveredMsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.ReoveredMsg
         * @static
         * @param {CVP.IReoveredMsg} message ReoveredMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReoveredMsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ReoveredMsg message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.ReoveredMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.ReoveredMsg} ReoveredMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReoveredMsg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.ReoveredMsg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.cmd = reader.string();
                    break;
                case 3:
                    message.msg = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ReoveredMsg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.ReoveredMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.ReoveredMsg} ReoveredMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReoveredMsg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ReoveredMsg message.
         * @function verify
         * @memberof CVP.ReoveredMsg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ReoveredMsg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                if (!$util.isString(message.cmd))
                    return "cmd: string expected";
            if (message.msg != null && message.hasOwnProperty("msg"))
                if (!$util.isString(message.msg))
                    return "msg: string expected";
            return null;
        };

        /**
         * Creates a ReoveredMsg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.ReoveredMsg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.ReoveredMsg} ReoveredMsg
         */
        ReoveredMsg.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.ReoveredMsg)
                return object;
            var message = new $root.CVP.ReoveredMsg();
            if (object.cmd != null)
                message.cmd = String(object.cmd);
            if (object.msg != null)
                message.msg = String(object.msg);
            return message;
        };

        /**
         * Creates a plain object from a ReoveredMsg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.ReoveredMsg
         * @static
         * @param {CVP.ReoveredMsg} message ReoveredMsg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ReoveredMsg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cmd = "";
                object.msg = "";
            }
            if (message.cmd != null && message.hasOwnProperty("cmd"))
                object.cmd = message.cmd;
            if (message.msg != null && message.hasOwnProperty("msg"))
                object.msg = message.msg;
            return object;
        };

        /**
         * Converts this ReoveredMsg to JSON.
         * @function toJSON
         * @memberof CVP.ReoveredMsg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ReoveredMsg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ReoveredMsg;
    })();

    CVP.RequestRecoverMsgResult = (function() {

        /**
         * Properties of a RequestRecoverMsgResult.
         * @memberof CVP
         * @interface IRequestRecoverMsgResult
         * @property {Array.<CVP.IReoveredMsg>|null} [msgList] RequestRecoverMsgResult msgList
         */

        /**
         * Constructs a new RequestRecoverMsgResult.
         * @memberof CVP
         * @classdesc Represents a RequestRecoverMsgResult.
         * @implements IRequestRecoverMsgResult
         * @constructor
         * @param {CVP.IRequestRecoverMsgResult=} [properties] Properties to set
         */
        function RequestRecoverMsgResult(properties) {
            this.msgList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestRecoverMsgResult msgList.
         * @member {Array.<CVP.IReoveredMsg>} msgList
         * @memberof CVP.RequestRecoverMsgResult
         * @instance
         */
        RequestRecoverMsgResult.prototype.msgList = $util.emptyArray;

        /**
         * Creates a new RequestRecoverMsgResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestRecoverMsgResult
         * @static
         * @param {CVP.IRequestRecoverMsgResult=} [properties] Properties to set
         * @returns {CVP.RequestRecoverMsgResult} RequestRecoverMsgResult instance
         */
        RequestRecoverMsgResult.create = function create(properties) {
            return new RequestRecoverMsgResult(properties);
        };

        /**
         * Encodes the specified RequestRecoverMsgResult message. Does not implicitly {@link CVP.RequestRecoverMsgResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestRecoverMsgResult
         * @static
         * @param {CVP.IRequestRecoverMsgResult} message RequestRecoverMsgResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRecoverMsgResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.msgList != null && message.msgList.length)
                for (var i = 0; i < message.msgList.length; ++i)
                    $root.CVP.ReoveredMsg.encode(message.msgList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestRecoverMsgResult message, length delimited. Does not implicitly {@link CVP.RequestRecoverMsgResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestRecoverMsgResult
         * @static
         * @param {CVP.IRequestRecoverMsgResult} message RequestRecoverMsgResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRecoverMsgResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestRecoverMsgResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestRecoverMsgResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestRecoverMsgResult} RequestRecoverMsgResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRecoverMsgResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestRecoverMsgResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.msgList && message.msgList.length))
                        message.msgList = [];
                    message.msgList.push($root.CVP.ReoveredMsg.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestRecoverMsgResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestRecoverMsgResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestRecoverMsgResult} RequestRecoverMsgResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRecoverMsgResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestRecoverMsgResult message.
         * @function verify
         * @memberof CVP.RequestRecoverMsgResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestRecoverMsgResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.msgList != null && message.hasOwnProperty("msgList")) {
                if (!Array.isArray(message.msgList))
                    return "msgList: array expected";
                for (var i = 0; i < message.msgList.length; ++i) {
                    var error = $root.CVP.ReoveredMsg.verify(message.msgList[i]);
                    if (error)
                        return "msgList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestRecoverMsgResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestRecoverMsgResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestRecoverMsgResult} RequestRecoverMsgResult
         */
        RequestRecoverMsgResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestRecoverMsgResult)
                return object;
            var message = new $root.CVP.RequestRecoverMsgResult();
            if (object.msgList) {
                if (!Array.isArray(object.msgList))
                    throw TypeError(".CVP.RequestRecoverMsgResult.msgList: array expected");
                message.msgList = [];
                for (var i = 0; i < object.msgList.length; ++i) {
                    if (typeof object.msgList[i] !== "object")
                        throw TypeError(".CVP.RequestRecoverMsgResult.msgList: object expected");
                    message.msgList[i] = $root.CVP.ReoveredMsg.fromObject(object.msgList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestRecoverMsgResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestRecoverMsgResult
         * @static
         * @param {CVP.RequestRecoverMsgResult} message RequestRecoverMsgResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestRecoverMsgResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.msgList = [];
            if (message.msgList && message.msgList.length) {
                object.msgList = [];
                for (var j = 0; j < message.msgList.length; ++j)
                    object.msgList[j] = $root.CVP.ReoveredMsg.toObject(message.msgList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestRecoverMsgResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestRecoverMsgResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestRecoverMsgResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestRecoverMsgResult;
    })();

    CVP.RequestStartPayment = (function() {

        /**
         * Properties of a RequestStartPayment.
         * @memberof CVP
         * @interface IRequestStartPayment
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestStartPayment commonParams
         * @property {string|null} [itemId] RequestStartPayment itemId
         */

        /**
         * Constructs a new RequestStartPayment.
         * @memberof CVP
         * @classdesc Represents a RequestStartPayment.
         * @implements IRequestStartPayment
         * @constructor
         * @param {CVP.IRequestStartPayment=} [properties] Properties to set
         */
        function RequestStartPayment(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestStartPayment commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestStartPayment
         * @instance
         */
        RequestStartPayment.prototype.commonParams = null;

        /**
         * RequestStartPayment itemId.
         * @member {string} itemId
         * @memberof CVP.RequestStartPayment
         * @instance
         */
        RequestStartPayment.prototype.itemId = "";

        /**
         * Creates a new RequestStartPayment instance using the specified properties.
         * @function create
         * @memberof CVP.RequestStartPayment
         * @static
         * @param {CVP.IRequestStartPayment=} [properties] Properties to set
         * @returns {CVP.RequestStartPayment} RequestStartPayment instance
         */
        RequestStartPayment.create = function create(properties) {
            return new RequestStartPayment(properties);
        };

        /**
         * Encodes the specified RequestStartPayment message. Does not implicitly {@link CVP.RequestStartPayment.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestStartPayment
         * @static
         * @param {CVP.IRequestStartPayment} message RequestStartPayment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestStartPayment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.itemId);
            return writer;
        };

        /**
         * Encodes the specified RequestStartPayment message, length delimited. Does not implicitly {@link CVP.RequestStartPayment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestStartPayment
         * @static
         * @param {CVP.IRequestStartPayment} message RequestStartPayment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestStartPayment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestStartPayment message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestStartPayment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestStartPayment} RequestStartPayment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestStartPayment.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestStartPayment();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.itemId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestStartPayment message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestStartPayment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestStartPayment} RequestStartPayment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestStartPayment.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestStartPayment message.
         * @function verify
         * @memberof CVP.RequestStartPayment
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestStartPayment.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                if (!$util.isString(message.itemId))
                    return "itemId: string expected";
            return null;
        };

        /**
         * Creates a RequestStartPayment message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestStartPayment
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestStartPayment} RequestStartPayment
         */
        RequestStartPayment.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestStartPayment)
                return object;
            var message = new $root.CVP.RequestStartPayment();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestStartPayment.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.itemId != null)
                message.itemId = String(object.itemId);
            return message;
        };

        /**
         * Creates a plain object from a RequestStartPayment message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestStartPayment
         * @static
         * @param {CVP.RequestStartPayment} message RequestStartPayment
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestStartPayment.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.itemId = "";
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.itemId != null && message.hasOwnProperty("itemId"))
                object.itemId = message.itemId;
            return object;
        };

        /**
         * Converts this RequestStartPayment to JSON.
         * @function toJSON
         * @memberof CVP.RequestStartPayment
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestStartPayment.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestStartPayment;
    })();

    CVP.RequestStartPaymentResult = (function() {

        /**
         * Properties of a RequestStartPaymentResult.
         * @memberof CVP
         * @interface IRequestStartPaymentResult
         * @property {string|null} [paymentId] RequestStartPaymentResult paymentId
         */

        /**
         * Constructs a new RequestStartPaymentResult.
         * @memberof CVP
         * @classdesc Represents a RequestStartPaymentResult.
         * @implements IRequestStartPaymentResult
         * @constructor
         * @param {CVP.IRequestStartPaymentResult=} [properties] Properties to set
         */
        function RequestStartPaymentResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestStartPaymentResult paymentId.
         * @member {string} paymentId
         * @memberof CVP.RequestStartPaymentResult
         * @instance
         */
        RequestStartPaymentResult.prototype.paymentId = "";

        /**
         * Creates a new RequestStartPaymentResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestStartPaymentResult
         * @static
         * @param {CVP.IRequestStartPaymentResult=} [properties] Properties to set
         * @returns {CVP.RequestStartPaymentResult} RequestStartPaymentResult instance
         */
        RequestStartPaymentResult.create = function create(properties) {
            return new RequestStartPaymentResult(properties);
        };

        /**
         * Encodes the specified RequestStartPaymentResult message. Does not implicitly {@link CVP.RequestStartPaymentResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestStartPaymentResult
         * @static
         * @param {CVP.IRequestStartPaymentResult} message RequestStartPaymentResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestStartPaymentResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.paymentId != null && message.hasOwnProperty("paymentId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.paymentId);
            return writer;
        };

        /**
         * Encodes the specified RequestStartPaymentResult message, length delimited. Does not implicitly {@link CVP.RequestStartPaymentResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestStartPaymentResult
         * @static
         * @param {CVP.IRequestStartPaymentResult} message RequestStartPaymentResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestStartPaymentResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestStartPaymentResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestStartPaymentResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestStartPaymentResult} RequestStartPaymentResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestStartPaymentResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestStartPaymentResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.paymentId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestStartPaymentResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestStartPaymentResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestStartPaymentResult} RequestStartPaymentResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestStartPaymentResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestStartPaymentResult message.
         * @function verify
         * @memberof CVP.RequestStartPaymentResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestStartPaymentResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.paymentId != null && message.hasOwnProperty("paymentId"))
                if (!$util.isString(message.paymentId))
                    return "paymentId: string expected";
            return null;
        };

        /**
         * Creates a RequestStartPaymentResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestStartPaymentResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestStartPaymentResult} RequestStartPaymentResult
         */
        RequestStartPaymentResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestStartPaymentResult)
                return object;
            var message = new $root.CVP.RequestStartPaymentResult();
            if (object.paymentId != null)
                message.paymentId = String(object.paymentId);
            return message;
        };

        /**
         * Creates a plain object from a RequestStartPaymentResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestStartPaymentResult
         * @static
         * @param {CVP.RequestStartPaymentResult} message RequestStartPaymentResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestStartPaymentResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.paymentId = "";
            if (message.paymentId != null && message.hasOwnProperty("paymentId"))
                object.paymentId = message.paymentId;
            return object;
        };

        /**
         * Converts this RequestStartPaymentResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestStartPaymentResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestStartPaymentResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestStartPaymentResult;
    })();

    /**
     * PaymentState enum.
     * @name CVP.PaymentState
     * @enum {string}
     * @property {number} FAILED=0 FAILED value
     * @property {number} SUCCESS=1 SUCCESS value
     * @property {number} CANCELED=2 CANCELED value
     * @property {number} OWNED=3 OWNED value
     * @property {number} RECEIPT_EMPTY=4 RECEIPT_EMPTY value
     * @property {number} RECEIPT_REFRESH_ERROR=5 RECEIPT_REFRESH_ERROR value
     */
    CVP.PaymentState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "FAILED"] = 0;
        values[valuesById[1] = "SUCCESS"] = 1;
        values[valuesById[2] = "CANCELED"] = 2;
        values[valuesById[3] = "OWNED"] = 3;
        values[valuesById[4] = "RECEIPT_EMPTY"] = 4;
        values[valuesById[5] = "RECEIPT_REFRESH_ERROR"] = 5;
        return values;
    })();

    CVP.RequestVerifyPayment = (function() {

        /**
         * Properties of a RequestVerifyPayment.
         * @memberof CVP
         * @interface IRequestVerifyPayment
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestVerifyPayment commonParams
         * @property {string|null} [paymentId] RequestVerifyPayment paymentId
         * @property {CVP.PaymentState|null} [state] RequestVerifyPayment state
         * @property {string|null} [signature] RequestVerifyPayment signature
         * @property {string|null} [receipt] RequestVerifyPayment receipt
         * @property {string|null} [errorMsg] RequestVerifyPayment errorMsg
         * @property {boolean|null} [debug] RequestVerifyPayment debug
         */

        /**
         * Constructs a new RequestVerifyPayment.
         * @memberof CVP
         * @classdesc Represents a RequestVerifyPayment.
         * @implements IRequestVerifyPayment
         * @constructor
         * @param {CVP.IRequestVerifyPayment=} [properties] Properties to set
         */
        function RequestVerifyPayment(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestVerifyPayment commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestVerifyPayment
         * @instance
         */
        RequestVerifyPayment.prototype.commonParams = null;

        /**
         * RequestVerifyPayment paymentId.
         * @member {string} paymentId
         * @memberof CVP.RequestVerifyPayment
         * @instance
         */
        RequestVerifyPayment.prototype.paymentId = "";

        /**
         * RequestVerifyPayment state.
         * @member {CVP.PaymentState} state
         * @memberof CVP.RequestVerifyPayment
         * @instance
         */
        RequestVerifyPayment.prototype.state = 0;

        /**
         * RequestVerifyPayment signature.
         * @member {string} signature
         * @memberof CVP.RequestVerifyPayment
         * @instance
         */
        RequestVerifyPayment.prototype.signature = "";

        /**
         * RequestVerifyPayment receipt.
         * @member {string} receipt
         * @memberof CVP.RequestVerifyPayment
         * @instance
         */
        RequestVerifyPayment.prototype.receipt = "";

        /**
         * RequestVerifyPayment errorMsg.
         * @member {string} errorMsg
         * @memberof CVP.RequestVerifyPayment
         * @instance
         */
        RequestVerifyPayment.prototype.errorMsg = "";

        /**
         * RequestVerifyPayment debug.
         * @member {boolean} debug
         * @memberof CVP.RequestVerifyPayment
         * @instance
         */
        RequestVerifyPayment.prototype.debug = false;

        /**
         * Creates a new RequestVerifyPayment instance using the specified properties.
         * @function create
         * @memberof CVP.RequestVerifyPayment
         * @static
         * @param {CVP.IRequestVerifyPayment=} [properties] Properties to set
         * @returns {CVP.RequestVerifyPayment} RequestVerifyPayment instance
         */
        RequestVerifyPayment.create = function create(properties) {
            return new RequestVerifyPayment(properties);
        };

        /**
         * Encodes the specified RequestVerifyPayment message. Does not implicitly {@link CVP.RequestVerifyPayment.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestVerifyPayment
         * @static
         * @param {CVP.IRequestVerifyPayment} message RequestVerifyPayment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVerifyPayment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.paymentId != null && message.hasOwnProperty("paymentId"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.paymentId);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
            if (message.signature != null && message.hasOwnProperty("signature"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.signature);
            if (message.receipt != null && message.hasOwnProperty("receipt"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.receipt);
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.errorMsg);
            if (message.debug != null && message.hasOwnProperty("debug"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.debug);
            return writer;
        };

        /**
         * Encodes the specified RequestVerifyPayment message, length delimited. Does not implicitly {@link CVP.RequestVerifyPayment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestVerifyPayment
         * @static
         * @param {CVP.IRequestVerifyPayment} message RequestVerifyPayment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVerifyPayment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestVerifyPayment message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestVerifyPayment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestVerifyPayment} RequestVerifyPayment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVerifyPayment.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestVerifyPayment();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.paymentId = reader.string();
                    break;
                case 3:
                    message.state = reader.int32();
                    break;
                case 4:
                    message.signature = reader.string();
                    break;
                case 5:
                    message.receipt = reader.string();
                    break;
                case 6:
                    message.errorMsg = reader.string();
                    break;
                case 7:
                    message.debug = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestVerifyPayment message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestVerifyPayment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestVerifyPayment} RequestVerifyPayment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVerifyPayment.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestVerifyPayment message.
         * @function verify
         * @memberof CVP.RequestVerifyPayment
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestVerifyPayment.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.paymentId != null && message.hasOwnProperty("paymentId"))
                if (!$util.isString(message.paymentId))
                    return "paymentId: string expected";
            if (message.state != null && message.hasOwnProperty("state"))
                switch (message.state) {
                default:
                    return "state: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!$util.isString(message.signature))
                    return "signature: string expected";
            if (message.receipt != null && message.hasOwnProperty("receipt"))
                if (!$util.isString(message.receipt))
                    return "receipt: string expected";
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                if (!$util.isString(message.errorMsg))
                    return "errorMsg: string expected";
            if (message.debug != null && message.hasOwnProperty("debug"))
                if (typeof message.debug !== "boolean")
                    return "debug: boolean expected";
            return null;
        };

        /**
         * Creates a RequestVerifyPayment message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestVerifyPayment
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestVerifyPayment} RequestVerifyPayment
         */
        RequestVerifyPayment.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestVerifyPayment)
                return object;
            var message = new $root.CVP.RequestVerifyPayment();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestVerifyPayment.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.paymentId != null)
                message.paymentId = String(object.paymentId);
            switch (object.state) {
            case "FAILED":
            case 0:
                message.state = 0;
                break;
            case "SUCCESS":
            case 1:
                message.state = 1;
                break;
            case "CANCELED":
            case 2:
                message.state = 2;
                break;
            case "OWNED":
            case 3:
                message.state = 3;
                break;
            case "RECEIPT_EMPTY":
            case 4:
                message.state = 4;
                break;
            case "RECEIPT_REFRESH_ERROR":
            case 5:
                message.state = 5;
                break;
            }
            if (object.signature != null)
                message.signature = String(object.signature);
            if (object.receipt != null)
                message.receipt = String(object.receipt);
            if (object.errorMsg != null)
                message.errorMsg = String(object.errorMsg);
            if (object.debug != null)
                message.debug = Boolean(object.debug);
            return message;
        };

        /**
         * Creates a plain object from a RequestVerifyPayment message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestVerifyPayment
         * @static
         * @param {CVP.RequestVerifyPayment} message RequestVerifyPayment
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestVerifyPayment.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.paymentId = "";
                object.state = options.enums === String ? "FAILED" : 0;
                object.signature = "";
                object.receipt = "";
                object.errorMsg = "";
                object.debug = false;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.paymentId != null && message.hasOwnProperty("paymentId"))
                object.paymentId = message.paymentId;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = options.enums === String ? $root.CVP.PaymentState[message.state] : message.state;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = message.signature;
            if (message.receipt != null && message.hasOwnProperty("receipt"))
                object.receipt = message.receipt;
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                object.errorMsg = message.errorMsg;
            if (message.debug != null && message.hasOwnProperty("debug"))
                object.debug = message.debug;
            return object;
        };

        /**
         * Converts this RequestVerifyPayment to JSON.
         * @function toJSON
         * @memberof CVP.RequestVerifyPayment
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestVerifyPayment.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestVerifyPayment;
    })();

    CVP.RequestVerifyPaymentResult = (function() {

        /**
         * Properties of a RequestVerifyPaymentResult.
         * @memberof CVP
         * @interface IRequestVerifyPaymentResult
         * @property {CVP.PaymentState|null} [state] RequestVerifyPaymentResult state
         * @property {CVP.IItemInfo|null} [item] RequestVerifyPaymentResult item
         * @property {number|null} [payNumnber] RequestVerifyPaymentResult payNumnber
         */

        /**
         * Constructs a new RequestVerifyPaymentResult.
         * @memberof CVP
         * @classdesc Represents a RequestVerifyPaymentResult.
         * @implements IRequestVerifyPaymentResult
         * @constructor
         * @param {CVP.IRequestVerifyPaymentResult=} [properties] Properties to set
         */
        function RequestVerifyPaymentResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestVerifyPaymentResult state.
         * @member {CVP.PaymentState} state
         * @memberof CVP.RequestVerifyPaymentResult
         * @instance
         */
        RequestVerifyPaymentResult.prototype.state = 0;

        /**
         * RequestVerifyPaymentResult item.
         * @member {CVP.IItemInfo|null|undefined} item
         * @memberof CVP.RequestVerifyPaymentResult
         * @instance
         */
        RequestVerifyPaymentResult.prototype.item = null;

        /**
         * RequestVerifyPaymentResult payNumnber.
         * @member {number} payNumnber
         * @memberof CVP.RequestVerifyPaymentResult
         * @instance
         */
        RequestVerifyPaymentResult.prototype.payNumnber = 0;

        /**
         * Creates a new RequestVerifyPaymentResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestVerifyPaymentResult
         * @static
         * @param {CVP.IRequestVerifyPaymentResult=} [properties] Properties to set
         * @returns {CVP.RequestVerifyPaymentResult} RequestVerifyPaymentResult instance
         */
        RequestVerifyPaymentResult.create = function create(properties) {
            return new RequestVerifyPaymentResult(properties);
        };

        /**
         * Encodes the specified RequestVerifyPaymentResult message. Does not implicitly {@link CVP.RequestVerifyPaymentResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestVerifyPaymentResult
         * @static
         * @param {CVP.IRequestVerifyPaymentResult} message RequestVerifyPaymentResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVerifyPaymentResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
            if (message.item != null && message.hasOwnProperty("item"))
                $root.CVP.ItemInfo.encode(message.item, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.payNumnber != null && message.hasOwnProperty("payNumnber"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.payNumnber);
            return writer;
        };

        /**
         * Encodes the specified RequestVerifyPaymentResult message, length delimited. Does not implicitly {@link CVP.RequestVerifyPaymentResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestVerifyPaymentResult
         * @static
         * @param {CVP.IRequestVerifyPaymentResult} message RequestVerifyPaymentResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestVerifyPaymentResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestVerifyPaymentResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestVerifyPaymentResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestVerifyPaymentResult} RequestVerifyPaymentResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVerifyPaymentResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestVerifyPaymentResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.state = reader.int32();
                    break;
                case 2:
                    message.item = $root.CVP.ItemInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.payNumnber = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestVerifyPaymentResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestVerifyPaymentResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestVerifyPaymentResult} RequestVerifyPaymentResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestVerifyPaymentResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestVerifyPaymentResult message.
         * @function verify
         * @memberof CVP.RequestVerifyPaymentResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestVerifyPaymentResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.state != null && message.hasOwnProperty("state"))
                switch (message.state) {
                default:
                    return "state: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.item != null && message.hasOwnProperty("item")) {
                var error = $root.CVP.ItemInfo.verify(message.item);
                if (error)
                    return "item." + error;
            }
            if (message.payNumnber != null && message.hasOwnProperty("payNumnber"))
                if (!$util.isInteger(message.payNumnber))
                    return "payNumnber: integer expected";
            return null;
        };

        /**
         * Creates a RequestVerifyPaymentResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestVerifyPaymentResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestVerifyPaymentResult} RequestVerifyPaymentResult
         */
        RequestVerifyPaymentResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestVerifyPaymentResult)
                return object;
            var message = new $root.CVP.RequestVerifyPaymentResult();
            switch (object.state) {
            case "FAILED":
            case 0:
                message.state = 0;
                break;
            case "SUCCESS":
            case 1:
                message.state = 1;
                break;
            case "CANCELED":
            case 2:
                message.state = 2;
                break;
            case "OWNED":
            case 3:
                message.state = 3;
                break;
            case "RECEIPT_EMPTY":
            case 4:
                message.state = 4;
                break;
            case "RECEIPT_REFRESH_ERROR":
            case 5:
                message.state = 5;
                break;
            }
            if (object.item != null) {
                if (typeof object.item !== "object")
                    throw TypeError(".CVP.RequestVerifyPaymentResult.item: object expected");
                message.item = $root.CVP.ItemInfo.fromObject(object.item);
            }
            if (object.payNumnber != null)
                message.payNumnber = object.payNumnber | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestVerifyPaymentResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestVerifyPaymentResult
         * @static
         * @param {CVP.RequestVerifyPaymentResult} message RequestVerifyPaymentResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestVerifyPaymentResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.state = options.enums === String ? "FAILED" : 0;
                object.item = null;
                object.payNumnber = 0;
            }
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = options.enums === String ? $root.CVP.PaymentState[message.state] : message.state;
            if (message.item != null && message.hasOwnProperty("item"))
                object.item = $root.CVP.ItemInfo.toObject(message.item, options);
            if (message.payNumnber != null && message.hasOwnProperty("payNumnber"))
                object.payNumnber = message.payNumnber;
            return object;
        };

        /**
         * Converts this RequestVerifyPaymentResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestVerifyPaymentResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestVerifyPaymentResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestVerifyPaymentResult;
    })();

    CVP.getPurchaseResult = (function() {

        /**
         * Properties of a getPurchaseResult.
         * @memberof CVP
         * @interface IgetPurchaseResult
         * @property {string|null} [orderNo] getPurchaseResult orderNo
         * @property {string|null} [purchaseData] getPurchaseResult purchaseData
         * @property {string|null} [signatureData] getPurchaseResult signatureData
         * @property {string|null} [packageName] getPurchaseResult packageName
         */

        /**
         * Constructs a new getPurchaseResult.
         * @memberof CVP
         * @classdesc Represents a getPurchaseResult.
         * @implements IgetPurchaseResult
         * @constructor
         * @param {CVP.IgetPurchaseResult=} [properties] Properties to set
         */
        function getPurchaseResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * getPurchaseResult orderNo.
         * @member {string} orderNo
         * @memberof CVP.getPurchaseResult
         * @instance
         */
        getPurchaseResult.prototype.orderNo = "";

        /**
         * getPurchaseResult purchaseData.
         * @member {string} purchaseData
         * @memberof CVP.getPurchaseResult
         * @instance
         */
        getPurchaseResult.prototype.purchaseData = "";

        /**
         * getPurchaseResult signatureData.
         * @member {string} signatureData
         * @memberof CVP.getPurchaseResult
         * @instance
         */
        getPurchaseResult.prototype.signatureData = "";

        /**
         * getPurchaseResult packageName.
         * @member {string} packageName
         * @memberof CVP.getPurchaseResult
         * @instance
         */
        getPurchaseResult.prototype.packageName = "";

        /**
         * Creates a new getPurchaseResult instance using the specified properties.
         * @function create
         * @memberof CVP.getPurchaseResult
         * @static
         * @param {CVP.IgetPurchaseResult=} [properties] Properties to set
         * @returns {CVP.getPurchaseResult} getPurchaseResult instance
         */
        getPurchaseResult.create = function create(properties) {
            return new getPurchaseResult(properties);
        };

        /**
         * Encodes the specified getPurchaseResult message. Does not implicitly {@link CVP.getPurchaseResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.getPurchaseResult
         * @static
         * @param {CVP.IgetPurchaseResult} message getPurchaseResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getPurchaseResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.orderNo != null && message.hasOwnProperty("orderNo"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.orderNo);
            if (message.purchaseData != null && message.hasOwnProperty("purchaseData"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.purchaseData);
            if (message.signatureData != null && message.hasOwnProperty("signatureData"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.signatureData);
            if (message.packageName != null && message.hasOwnProperty("packageName"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.packageName);
            return writer;
        };

        /**
         * Encodes the specified getPurchaseResult message, length delimited. Does not implicitly {@link CVP.getPurchaseResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.getPurchaseResult
         * @static
         * @param {CVP.IgetPurchaseResult} message getPurchaseResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        getPurchaseResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a getPurchaseResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.getPurchaseResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.getPurchaseResult} getPurchaseResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        getPurchaseResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.getPurchaseResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.orderNo = reader.string();
                    break;
                case 2:
                    message.purchaseData = reader.string();
                    break;
                case 3:
                    message.signatureData = reader.string();
                    break;
                case 4:
                    message.packageName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a getPurchaseResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.getPurchaseResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.getPurchaseResult} getPurchaseResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        getPurchaseResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a getPurchaseResult message.
         * @function verify
         * @memberof CVP.getPurchaseResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        getPurchaseResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.orderNo != null && message.hasOwnProperty("orderNo"))
                if (!$util.isString(message.orderNo))
                    return "orderNo: string expected";
            if (message.purchaseData != null && message.hasOwnProperty("purchaseData"))
                if (!$util.isString(message.purchaseData))
                    return "purchaseData: string expected";
            if (message.signatureData != null && message.hasOwnProperty("signatureData"))
                if (!$util.isString(message.signatureData))
                    return "signatureData: string expected";
            if (message.packageName != null && message.hasOwnProperty("packageName"))
                if (!$util.isString(message.packageName))
                    return "packageName: string expected";
            return null;
        };

        /**
         * Creates a getPurchaseResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.getPurchaseResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.getPurchaseResult} getPurchaseResult
         */
        getPurchaseResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.getPurchaseResult)
                return object;
            var message = new $root.CVP.getPurchaseResult();
            if (object.orderNo != null)
                message.orderNo = String(object.orderNo);
            if (object.purchaseData != null)
                message.purchaseData = String(object.purchaseData);
            if (object.signatureData != null)
                message.signatureData = String(object.signatureData);
            if (object.packageName != null)
                message.packageName = String(object.packageName);
            return message;
        };

        /**
         * Creates a plain object from a getPurchaseResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.getPurchaseResult
         * @static
         * @param {CVP.getPurchaseResult} message getPurchaseResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        getPurchaseResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.orderNo = "";
                object.purchaseData = "";
                object.signatureData = "";
                object.packageName = "";
            }
            if (message.orderNo != null && message.hasOwnProperty("orderNo"))
                object.orderNo = message.orderNo;
            if (message.purchaseData != null && message.hasOwnProperty("purchaseData"))
                object.purchaseData = message.purchaseData;
            if (message.signatureData != null && message.hasOwnProperty("signatureData"))
                object.signatureData = message.signatureData;
            if (message.packageName != null && message.hasOwnProperty("packageName"))
                object.packageName = message.packageName;
            return object;
        };

        /**
         * Converts this getPurchaseResult to JSON.
         * @function toJSON
         * @memberof CVP.getPurchaseResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        getPurchaseResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return getPurchaseResult;
    })();

    CVP.RequestNewOrder = (function() {

        /**
         * Properties of a RequestNewOrder.
         * @memberof CVP
         * @interface IRequestNewOrder
         * @property {string|null} [billingCode] RequestNewOrder billingCode
         * @property {number|null} [paymentId] RequestNewOrder paymentId
         * @property {string|null} [sku] RequestNewOrder sku
         * @property {string|null} [extraInfo] RequestNewOrder extraInfo
         */

        /**
         * Constructs a new RequestNewOrder.
         * @memberof CVP
         * @classdesc Represents a RequestNewOrder.
         * @implements IRequestNewOrder
         * @constructor
         * @param {CVP.IRequestNewOrder=} [properties] Properties to set
         */
        function RequestNewOrder(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestNewOrder billingCode.
         * @member {string} billingCode
         * @memberof CVP.RequestNewOrder
         * @instance
         */
        RequestNewOrder.prototype.billingCode = "";

        /**
         * RequestNewOrder paymentId.
         * @member {number} paymentId
         * @memberof CVP.RequestNewOrder
         * @instance
         */
        RequestNewOrder.prototype.paymentId = 0;

        /**
         * RequestNewOrder sku.
         * @member {string} sku
         * @memberof CVP.RequestNewOrder
         * @instance
         */
        RequestNewOrder.prototype.sku = "";

        /**
         * RequestNewOrder extraInfo.
         * @member {string} extraInfo
         * @memberof CVP.RequestNewOrder
         * @instance
         */
        RequestNewOrder.prototype.extraInfo = "";

        /**
         * Creates a new RequestNewOrder instance using the specified properties.
         * @function create
         * @memberof CVP.RequestNewOrder
         * @static
         * @param {CVP.IRequestNewOrder=} [properties] Properties to set
         * @returns {CVP.RequestNewOrder} RequestNewOrder instance
         */
        RequestNewOrder.create = function create(properties) {
            return new RequestNewOrder(properties);
        };

        /**
         * Encodes the specified RequestNewOrder message. Does not implicitly {@link CVP.RequestNewOrder.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestNewOrder
         * @static
         * @param {CVP.IRequestNewOrder} message RequestNewOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestNewOrder.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.billingCode != null && message.hasOwnProperty("billingCode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.billingCode);
            if (message.paymentId != null && message.hasOwnProperty("paymentId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.paymentId);
            if (message.sku != null && message.hasOwnProperty("sku"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.sku);
            if (message.extraInfo != null && message.hasOwnProperty("extraInfo"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.extraInfo);
            return writer;
        };

        /**
         * Encodes the specified RequestNewOrder message, length delimited. Does not implicitly {@link CVP.RequestNewOrder.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestNewOrder
         * @static
         * @param {CVP.IRequestNewOrder} message RequestNewOrder message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestNewOrder.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestNewOrder message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestNewOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestNewOrder} RequestNewOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestNewOrder.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestNewOrder();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.billingCode = reader.string();
                    break;
                case 2:
                    message.paymentId = reader.int32();
                    break;
                case 3:
                    message.sku = reader.string();
                    break;
                case 4:
                    message.extraInfo = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestNewOrder message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestNewOrder
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestNewOrder} RequestNewOrder
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestNewOrder.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestNewOrder message.
         * @function verify
         * @memberof CVP.RequestNewOrder
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestNewOrder.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.billingCode != null && message.hasOwnProperty("billingCode"))
                if (!$util.isString(message.billingCode))
                    return "billingCode: string expected";
            if (message.paymentId != null && message.hasOwnProperty("paymentId"))
                if (!$util.isInteger(message.paymentId))
                    return "paymentId: integer expected";
            if (message.sku != null && message.hasOwnProperty("sku"))
                if (!$util.isString(message.sku))
                    return "sku: string expected";
            if (message.extraInfo != null && message.hasOwnProperty("extraInfo"))
                if (!$util.isString(message.extraInfo))
                    return "extraInfo: string expected";
            return null;
        };

        /**
         * Creates a RequestNewOrder message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestNewOrder
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestNewOrder} RequestNewOrder
         */
        RequestNewOrder.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestNewOrder)
                return object;
            var message = new $root.CVP.RequestNewOrder();
            if (object.billingCode != null)
                message.billingCode = String(object.billingCode);
            if (object.paymentId != null)
                message.paymentId = object.paymentId | 0;
            if (object.sku != null)
                message.sku = String(object.sku);
            if (object.extraInfo != null)
                message.extraInfo = String(object.extraInfo);
            return message;
        };

        /**
         * Creates a plain object from a RequestNewOrder message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestNewOrder
         * @static
         * @param {CVP.RequestNewOrder} message RequestNewOrder
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestNewOrder.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.billingCode = "";
                object.paymentId = 0;
                object.sku = "";
                object.extraInfo = "";
            }
            if (message.billingCode != null && message.hasOwnProperty("billingCode"))
                object.billingCode = message.billingCode;
            if (message.paymentId != null && message.hasOwnProperty("paymentId"))
                object.paymentId = message.paymentId;
            if (message.sku != null && message.hasOwnProperty("sku"))
                object.sku = message.sku;
            if (message.extraInfo != null && message.hasOwnProperty("extraInfo"))
                object.extraInfo = message.extraInfo;
            return object;
        };

        /**
         * Converts this RequestNewOrder to JSON.
         * @function toJSON
         * @memberof CVP.RequestNewOrder
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestNewOrder.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestNewOrder;
    })();

    CVP.RequestPurchaseResult = (function() {

        /**
         * Properties of a RequestPurchaseResult.
         * @memberof CVP
         * @interface IRequestPurchaseResult
         * @property {boolean|null} [debugUser] RequestPurchaseResult debugUser
         * @property {Array.<CVP.IGoodsList>|null} [goodsList] RequestPurchaseResult goodsList
         */

        /**
         * Constructs a new RequestPurchaseResult.
         * @memberof CVP
         * @classdesc Represents a RequestPurchaseResult.
         * @implements IRequestPurchaseResult
         * @constructor
         * @param {CVP.IRequestPurchaseResult=} [properties] Properties to set
         */
        function RequestPurchaseResult(properties) {
            this.goodsList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPurchaseResult debugUser.
         * @member {boolean} debugUser
         * @memberof CVP.RequestPurchaseResult
         * @instance
         */
        RequestPurchaseResult.prototype.debugUser = false;

        /**
         * RequestPurchaseResult goodsList.
         * @member {Array.<CVP.IGoodsList>} goodsList
         * @memberof CVP.RequestPurchaseResult
         * @instance
         */
        RequestPurchaseResult.prototype.goodsList = $util.emptyArray;

        /**
         * Creates a new RequestPurchaseResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPurchaseResult
         * @static
         * @param {CVP.IRequestPurchaseResult=} [properties] Properties to set
         * @returns {CVP.RequestPurchaseResult} RequestPurchaseResult instance
         */
        RequestPurchaseResult.create = function create(properties) {
            return new RequestPurchaseResult(properties);
        };

        /**
         * Encodes the specified RequestPurchaseResult message. Does not implicitly {@link CVP.RequestPurchaseResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPurchaseResult
         * @static
         * @param {CVP.IRequestPurchaseResult} message RequestPurchaseResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPurchaseResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.debugUser != null && message.hasOwnProperty("debugUser"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.debugUser);
            if (message.goodsList != null && message.goodsList.length)
                for (var i = 0; i < message.goodsList.length; ++i)
                    $root.CVP.GoodsList.encode(message.goodsList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPurchaseResult message, length delimited. Does not implicitly {@link CVP.RequestPurchaseResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPurchaseResult
         * @static
         * @param {CVP.IRequestPurchaseResult} message RequestPurchaseResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPurchaseResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPurchaseResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPurchaseResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPurchaseResult} RequestPurchaseResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPurchaseResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPurchaseResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.debugUser = reader.bool();
                    break;
                case 2:
                    if (!(message.goodsList && message.goodsList.length))
                        message.goodsList = [];
                    message.goodsList.push($root.CVP.GoodsList.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPurchaseResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPurchaseResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPurchaseResult} RequestPurchaseResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPurchaseResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPurchaseResult message.
         * @function verify
         * @memberof CVP.RequestPurchaseResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPurchaseResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.debugUser != null && message.hasOwnProperty("debugUser"))
                if (typeof message.debugUser !== "boolean")
                    return "debugUser: boolean expected";
            if (message.goodsList != null && message.hasOwnProperty("goodsList")) {
                if (!Array.isArray(message.goodsList))
                    return "goodsList: array expected";
                for (var i = 0; i < message.goodsList.length; ++i) {
                    var error = $root.CVP.GoodsList.verify(message.goodsList[i]);
                    if (error)
                        return "goodsList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestPurchaseResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPurchaseResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPurchaseResult} RequestPurchaseResult
         */
        RequestPurchaseResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPurchaseResult)
                return object;
            var message = new $root.CVP.RequestPurchaseResult();
            if (object.debugUser != null)
                message.debugUser = Boolean(object.debugUser);
            if (object.goodsList) {
                if (!Array.isArray(object.goodsList))
                    throw TypeError(".CVP.RequestPurchaseResult.goodsList: array expected");
                message.goodsList = [];
                for (var i = 0; i < object.goodsList.length; ++i) {
                    if (typeof object.goodsList[i] !== "object")
                        throw TypeError(".CVP.RequestPurchaseResult.goodsList: object expected");
                    message.goodsList[i] = $root.CVP.GoodsList.fromObject(object.goodsList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPurchaseResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPurchaseResult
         * @static
         * @param {CVP.RequestPurchaseResult} message RequestPurchaseResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPurchaseResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.goodsList = [];
            if (options.defaults)
                object.debugUser = false;
            if (message.debugUser != null && message.hasOwnProperty("debugUser"))
                object.debugUser = message.debugUser;
            if (message.goodsList && message.goodsList.length) {
                object.goodsList = [];
                for (var j = 0; j < message.goodsList.length; ++j)
                    object.goodsList[j] = $root.CVP.GoodsList.toObject(message.goodsList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestPurchaseResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestPurchaseResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPurchaseResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPurchaseResult;
    })();

    CVP.GoodsList = (function() {

        /**
         * Properties of a GoodsList.
         * @memberof CVP
         * @interface IGoodsList
         * @property {string|null} [goodsCode] GoodsList goodsCode
         * @property {number|null} [amount] GoodsList amount
         * @property {string|null} [extraInfo] GoodsList extraInfo
         * @property {number|null} [balance] GoodsList balance
         */

        /**
         * Constructs a new GoodsList.
         * @memberof CVP
         * @classdesc Represents a GoodsList.
         * @implements IGoodsList
         * @constructor
         * @param {CVP.IGoodsList=} [properties] Properties to set
         */
        function GoodsList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GoodsList goodsCode.
         * @member {string} goodsCode
         * @memberof CVP.GoodsList
         * @instance
         */
        GoodsList.prototype.goodsCode = "";

        /**
         * GoodsList amount.
         * @member {number} amount
         * @memberof CVP.GoodsList
         * @instance
         */
        GoodsList.prototype.amount = 0;

        /**
         * GoodsList extraInfo.
         * @member {string} extraInfo
         * @memberof CVP.GoodsList
         * @instance
         */
        GoodsList.prototype.extraInfo = "";

        /**
         * GoodsList balance.
         * @member {number} balance
         * @memberof CVP.GoodsList
         * @instance
         */
        GoodsList.prototype.balance = 0;

        /**
         * Creates a new GoodsList instance using the specified properties.
         * @function create
         * @memberof CVP.GoodsList
         * @static
         * @param {CVP.IGoodsList=} [properties] Properties to set
         * @returns {CVP.GoodsList} GoodsList instance
         */
        GoodsList.create = function create(properties) {
            return new GoodsList(properties);
        };

        /**
         * Encodes the specified GoodsList message. Does not implicitly {@link CVP.GoodsList.verify|verify} messages.
         * @function encode
         * @memberof CVP.GoodsList
         * @static
         * @param {CVP.IGoodsList} message GoodsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GoodsList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.goodsCode != null && message.hasOwnProperty("goodsCode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.goodsCode);
            if (message.amount != null && message.hasOwnProperty("amount"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.amount);
            if (message.extraInfo != null && message.hasOwnProperty("extraInfo"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.extraInfo);
            if (message.balance != null && message.hasOwnProperty("balance"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.balance);
            return writer;
        };

        /**
         * Encodes the specified GoodsList message, length delimited. Does not implicitly {@link CVP.GoodsList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.GoodsList
         * @static
         * @param {CVP.IGoodsList} message GoodsList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GoodsList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GoodsList message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.GoodsList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.GoodsList} GoodsList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GoodsList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.GoodsList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.goodsCode = reader.string();
                    break;
                case 2:
                    message.amount = reader.int32();
                    break;
                case 3:
                    message.extraInfo = reader.string();
                    break;
                case 4:
                    message.balance = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GoodsList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.GoodsList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.GoodsList} GoodsList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GoodsList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GoodsList message.
         * @function verify
         * @memberof CVP.GoodsList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GoodsList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.goodsCode != null && message.hasOwnProperty("goodsCode"))
                if (!$util.isString(message.goodsCode))
                    return "goodsCode: string expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount))
                    return "amount: integer expected";
            if (message.extraInfo != null && message.hasOwnProperty("extraInfo"))
                if (!$util.isString(message.extraInfo))
                    return "extraInfo: string expected";
            if (message.balance != null && message.hasOwnProperty("balance"))
                if (!$util.isInteger(message.balance))
                    return "balance: integer expected";
            return null;
        };

        /**
         * Creates a GoodsList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.GoodsList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.GoodsList} GoodsList
         */
        GoodsList.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.GoodsList)
                return object;
            var message = new $root.CVP.GoodsList();
            if (object.goodsCode != null)
                message.goodsCode = String(object.goodsCode);
            if (object.amount != null)
                message.amount = object.amount | 0;
            if (object.extraInfo != null)
                message.extraInfo = String(object.extraInfo);
            if (object.balance != null)
                message.balance = object.balance | 0;
            return message;
        };

        /**
         * Creates a plain object from a GoodsList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.GoodsList
         * @static
         * @param {CVP.GoodsList} message GoodsList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GoodsList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.goodsCode = "";
                object.amount = 0;
                object.extraInfo = "";
                object.balance = 0;
            }
            if (message.goodsCode != null && message.hasOwnProperty("goodsCode"))
                object.goodsCode = message.goodsCode;
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = message.amount;
            if (message.extraInfo != null && message.hasOwnProperty("extraInfo"))
                object.extraInfo = message.extraInfo;
            if (message.balance != null && message.hasOwnProperty("balance"))
                object.balance = message.balance;
            return object;
        };

        /**
         * Converts this GoodsList to JSON.
         * @function toJSON
         * @memberof CVP.GoodsList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GoodsList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GoodsList;
    })();

    CVP.sendGoods = (function() {

        /**
         * Properties of a sendGoods.
         * @memberof CVP
         * @interface IsendGoods
         * @property {string|null} [orderNo] sendGoods orderNo
         * @property {string|null} [packageName] sendGoods packageName
         * @property {Array.<CVP.IGoodsList1>|null} [goodsList] sendGoods goodsList
         * @property {string|null} [billingCode] sendGoods billingCode
         */

        /**
         * Constructs a new sendGoods.
         * @memberof CVP
         * @classdesc Represents a sendGoods.
         * @implements IsendGoods
         * @constructor
         * @param {CVP.IsendGoods=} [properties] Properties to set
         */
        function sendGoods(properties) {
            this.goodsList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * sendGoods orderNo.
         * @member {string} orderNo
         * @memberof CVP.sendGoods
         * @instance
         */
        sendGoods.prototype.orderNo = "";

        /**
         * sendGoods packageName.
         * @member {string} packageName
         * @memberof CVP.sendGoods
         * @instance
         */
        sendGoods.prototype.packageName = "";

        /**
         * sendGoods goodsList.
         * @member {Array.<CVP.IGoodsList1>} goodsList
         * @memberof CVP.sendGoods
         * @instance
         */
        sendGoods.prototype.goodsList = $util.emptyArray;

        /**
         * sendGoods billingCode.
         * @member {string} billingCode
         * @memberof CVP.sendGoods
         * @instance
         */
        sendGoods.prototype.billingCode = "";

        /**
         * Creates a new sendGoods instance using the specified properties.
         * @function create
         * @memberof CVP.sendGoods
         * @static
         * @param {CVP.IsendGoods=} [properties] Properties to set
         * @returns {CVP.sendGoods} sendGoods instance
         */
        sendGoods.create = function create(properties) {
            return new sendGoods(properties);
        };

        /**
         * Encodes the specified sendGoods message. Does not implicitly {@link CVP.sendGoods.verify|verify} messages.
         * @function encode
         * @memberof CVP.sendGoods
         * @static
         * @param {CVP.IsendGoods} message sendGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGoods.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.orderNo != null && message.hasOwnProperty("orderNo"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.orderNo);
            if (message.packageName != null && message.hasOwnProperty("packageName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.packageName);
            if (message.goodsList != null && message.goodsList.length)
                for (var i = 0; i < message.goodsList.length; ++i)
                    $root.CVP.GoodsList1.encode(message.goodsList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.billingCode != null && message.hasOwnProperty("billingCode"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.billingCode);
            return writer;
        };

        /**
         * Encodes the specified sendGoods message, length delimited. Does not implicitly {@link CVP.sendGoods.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.sendGoods
         * @static
         * @param {CVP.IsendGoods} message sendGoods message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        sendGoods.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a sendGoods message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.sendGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.sendGoods} sendGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        sendGoods.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.sendGoods();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.orderNo = reader.string();
                    break;
                case 2:
                    message.packageName = reader.string();
                    break;
                case 3:
                    if (!(message.goodsList && message.goodsList.length))
                        message.goodsList = [];
                    message.goodsList.push($root.CVP.GoodsList1.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.billingCode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a sendGoods message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.sendGoods
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.sendGoods} sendGoods
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        sendGoods.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a sendGoods message.
         * @function verify
         * @memberof CVP.sendGoods
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        sendGoods.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.orderNo != null && message.hasOwnProperty("orderNo"))
                if (!$util.isString(message.orderNo))
                    return "orderNo: string expected";
            if (message.packageName != null && message.hasOwnProperty("packageName"))
                if (!$util.isString(message.packageName))
                    return "packageName: string expected";
            if (message.goodsList != null && message.hasOwnProperty("goodsList")) {
                if (!Array.isArray(message.goodsList))
                    return "goodsList: array expected";
                for (var i = 0; i < message.goodsList.length; ++i) {
                    var error = $root.CVP.GoodsList1.verify(message.goodsList[i]);
                    if (error)
                        return "goodsList." + error;
                }
            }
            if (message.billingCode != null && message.hasOwnProperty("billingCode"))
                if (!$util.isString(message.billingCode))
                    return "billingCode: string expected";
            return null;
        };

        /**
         * Creates a sendGoods message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.sendGoods
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.sendGoods} sendGoods
         */
        sendGoods.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.sendGoods)
                return object;
            var message = new $root.CVP.sendGoods();
            if (object.orderNo != null)
                message.orderNo = String(object.orderNo);
            if (object.packageName != null)
                message.packageName = String(object.packageName);
            if (object.goodsList) {
                if (!Array.isArray(object.goodsList))
                    throw TypeError(".CVP.sendGoods.goodsList: array expected");
                message.goodsList = [];
                for (var i = 0; i < object.goodsList.length; ++i) {
                    if (typeof object.goodsList[i] !== "object")
                        throw TypeError(".CVP.sendGoods.goodsList: object expected");
                    message.goodsList[i] = $root.CVP.GoodsList1.fromObject(object.goodsList[i]);
                }
            }
            if (object.billingCode != null)
                message.billingCode = String(object.billingCode);
            return message;
        };

        /**
         * Creates a plain object from a sendGoods message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.sendGoods
         * @static
         * @param {CVP.sendGoods} message sendGoods
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        sendGoods.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.goodsList = [];
            if (options.defaults) {
                object.orderNo = "";
                object.packageName = "";
                object.billingCode = "";
            }
            if (message.orderNo != null && message.hasOwnProperty("orderNo"))
                object.orderNo = message.orderNo;
            if (message.packageName != null && message.hasOwnProperty("packageName"))
                object.packageName = message.packageName;
            if (message.goodsList && message.goodsList.length) {
                object.goodsList = [];
                for (var j = 0; j < message.goodsList.length; ++j)
                    object.goodsList[j] = $root.CVP.GoodsList1.toObject(message.goodsList[j], options);
            }
            if (message.billingCode != null && message.hasOwnProperty("billingCode"))
                object.billingCode = message.billingCode;
            return object;
        };

        /**
         * Converts this sendGoods to JSON.
         * @function toJSON
         * @memberof CVP.sendGoods
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        sendGoods.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return sendGoods;
    })();

    CVP.GoodsList1 = (function() {

        /**
         * Properties of a GoodsList1.
         * @memberof CVP
         * @interface IGoodsList1
         * @property {string|null} [goodsCode] GoodsList1 goodsCode
         * @property {number|null} [amount] GoodsList1 amount
         */

        /**
         * Constructs a new GoodsList1.
         * @memberof CVP
         * @classdesc Represents a GoodsList1.
         * @implements IGoodsList1
         * @constructor
         * @param {CVP.IGoodsList1=} [properties] Properties to set
         */
        function GoodsList1(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GoodsList1 goodsCode.
         * @member {string} goodsCode
         * @memberof CVP.GoodsList1
         * @instance
         */
        GoodsList1.prototype.goodsCode = "";

        /**
         * GoodsList1 amount.
         * @member {number} amount
         * @memberof CVP.GoodsList1
         * @instance
         */
        GoodsList1.prototype.amount = 0;

        /**
         * Creates a new GoodsList1 instance using the specified properties.
         * @function create
         * @memberof CVP.GoodsList1
         * @static
         * @param {CVP.IGoodsList1=} [properties] Properties to set
         * @returns {CVP.GoodsList1} GoodsList1 instance
         */
        GoodsList1.create = function create(properties) {
            return new GoodsList1(properties);
        };

        /**
         * Encodes the specified GoodsList1 message. Does not implicitly {@link CVP.GoodsList1.verify|verify} messages.
         * @function encode
         * @memberof CVP.GoodsList1
         * @static
         * @param {CVP.IGoodsList1} message GoodsList1 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GoodsList1.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.goodsCode != null && message.hasOwnProperty("goodsCode"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.goodsCode);
            if (message.amount != null && message.hasOwnProperty("amount"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.amount);
            return writer;
        };

        /**
         * Encodes the specified GoodsList1 message, length delimited. Does not implicitly {@link CVP.GoodsList1.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.GoodsList1
         * @static
         * @param {CVP.IGoodsList1} message GoodsList1 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GoodsList1.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GoodsList1 message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.GoodsList1
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.GoodsList1} GoodsList1
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GoodsList1.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.GoodsList1();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.goodsCode = reader.string();
                    break;
                case 2:
                    message.amount = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GoodsList1 message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.GoodsList1
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.GoodsList1} GoodsList1
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GoodsList1.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GoodsList1 message.
         * @function verify
         * @memberof CVP.GoodsList1
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GoodsList1.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.goodsCode != null && message.hasOwnProperty("goodsCode"))
                if (!$util.isString(message.goodsCode))
                    return "goodsCode: string expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount))
                    return "amount: integer expected";
            return null;
        };

        /**
         * Creates a GoodsList1 message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.GoodsList1
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.GoodsList1} GoodsList1
         */
        GoodsList1.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.GoodsList1)
                return object;
            var message = new $root.CVP.GoodsList1();
            if (object.goodsCode != null)
                message.goodsCode = String(object.goodsCode);
            if (object.amount != null)
                message.amount = object.amount | 0;
            return message;
        };

        /**
         * Creates a plain object from a GoodsList1 message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.GoodsList1
         * @static
         * @param {CVP.GoodsList1} message GoodsList1
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GoodsList1.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.goodsCode = "";
                object.amount = 0;
            }
            if (message.goodsCode != null && message.hasOwnProperty("goodsCode"))
                object.goodsCode = message.goodsCode;
            if (message.amount != null && message.hasOwnProperty("amount"))
                object.amount = message.amount;
            return object;
        };

        /**
         * Converts this GoodsList1 to JSON.
         * @function toJSON
         * @memberof CVP.GoodsList1
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GoodsList1.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GoodsList1;
    })();

    CVP.RequestPig = (function() {

        /**
         * Properties of a RequestPig.
         * @memberof CVP
         * @interface IRequestPig
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestPig commonParams
         */

        /**
         * Constructs a new RequestPig.
         * @memberof CVP
         * @classdesc Represents a RequestPig.
         * @implements IRequestPig
         * @constructor
         * @param {CVP.IRequestPig=} [properties] Properties to set
         */
        function RequestPig(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPig commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestPig
         * @instance
         */
        RequestPig.prototype.commonParams = null;

        /**
         * Creates a new RequestPig instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPig
         * @static
         * @param {CVP.IRequestPig=} [properties] Properties to set
         * @returns {CVP.RequestPig} RequestPig instance
         */
        RequestPig.create = function create(properties) {
            return new RequestPig(properties);
        };

        /**
         * Encodes the specified RequestPig message. Does not implicitly {@link CVP.RequestPig.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPig
         * @static
         * @param {CVP.IRequestPig} message RequestPig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPig.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPig message, length delimited. Does not implicitly {@link CVP.RequestPig.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPig
         * @static
         * @param {CVP.IRequestPig} message RequestPig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPig.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPig message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPig
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPig} RequestPig
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPig.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPig();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPig message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPig
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPig} RequestPig
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPig.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPig message.
         * @function verify
         * @memberof CVP.RequestPig
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPig.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestPig message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPig
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPig} RequestPig
         */
        RequestPig.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPig)
                return object;
            var message = new $root.CVP.RequestPig();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestPig.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPig message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPig
         * @static
         * @param {CVP.RequestPig} message RequestPig
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPig.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestPig to JSON.
         * @function toJSON
         * @memberof CVP.RequestPig
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPig.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPig;
    })();

    CVP.RequestPigResult = (function() {

        /**
         * Properties of a RequestPigResult.
         * @memberof CVP
         * @interface IRequestPigResult
         * @property {Array.<CVP.IPigItem>|null} [pigInfoList] RequestPigResult pigInfoList
         */

        /**
         * Constructs a new RequestPigResult.
         * @memberof CVP
         * @classdesc Represents a RequestPigResult.
         * @implements IRequestPigResult
         * @constructor
         * @param {CVP.IRequestPigResult=} [properties] Properties to set
         */
        function RequestPigResult(properties) {
            this.pigInfoList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPigResult pigInfoList.
         * @member {Array.<CVP.IPigItem>} pigInfoList
         * @memberof CVP.RequestPigResult
         * @instance
         */
        RequestPigResult.prototype.pigInfoList = $util.emptyArray;

        /**
         * Creates a new RequestPigResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPigResult
         * @static
         * @param {CVP.IRequestPigResult=} [properties] Properties to set
         * @returns {CVP.RequestPigResult} RequestPigResult instance
         */
        RequestPigResult.create = function create(properties) {
            return new RequestPigResult(properties);
        };

        /**
         * Encodes the specified RequestPigResult message. Does not implicitly {@link CVP.RequestPigResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPigResult
         * @static
         * @param {CVP.IRequestPigResult} message RequestPigResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPigResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pigInfoList != null && message.pigInfoList.length)
                for (var i = 0; i < message.pigInfoList.length; ++i)
                    $root.CVP.PigItem.encode(message.pigInfoList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPigResult message, length delimited. Does not implicitly {@link CVP.RequestPigResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPigResult
         * @static
         * @param {CVP.IRequestPigResult} message RequestPigResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPigResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPigResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPigResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPigResult} RequestPigResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPigResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPigResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.pigInfoList && message.pigInfoList.length))
                        message.pigInfoList = [];
                    message.pigInfoList.push($root.CVP.PigItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPigResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPigResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPigResult} RequestPigResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPigResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPigResult message.
         * @function verify
         * @memberof CVP.RequestPigResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPigResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pigInfoList != null && message.hasOwnProperty("pigInfoList")) {
                if (!Array.isArray(message.pigInfoList))
                    return "pigInfoList: array expected";
                for (var i = 0; i < message.pigInfoList.length; ++i) {
                    var error = $root.CVP.PigItem.verify(message.pigInfoList[i]);
                    if (error)
                        return "pigInfoList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestPigResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPigResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPigResult} RequestPigResult
         */
        RequestPigResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPigResult)
                return object;
            var message = new $root.CVP.RequestPigResult();
            if (object.pigInfoList) {
                if (!Array.isArray(object.pigInfoList))
                    throw TypeError(".CVP.RequestPigResult.pigInfoList: array expected");
                message.pigInfoList = [];
                for (var i = 0; i < object.pigInfoList.length; ++i) {
                    if (typeof object.pigInfoList[i] !== "object")
                        throw TypeError(".CVP.RequestPigResult.pigInfoList: object expected");
                    message.pigInfoList[i] = $root.CVP.PigItem.fromObject(object.pigInfoList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPigResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPigResult
         * @static
         * @param {CVP.RequestPigResult} message RequestPigResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPigResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pigInfoList = [];
            if (message.pigInfoList && message.pigInfoList.length) {
                object.pigInfoList = [];
                for (var j = 0; j < message.pigInfoList.length; ++j)
                    object.pigInfoList[j] = $root.CVP.PigItem.toObject(message.pigInfoList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestPigResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestPigResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPigResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPigResult;
    })();

    CVP.UpdatePig = (function() {

        /**
         * Properties of an UpdatePig.
         * @memberof CVP
         * @interface IUpdatePig
         * @property {CVP.ItemType|null} [pig] UpdatePig pig
         */

        /**
         * Constructs a new UpdatePig.
         * @memberof CVP
         * @classdesc Represents an UpdatePig.
         * @implements IUpdatePig
         * @constructor
         * @param {CVP.IUpdatePig=} [properties] Properties to set
         */
        function UpdatePig(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdatePig pig.
         * @member {CVP.ItemType} pig
         * @memberof CVP.UpdatePig
         * @instance
         */
        UpdatePig.prototype.pig = 1;

        /**
         * Creates a new UpdatePig instance using the specified properties.
         * @function create
         * @memberof CVP.UpdatePig
         * @static
         * @param {CVP.IUpdatePig=} [properties] Properties to set
         * @returns {CVP.UpdatePig} UpdatePig instance
         */
        UpdatePig.create = function create(properties) {
            return new UpdatePig(properties);
        };

        /**
         * Encodes the specified UpdatePig message. Does not implicitly {@link CVP.UpdatePig.verify|verify} messages.
         * @function encode
         * @memberof CVP.UpdatePig
         * @static
         * @param {CVP.IUpdatePig} message UpdatePig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdatePig.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pig != null && message.hasOwnProperty("pig"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pig);
            return writer;
        };

        /**
         * Encodes the specified UpdatePig message, length delimited. Does not implicitly {@link CVP.UpdatePig.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UpdatePig
         * @static
         * @param {CVP.IUpdatePig} message UpdatePig message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdatePig.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdatePig message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UpdatePig
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UpdatePig} UpdatePig
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdatePig.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UpdatePig();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pig = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdatePig message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UpdatePig
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UpdatePig} UpdatePig
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdatePig.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdatePig message.
         * @function verify
         * @memberof CVP.UpdatePig
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdatePig.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pig != null && message.hasOwnProperty("pig"))
                switch (message.pig) {
                default:
                    return "pig: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                    break;
                }
            return null;
        };

        /**
         * Creates an UpdatePig message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UpdatePig
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UpdatePig} UpdatePig
         */
        UpdatePig.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UpdatePig)
                return object;
            var message = new $root.CVP.UpdatePig();
            switch (object.pig) {
            case "SHOP_COIN_PACKAGE":
            case 1:
                message.pig = 1;
                break;
            case "PIG_SILVER":
            case 2:
                message.pig = 2;
                break;
            case "PIG_GOLD":
            case 3:
                message.pig = 3;
                break;
            case "PIG_DIAMOND":
            case 4:
                message.pig = 4;
                break;
            case "SCRATCH_CARD_PACKAGE":
            case 5:
                message.pig = 5;
                break;
            case "DEAL_COIN_PACKAGE":
            case 6:
                message.pig = 6;
                break;
            case "AVATAR":
            case 7:
                message.pig = 7;
                break;
            case "VAULT_KEY_PACKAGE":
            case 8:
                message.pig = 8;
                break;
            case "DOUBLE_GAME":
            case 9:
                message.pig = 9;
                break;
            case "WHEEL":
            case 10:
                message.pig = 10;
                break;
            case "MASTER_CLUB":
            case 11:
                message.pig = 11;
                break;
            case "REMOVE_AD":
            case 12:
                message.pig = 12;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an UpdatePig message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UpdatePig
         * @static
         * @param {CVP.UpdatePig} message UpdatePig
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdatePig.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.pig = options.enums === String ? "SHOP_COIN_PACKAGE" : 1;
            if (message.pig != null && message.hasOwnProperty("pig"))
                object.pig = options.enums === String ? $root.CVP.ItemType[message.pig] : message.pig;
            return object;
        };

        /**
         * Converts this UpdatePig to JSON.
         * @function toJSON
         * @memberof CVP.UpdatePig
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdatePig.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdatePig;
    })();

    /**
     * PrivateVaultType enum.
     * @name CVP.PrivateVaultType
     * @enum {string}
     * @property {number} YESTERDAY=1 YESTERDAY value
     * @property {number} TODAY=2 TODAY value
     */
    CVP.PrivateVaultType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "YESTERDAY"] = 1;
        values[valuesById[2] = "TODAY"] = 2;
        return values;
    })();

    CVP.RequestPrivateVault = (function() {

        /**
         * Properties of a RequestPrivateVault.
         * @memberof CVP
         * @interface IRequestPrivateVault
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestPrivateVault commonParams
         */

        /**
         * Constructs a new RequestPrivateVault.
         * @memberof CVP
         * @classdesc Represents a RequestPrivateVault.
         * @implements IRequestPrivateVault
         * @constructor
         * @param {CVP.IRequestPrivateVault=} [properties] Properties to set
         */
        function RequestPrivateVault(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPrivateVault commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestPrivateVault
         * @instance
         */
        RequestPrivateVault.prototype.commonParams = null;

        /**
         * Creates a new RequestPrivateVault instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPrivateVault
         * @static
         * @param {CVP.IRequestPrivateVault=} [properties] Properties to set
         * @returns {CVP.RequestPrivateVault} RequestPrivateVault instance
         */
        RequestPrivateVault.create = function create(properties) {
            return new RequestPrivateVault(properties);
        };

        /**
         * Encodes the specified RequestPrivateVault message. Does not implicitly {@link CVP.RequestPrivateVault.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPrivateVault
         * @static
         * @param {CVP.IRequestPrivateVault} message RequestPrivateVault message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPrivateVault.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPrivateVault message, length delimited. Does not implicitly {@link CVP.RequestPrivateVault.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPrivateVault
         * @static
         * @param {CVP.IRequestPrivateVault} message RequestPrivateVault message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPrivateVault.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPrivateVault message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPrivateVault
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPrivateVault} RequestPrivateVault
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPrivateVault.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPrivateVault();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPrivateVault message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPrivateVault
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPrivateVault} RequestPrivateVault
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPrivateVault.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPrivateVault message.
         * @function verify
         * @memberof CVP.RequestPrivateVault
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPrivateVault.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestPrivateVault message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPrivateVault
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPrivateVault} RequestPrivateVault
         */
        RequestPrivateVault.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPrivateVault)
                return object;
            var message = new $root.CVP.RequestPrivateVault();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestPrivateVault.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPrivateVault message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPrivateVault
         * @static
         * @param {CVP.RequestPrivateVault} message RequestPrivateVault
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPrivateVault.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestPrivateVault to JSON.
         * @function toJSON
         * @memberof CVP.RequestPrivateVault
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPrivateVault.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPrivateVault;
    })();

    CVP.RequestPrivateVaultResult = (function() {

        /**
         * Properties of a RequestPrivateVaultResult.
         * @memberof CVP
         * @interface IRequestPrivateVaultResult
         * @property {number|null} [yesterdayCoins] RequestPrivateVaultResult yesterdayCoins
         * @property {number|null} [todayCoins] RequestPrivateVaultResult todayCoins
         * @property {Array.<CVP.IKeyItem>|null} [keyInfoList] RequestPrivateVaultResult keyInfoList
         */

        /**
         * Constructs a new RequestPrivateVaultResult.
         * @memberof CVP
         * @classdesc Represents a RequestPrivateVaultResult.
         * @implements IRequestPrivateVaultResult
         * @constructor
         * @param {CVP.IRequestPrivateVaultResult=} [properties] Properties to set
         */
        function RequestPrivateVaultResult(properties) {
            this.keyInfoList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPrivateVaultResult yesterdayCoins.
         * @member {number} yesterdayCoins
         * @memberof CVP.RequestPrivateVaultResult
         * @instance
         */
        RequestPrivateVaultResult.prototype.yesterdayCoins = 0;

        /**
         * RequestPrivateVaultResult todayCoins.
         * @member {number} todayCoins
         * @memberof CVP.RequestPrivateVaultResult
         * @instance
         */
        RequestPrivateVaultResult.prototype.todayCoins = 0;

        /**
         * RequestPrivateVaultResult keyInfoList.
         * @member {Array.<CVP.IKeyItem>} keyInfoList
         * @memberof CVP.RequestPrivateVaultResult
         * @instance
         */
        RequestPrivateVaultResult.prototype.keyInfoList = $util.emptyArray;

        /**
         * Creates a new RequestPrivateVaultResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPrivateVaultResult
         * @static
         * @param {CVP.IRequestPrivateVaultResult=} [properties] Properties to set
         * @returns {CVP.RequestPrivateVaultResult} RequestPrivateVaultResult instance
         */
        RequestPrivateVaultResult.create = function create(properties) {
            return new RequestPrivateVaultResult(properties);
        };

        /**
         * Encodes the specified RequestPrivateVaultResult message. Does not implicitly {@link CVP.RequestPrivateVaultResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPrivateVaultResult
         * @static
         * @param {CVP.IRequestPrivateVaultResult} message RequestPrivateVaultResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPrivateVaultResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.yesterdayCoins != null && message.hasOwnProperty("yesterdayCoins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.yesterdayCoins);
            if (message.todayCoins != null && message.hasOwnProperty("todayCoins"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.todayCoins);
            if (message.keyInfoList != null && message.keyInfoList.length)
                for (var i = 0; i < message.keyInfoList.length; ++i)
                    $root.CVP.KeyItem.encode(message.keyInfoList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPrivateVaultResult message, length delimited. Does not implicitly {@link CVP.RequestPrivateVaultResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPrivateVaultResult
         * @static
         * @param {CVP.IRequestPrivateVaultResult} message RequestPrivateVaultResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPrivateVaultResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPrivateVaultResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPrivateVaultResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPrivateVaultResult} RequestPrivateVaultResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPrivateVaultResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPrivateVaultResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.yesterdayCoins = reader.double();
                    break;
                case 2:
                    message.todayCoins = reader.double();
                    break;
                case 3:
                    if (!(message.keyInfoList && message.keyInfoList.length))
                        message.keyInfoList = [];
                    message.keyInfoList.push($root.CVP.KeyItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPrivateVaultResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPrivateVaultResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPrivateVaultResult} RequestPrivateVaultResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPrivateVaultResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPrivateVaultResult message.
         * @function verify
         * @memberof CVP.RequestPrivateVaultResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPrivateVaultResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.yesterdayCoins != null && message.hasOwnProperty("yesterdayCoins"))
                if (typeof message.yesterdayCoins !== "number")
                    return "yesterdayCoins: number expected";
            if (message.todayCoins != null && message.hasOwnProperty("todayCoins"))
                if (typeof message.todayCoins !== "number")
                    return "todayCoins: number expected";
            if (message.keyInfoList != null && message.hasOwnProperty("keyInfoList")) {
                if (!Array.isArray(message.keyInfoList))
                    return "keyInfoList: array expected";
                for (var i = 0; i < message.keyInfoList.length; ++i) {
                    var error = $root.CVP.KeyItem.verify(message.keyInfoList[i]);
                    if (error)
                        return "keyInfoList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestPrivateVaultResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPrivateVaultResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPrivateVaultResult} RequestPrivateVaultResult
         */
        RequestPrivateVaultResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPrivateVaultResult)
                return object;
            var message = new $root.CVP.RequestPrivateVaultResult();
            if (object.yesterdayCoins != null)
                message.yesterdayCoins = Number(object.yesterdayCoins);
            if (object.todayCoins != null)
                message.todayCoins = Number(object.todayCoins);
            if (object.keyInfoList) {
                if (!Array.isArray(object.keyInfoList))
                    throw TypeError(".CVP.RequestPrivateVaultResult.keyInfoList: array expected");
                message.keyInfoList = [];
                for (var i = 0; i < object.keyInfoList.length; ++i) {
                    if (typeof object.keyInfoList[i] !== "object")
                        throw TypeError(".CVP.RequestPrivateVaultResult.keyInfoList: object expected");
                    message.keyInfoList[i] = $root.CVP.KeyItem.fromObject(object.keyInfoList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPrivateVaultResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPrivateVaultResult
         * @static
         * @param {CVP.RequestPrivateVaultResult} message RequestPrivateVaultResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPrivateVaultResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.keyInfoList = [];
            if (options.defaults) {
                object.yesterdayCoins = 0;
                object.todayCoins = 0;
            }
            if (message.yesterdayCoins != null && message.hasOwnProperty("yesterdayCoins"))
                object.yesterdayCoins = options.json && !isFinite(message.yesterdayCoins) ? String(message.yesterdayCoins) : message.yesterdayCoins;
            if (message.todayCoins != null && message.hasOwnProperty("todayCoins"))
                object.todayCoins = options.json && !isFinite(message.todayCoins) ? String(message.todayCoins) : message.todayCoins;
            if (message.keyInfoList && message.keyInfoList.length) {
                object.keyInfoList = [];
                for (var j = 0; j < message.keyInfoList.length; ++j)
                    object.keyInfoList[j] = $root.CVP.KeyItem.toObject(message.keyInfoList[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestPrivateVaultResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestPrivateVaultResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPrivateVaultResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPrivateVaultResult;
    })();

    CVP.RequestOpenPrivateVault = (function() {

        /**
         * Properties of a RequestOpenPrivateVault.
         * @memberof CVP
         * @interface IRequestOpenPrivateVault
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestOpenPrivateVault commonParams
         * @property {CVP.PrivateVaultType|null} [privateVaultType] RequestOpenPrivateVault privateVaultType
         */

        /**
         * Constructs a new RequestOpenPrivateVault.
         * @memberof CVP
         * @classdesc Represents a RequestOpenPrivateVault.
         * @implements IRequestOpenPrivateVault
         * @constructor
         * @param {CVP.IRequestOpenPrivateVault=} [properties] Properties to set
         */
        function RequestOpenPrivateVault(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestOpenPrivateVault commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestOpenPrivateVault
         * @instance
         */
        RequestOpenPrivateVault.prototype.commonParams = null;

        /**
         * RequestOpenPrivateVault privateVaultType.
         * @member {CVP.PrivateVaultType} privateVaultType
         * @memberof CVP.RequestOpenPrivateVault
         * @instance
         */
        RequestOpenPrivateVault.prototype.privateVaultType = 1;

        /**
         * Creates a new RequestOpenPrivateVault instance using the specified properties.
         * @function create
         * @memberof CVP.RequestOpenPrivateVault
         * @static
         * @param {CVP.IRequestOpenPrivateVault=} [properties] Properties to set
         * @returns {CVP.RequestOpenPrivateVault} RequestOpenPrivateVault instance
         */
        RequestOpenPrivateVault.create = function create(properties) {
            return new RequestOpenPrivateVault(properties);
        };

        /**
         * Encodes the specified RequestOpenPrivateVault message. Does not implicitly {@link CVP.RequestOpenPrivateVault.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestOpenPrivateVault
         * @static
         * @param {CVP.IRequestOpenPrivateVault} message RequestOpenPrivateVault message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestOpenPrivateVault.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.privateVaultType != null && message.hasOwnProperty("privateVaultType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.privateVaultType);
            return writer;
        };

        /**
         * Encodes the specified RequestOpenPrivateVault message, length delimited. Does not implicitly {@link CVP.RequestOpenPrivateVault.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestOpenPrivateVault
         * @static
         * @param {CVP.IRequestOpenPrivateVault} message RequestOpenPrivateVault message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestOpenPrivateVault.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestOpenPrivateVault message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestOpenPrivateVault
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestOpenPrivateVault} RequestOpenPrivateVault
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestOpenPrivateVault.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestOpenPrivateVault();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.privateVaultType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestOpenPrivateVault message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestOpenPrivateVault
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestOpenPrivateVault} RequestOpenPrivateVault
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestOpenPrivateVault.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestOpenPrivateVault message.
         * @function verify
         * @memberof CVP.RequestOpenPrivateVault
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestOpenPrivateVault.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.privateVaultType != null && message.hasOwnProperty("privateVaultType"))
                switch (message.privateVaultType) {
                default:
                    return "privateVaultType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestOpenPrivateVault message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestOpenPrivateVault
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestOpenPrivateVault} RequestOpenPrivateVault
         */
        RequestOpenPrivateVault.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestOpenPrivateVault)
                return object;
            var message = new $root.CVP.RequestOpenPrivateVault();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestOpenPrivateVault.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            switch (object.privateVaultType) {
            case "YESTERDAY":
            case 1:
                message.privateVaultType = 1;
                break;
            case "TODAY":
            case 2:
                message.privateVaultType = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestOpenPrivateVault message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestOpenPrivateVault
         * @static
         * @param {CVP.RequestOpenPrivateVault} message RequestOpenPrivateVault
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestOpenPrivateVault.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.privateVaultType = options.enums === String ? "YESTERDAY" : 1;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.privateVaultType != null && message.hasOwnProperty("privateVaultType"))
                object.privateVaultType = options.enums === String ? $root.CVP.PrivateVaultType[message.privateVaultType] : message.privateVaultType;
            return object;
        };

        /**
         * Converts this RequestOpenPrivateVault to JSON.
         * @function toJSON
         * @memberof CVP.RequestOpenPrivateVault
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestOpenPrivateVault.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestOpenPrivateVault;
    })();

    CVP.RequestOpenPrivateVaultResult = (function() {

        /**
         * Properties of a RequestOpenPrivateVaultResult.
         * @memberof CVP
         * @interface IRequestOpenPrivateVaultResult
         * @property {number|null} [getCoins] RequestOpenPrivateVaultResult getCoins
         */

        /**
         * Constructs a new RequestOpenPrivateVaultResult.
         * @memberof CVP
         * @classdesc Represents a RequestOpenPrivateVaultResult.
         * @implements IRequestOpenPrivateVaultResult
         * @constructor
         * @param {CVP.IRequestOpenPrivateVaultResult=} [properties] Properties to set
         */
        function RequestOpenPrivateVaultResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestOpenPrivateVaultResult getCoins.
         * @member {number} getCoins
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @instance
         */
        RequestOpenPrivateVaultResult.prototype.getCoins = 0;

        /**
         * Creates a new RequestOpenPrivateVaultResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @static
         * @param {CVP.IRequestOpenPrivateVaultResult=} [properties] Properties to set
         * @returns {CVP.RequestOpenPrivateVaultResult} RequestOpenPrivateVaultResult instance
         */
        RequestOpenPrivateVaultResult.create = function create(properties) {
            return new RequestOpenPrivateVaultResult(properties);
        };

        /**
         * Encodes the specified RequestOpenPrivateVaultResult message. Does not implicitly {@link CVP.RequestOpenPrivateVaultResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @static
         * @param {CVP.IRequestOpenPrivateVaultResult} message RequestOpenPrivateVaultResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestOpenPrivateVaultResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.getCoins != null && message.hasOwnProperty("getCoins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.getCoins);
            return writer;
        };

        /**
         * Encodes the specified RequestOpenPrivateVaultResult message, length delimited. Does not implicitly {@link CVP.RequestOpenPrivateVaultResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @static
         * @param {CVP.IRequestOpenPrivateVaultResult} message RequestOpenPrivateVaultResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestOpenPrivateVaultResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestOpenPrivateVaultResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestOpenPrivateVaultResult} RequestOpenPrivateVaultResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestOpenPrivateVaultResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestOpenPrivateVaultResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.getCoins = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestOpenPrivateVaultResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestOpenPrivateVaultResult} RequestOpenPrivateVaultResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestOpenPrivateVaultResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestOpenPrivateVaultResult message.
         * @function verify
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestOpenPrivateVaultResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.getCoins != null && message.hasOwnProperty("getCoins"))
                if (typeof message.getCoins !== "number")
                    return "getCoins: number expected";
            return null;
        };

        /**
         * Creates a RequestOpenPrivateVaultResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestOpenPrivateVaultResult} RequestOpenPrivateVaultResult
         */
        RequestOpenPrivateVaultResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestOpenPrivateVaultResult)
                return object;
            var message = new $root.CVP.RequestOpenPrivateVaultResult();
            if (object.getCoins != null)
                message.getCoins = Number(object.getCoins);
            return message;
        };

        /**
         * Creates a plain object from a RequestOpenPrivateVaultResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @static
         * @param {CVP.RequestOpenPrivateVaultResult} message RequestOpenPrivateVaultResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestOpenPrivateVaultResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.getCoins = 0;
            if (message.getCoins != null && message.hasOwnProperty("getCoins"))
                object.getCoins = options.json && !isFinite(message.getCoins) ? String(message.getCoins) : message.getCoins;
            return object;
        };

        /**
         * Converts this RequestOpenPrivateVaultResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestOpenPrivateVaultResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestOpenPrivateVaultResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestOpenPrivateVaultResult;
    })();

    CVP.UpdatePrivateVault = (function() {

        /**
         * Properties of an UpdatePrivateVault.
         * @memberof CVP
         * @interface IUpdatePrivateVault
         * @property {boolean|null} [canOpen] UpdatePrivateVault canOpen
         */

        /**
         * Constructs a new UpdatePrivateVault.
         * @memberof CVP
         * @classdesc Represents an UpdatePrivateVault.
         * @implements IUpdatePrivateVault
         * @constructor
         * @param {CVP.IUpdatePrivateVault=} [properties] Properties to set
         */
        function UpdatePrivateVault(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdatePrivateVault canOpen.
         * @member {boolean} canOpen
         * @memberof CVP.UpdatePrivateVault
         * @instance
         */
        UpdatePrivateVault.prototype.canOpen = false;

        /**
         * Creates a new UpdatePrivateVault instance using the specified properties.
         * @function create
         * @memberof CVP.UpdatePrivateVault
         * @static
         * @param {CVP.IUpdatePrivateVault=} [properties] Properties to set
         * @returns {CVP.UpdatePrivateVault} UpdatePrivateVault instance
         */
        UpdatePrivateVault.create = function create(properties) {
            return new UpdatePrivateVault(properties);
        };

        /**
         * Encodes the specified UpdatePrivateVault message. Does not implicitly {@link CVP.UpdatePrivateVault.verify|verify} messages.
         * @function encode
         * @memberof CVP.UpdatePrivateVault
         * @static
         * @param {CVP.IUpdatePrivateVault} message UpdatePrivateVault message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdatePrivateVault.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.canOpen != null && message.hasOwnProperty("canOpen"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.canOpen);
            return writer;
        };

        /**
         * Encodes the specified UpdatePrivateVault message, length delimited. Does not implicitly {@link CVP.UpdatePrivateVault.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UpdatePrivateVault
         * @static
         * @param {CVP.IUpdatePrivateVault} message UpdatePrivateVault message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdatePrivateVault.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdatePrivateVault message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UpdatePrivateVault
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UpdatePrivateVault} UpdatePrivateVault
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdatePrivateVault.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UpdatePrivateVault();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.canOpen = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdatePrivateVault message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UpdatePrivateVault
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UpdatePrivateVault} UpdatePrivateVault
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdatePrivateVault.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdatePrivateVault message.
         * @function verify
         * @memberof CVP.UpdatePrivateVault
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdatePrivateVault.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.canOpen != null && message.hasOwnProperty("canOpen"))
                if (typeof message.canOpen !== "boolean")
                    return "canOpen: boolean expected";
            return null;
        };

        /**
         * Creates an UpdatePrivateVault message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UpdatePrivateVault
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UpdatePrivateVault} UpdatePrivateVault
         */
        UpdatePrivateVault.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UpdatePrivateVault)
                return object;
            var message = new $root.CVP.UpdatePrivateVault();
            if (object.canOpen != null)
                message.canOpen = Boolean(object.canOpen);
            return message;
        };

        /**
         * Creates a plain object from an UpdatePrivateVault message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UpdatePrivateVault
         * @static
         * @param {CVP.UpdatePrivateVault} message UpdatePrivateVault
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdatePrivateVault.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.canOpen = false;
            if (message.canOpen != null && message.hasOwnProperty("canOpen"))
                object.canOpen = message.canOpen;
            return object;
        };

        /**
         * Converts this UpdatePrivateVault to JSON.
         * @function toJSON
         * @memberof CVP.UpdatePrivateVault
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdatePrivateVault.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdatePrivateVault;
    })();

    CVP.SendRateUs = (function() {

        /**
         * Properties of a SendRateUs.
         * @memberof CVP
         * @interface ISendRateUs
         * @property {number|null} [userId] SendRateUs userId
         * @property {number|null} [star] SendRateUs star
         */

        /**
         * Constructs a new SendRateUs.
         * @memberof CVP
         * @classdesc Represents a SendRateUs.
         * @implements ISendRateUs
         * @constructor
         * @param {CVP.ISendRateUs=} [properties] Properties to set
         */
        function SendRateUs(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SendRateUs userId.
         * @member {number} userId
         * @memberof CVP.SendRateUs
         * @instance
         */
        SendRateUs.prototype.userId = 0;

        /**
         * SendRateUs star.
         * @member {number} star
         * @memberof CVP.SendRateUs
         * @instance
         */
        SendRateUs.prototype.star = 0;

        /**
         * Creates a new SendRateUs instance using the specified properties.
         * @function create
         * @memberof CVP.SendRateUs
         * @static
         * @param {CVP.ISendRateUs=} [properties] Properties to set
         * @returns {CVP.SendRateUs} SendRateUs instance
         */
        SendRateUs.create = function create(properties) {
            return new SendRateUs(properties);
        };

        /**
         * Encodes the specified SendRateUs message. Does not implicitly {@link CVP.SendRateUs.verify|verify} messages.
         * @function encode
         * @memberof CVP.SendRateUs
         * @static
         * @param {CVP.ISendRateUs} message SendRateUs message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendRateUs.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.userId);
            if (message.star != null && message.hasOwnProperty("star"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.star);
            return writer;
        };

        /**
         * Encodes the specified SendRateUs message, length delimited. Does not implicitly {@link CVP.SendRateUs.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SendRateUs
         * @static
         * @param {CVP.ISendRateUs} message SendRateUs message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SendRateUs.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SendRateUs message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SendRateUs
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SendRateUs} SendRateUs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendRateUs.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SendRateUs();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.int32();
                    break;
                case 2:
                    message.star = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SendRateUs message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SendRateUs
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SendRateUs} SendRateUs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SendRateUs.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SendRateUs message.
         * @function verify
         * @memberof CVP.SendRateUs
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SendRateUs.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.star != null && message.hasOwnProperty("star"))
                if (!$util.isInteger(message.star))
                    return "star: integer expected";
            return null;
        };

        /**
         * Creates a SendRateUs message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SendRateUs
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SendRateUs} SendRateUs
         */
        SendRateUs.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SendRateUs)
                return object;
            var message = new $root.CVP.SendRateUs();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.star != null)
                message.star = object.star | 0;
            return message;
        };

        /**
         * Creates a plain object from a SendRateUs message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SendRateUs
         * @static
         * @param {CVP.SendRateUs} message SendRateUs
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SendRateUs.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.star = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.star != null && message.hasOwnProperty("star"))
                object.star = message.star;
            return object;
        };

        /**
         * Converts this SendRateUs to JSON.
         * @function toJSON
         * @memberof CVP.SendRateUs
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SendRateUs.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SendRateUs;
    })();

    CVP.UpdateRateUs = (function() {

        /**
         * Properties of an UpdateRateUs.
         * @memberof CVP
         * @interface IUpdateRateUs
         */

        /**
         * Constructs a new UpdateRateUs.
         * @memberof CVP
         * @classdesc Represents an UpdateRateUs.
         * @implements IUpdateRateUs
         * @constructor
         * @param {CVP.IUpdateRateUs=} [properties] Properties to set
         */
        function UpdateRateUs(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new UpdateRateUs instance using the specified properties.
         * @function create
         * @memberof CVP.UpdateRateUs
         * @static
         * @param {CVP.IUpdateRateUs=} [properties] Properties to set
         * @returns {CVP.UpdateRateUs} UpdateRateUs instance
         */
        UpdateRateUs.create = function create(properties) {
            return new UpdateRateUs(properties);
        };

        /**
         * Encodes the specified UpdateRateUs message. Does not implicitly {@link CVP.UpdateRateUs.verify|verify} messages.
         * @function encode
         * @memberof CVP.UpdateRateUs
         * @static
         * @param {CVP.IUpdateRateUs} message UpdateRateUs message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateRateUs.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified UpdateRateUs message, length delimited. Does not implicitly {@link CVP.UpdateRateUs.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UpdateRateUs
         * @static
         * @param {CVP.IUpdateRateUs} message UpdateRateUs message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateRateUs.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdateRateUs message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UpdateRateUs
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UpdateRateUs} UpdateRateUs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateRateUs.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UpdateRateUs();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdateRateUs message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UpdateRateUs
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UpdateRateUs} UpdateRateUs
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateRateUs.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdateRateUs message.
         * @function verify
         * @memberof CVP.UpdateRateUs
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdateRateUs.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates an UpdateRateUs message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UpdateRateUs
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UpdateRateUs} UpdateRateUs
         */
        UpdateRateUs.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UpdateRateUs)
                return object;
            return new $root.CVP.UpdateRateUs();
        };

        /**
         * Creates a plain object from an UpdateRateUs message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UpdateRateUs
         * @static
         * @param {CVP.UpdateRateUs} message UpdateRateUs
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdateRateUs.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this UpdateRateUs to JSON.
         * @function toJSON
         * @memberof CVP.UpdateRateUs
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdateRateUs.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateRateUs;
    })();

    CVP.RequestScratchCard = (function() {

        /**
         * Properties of a RequestScratchCard.
         * @memberof CVP
         * @interface IRequestScratchCard
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestScratchCard commonParams
         */

        /**
         * Constructs a new RequestScratchCard.
         * @memberof CVP
         * @classdesc Represents a RequestScratchCard.
         * @implements IRequestScratchCard
         * @constructor
         * @param {CVP.IRequestScratchCard=} [properties] Properties to set
         */
        function RequestScratchCard(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestScratchCard commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestScratchCard
         * @instance
         */
        RequestScratchCard.prototype.commonParams = null;

        /**
         * Creates a new RequestScratchCard instance using the specified properties.
         * @function create
         * @memberof CVP.RequestScratchCard
         * @static
         * @param {CVP.IRequestScratchCard=} [properties] Properties to set
         * @returns {CVP.RequestScratchCard} RequestScratchCard instance
         */
        RequestScratchCard.create = function create(properties) {
            return new RequestScratchCard(properties);
        };

        /**
         * Encodes the specified RequestScratchCard message. Does not implicitly {@link CVP.RequestScratchCard.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestScratchCard
         * @static
         * @param {CVP.IRequestScratchCard} message RequestScratchCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchCard.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestScratchCard message, length delimited. Does not implicitly {@link CVP.RequestScratchCard.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestScratchCard
         * @static
         * @param {CVP.IRequestScratchCard} message RequestScratchCard message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchCard.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestScratchCard message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestScratchCard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestScratchCard} RequestScratchCard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchCard.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestScratchCard();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestScratchCard message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestScratchCard
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestScratchCard} RequestScratchCard
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchCard.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestScratchCard message.
         * @function verify
         * @memberof CVP.RequestScratchCard
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestScratchCard.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestScratchCard message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestScratchCard
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestScratchCard} RequestScratchCard
         */
        RequestScratchCard.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestScratchCard)
                return object;
            var message = new $root.CVP.RequestScratchCard();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestScratchCard.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestScratchCard message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestScratchCard
         * @static
         * @param {CVP.RequestScratchCard} message RequestScratchCard
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestScratchCard.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestScratchCard to JSON.
         * @function toJSON
         * @memberof CVP.RequestScratchCard
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestScratchCard.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestScratchCard;
    })();

    CVP.RequestScratchCardResult = (function() {

        /**
         * Properties of a RequestScratchCardResult.
         * @memberof CVP
         * @interface IRequestScratchCardResult
         * @property {Array.<number>|null} [cardRewards] RequestScratchCardResult cardRewards
         * @property {Array.<CVP.IItemInfo>|null} [cardInfos] RequestScratchCardResult cardInfos
         */

        /**
         * Constructs a new RequestScratchCardResult.
         * @memberof CVP
         * @classdesc Represents a RequestScratchCardResult.
         * @implements IRequestScratchCardResult
         * @constructor
         * @param {CVP.IRequestScratchCardResult=} [properties] Properties to set
         */
        function RequestScratchCardResult(properties) {
            this.cardRewards = [];
            this.cardInfos = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestScratchCardResult cardRewards.
         * @member {Array.<number>} cardRewards
         * @memberof CVP.RequestScratchCardResult
         * @instance
         */
        RequestScratchCardResult.prototype.cardRewards = $util.emptyArray;

        /**
         * RequestScratchCardResult cardInfos.
         * @member {Array.<CVP.IItemInfo>} cardInfos
         * @memberof CVP.RequestScratchCardResult
         * @instance
         */
        RequestScratchCardResult.prototype.cardInfos = $util.emptyArray;

        /**
         * Creates a new RequestScratchCardResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestScratchCardResult
         * @static
         * @param {CVP.IRequestScratchCardResult=} [properties] Properties to set
         * @returns {CVP.RequestScratchCardResult} RequestScratchCardResult instance
         */
        RequestScratchCardResult.create = function create(properties) {
            return new RequestScratchCardResult(properties);
        };

        /**
         * Encodes the specified RequestScratchCardResult message. Does not implicitly {@link CVP.RequestScratchCardResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestScratchCardResult
         * @static
         * @param {CVP.IRequestScratchCardResult} message RequestScratchCardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchCardResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cardRewards != null && message.cardRewards.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (var i = 0; i < message.cardRewards.length; ++i)
                    writer.double(message.cardRewards[i]);
                writer.ldelim();
            }
            if (message.cardInfos != null && message.cardInfos.length)
                for (var i = 0; i < message.cardInfos.length; ++i)
                    $root.CVP.ItemInfo.encode(message.cardInfos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestScratchCardResult message, length delimited. Does not implicitly {@link CVP.RequestScratchCardResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestScratchCardResult
         * @static
         * @param {CVP.IRequestScratchCardResult} message RequestScratchCardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchCardResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestScratchCardResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestScratchCardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestScratchCardResult} RequestScratchCardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchCardResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestScratchCardResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.cardRewards && message.cardRewards.length))
                        message.cardRewards = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.cardRewards.push(reader.double());
                    } else
                        message.cardRewards.push(reader.double());
                    break;
                case 2:
                    if (!(message.cardInfos && message.cardInfos.length))
                        message.cardInfos = [];
                    message.cardInfos.push($root.CVP.ItemInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestScratchCardResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestScratchCardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestScratchCardResult} RequestScratchCardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchCardResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestScratchCardResult message.
         * @function verify
         * @memberof CVP.RequestScratchCardResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestScratchCardResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cardRewards != null && message.hasOwnProperty("cardRewards")) {
                if (!Array.isArray(message.cardRewards))
                    return "cardRewards: array expected";
                for (var i = 0; i < message.cardRewards.length; ++i)
                    if (typeof message.cardRewards[i] !== "number")
                        return "cardRewards: number[] expected";
            }
            if (message.cardInfos != null && message.hasOwnProperty("cardInfos")) {
                if (!Array.isArray(message.cardInfos))
                    return "cardInfos: array expected";
                for (var i = 0; i < message.cardInfos.length; ++i) {
                    var error = $root.CVP.ItemInfo.verify(message.cardInfos[i]);
                    if (error)
                        return "cardInfos." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestScratchCardResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestScratchCardResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestScratchCardResult} RequestScratchCardResult
         */
        RequestScratchCardResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestScratchCardResult)
                return object;
            var message = new $root.CVP.RequestScratchCardResult();
            if (object.cardRewards) {
                if (!Array.isArray(object.cardRewards))
                    throw TypeError(".CVP.RequestScratchCardResult.cardRewards: array expected");
                message.cardRewards = [];
                for (var i = 0; i < object.cardRewards.length; ++i)
                    message.cardRewards[i] = Number(object.cardRewards[i]);
            }
            if (object.cardInfos) {
                if (!Array.isArray(object.cardInfos))
                    throw TypeError(".CVP.RequestScratchCardResult.cardInfos: array expected");
                message.cardInfos = [];
                for (var i = 0; i < object.cardInfos.length; ++i) {
                    if (typeof object.cardInfos[i] !== "object")
                        throw TypeError(".CVP.RequestScratchCardResult.cardInfos: object expected");
                    message.cardInfos[i] = $root.CVP.ItemInfo.fromObject(object.cardInfos[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestScratchCardResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestScratchCardResult
         * @static
         * @param {CVP.RequestScratchCardResult} message RequestScratchCardResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestScratchCardResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.cardRewards = [];
                object.cardInfos = [];
            }
            if (message.cardRewards && message.cardRewards.length) {
                object.cardRewards = [];
                for (var j = 0; j < message.cardRewards.length; ++j)
                    object.cardRewards[j] = options.json && !isFinite(message.cardRewards[j]) ? String(message.cardRewards[j]) : message.cardRewards[j];
            }
            if (message.cardInfos && message.cardInfos.length) {
                object.cardInfos = [];
                for (var j = 0; j < message.cardInfos.length; ++j)
                    object.cardInfos[j] = $root.CVP.ItemInfo.toObject(message.cardInfos[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestScratchCardResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestScratchCardResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestScratchCardResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestScratchCardResult;
    })();

    CVP.RequestScratchCardItems = (function() {

        /**
         * Properties of a RequestScratchCardItems.
         * @memberof CVP
         * @interface IRequestScratchCardItems
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestScratchCardItems commonParams
         */

        /**
         * Constructs a new RequestScratchCardItems.
         * @memberof CVP
         * @classdesc Represents a RequestScratchCardItems.
         * @implements IRequestScratchCardItems
         * @constructor
         * @param {CVP.IRequestScratchCardItems=} [properties] Properties to set
         */
        function RequestScratchCardItems(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestScratchCardItems commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestScratchCardItems
         * @instance
         */
        RequestScratchCardItems.prototype.commonParams = null;

        /**
         * Creates a new RequestScratchCardItems instance using the specified properties.
         * @function create
         * @memberof CVP.RequestScratchCardItems
         * @static
         * @param {CVP.IRequestScratchCardItems=} [properties] Properties to set
         * @returns {CVP.RequestScratchCardItems} RequestScratchCardItems instance
         */
        RequestScratchCardItems.create = function create(properties) {
            return new RequestScratchCardItems(properties);
        };

        /**
         * Encodes the specified RequestScratchCardItems message. Does not implicitly {@link CVP.RequestScratchCardItems.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestScratchCardItems
         * @static
         * @param {CVP.IRequestScratchCardItems} message RequestScratchCardItems message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchCardItems.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestScratchCardItems message, length delimited. Does not implicitly {@link CVP.RequestScratchCardItems.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestScratchCardItems
         * @static
         * @param {CVP.IRequestScratchCardItems} message RequestScratchCardItems message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchCardItems.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestScratchCardItems message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestScratchCardItems
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestScratchCardItems} RequestScratchCardItems
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchCardItems.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestScratchCardItems();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestScratchCardItems message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestScratchCardItems
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestScratchCardItems} RequestScratchCardItems
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchCardItems.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestScratchCardItems message.
         * @function verify
         * @memberof CVP.RequestScratchCardItems
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestScratchCardItems.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestScratchCardItems message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestScratchCardItems
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestScratchCardItems} RequestScratchCardItems
         */
        RequestScratchCardItems.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestScratchCardItems)
                return object;
            var message = new $root.CVP.RequestScratchCardItems();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestScratchCardItems.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestScratchCardItems message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestScratchCardItems
         * @static
         * @param {CVP.RequestScratchCardItems} message RequestScratchCardItems
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestScratchCardItems.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestScratchCardItems to JSON.
         * @function toJSON
         * @memberof CVP.RequestScratchCardItems
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestScratchCardItems.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestScratchCardItems;
    })();

    CVP.RequestScratchCardItemsResult = (function() {

        /**
         * Properties of a RequestScratchCardItemsResult.
         * @memberof CVP
         * @interface IRequestScratchCardItemsResult
         * @property {Array.<CVP.IItemInfo>|null} [cardInfos] RequestScratchCardItemsResult cardInfos
         */

        /**
         * Constructs a new RequestScratchCardItemsResult.
         * @memberof CVP
         * @classdesc Represents a RequestScratchCardItemsResult.
         * @implements IRequestScratchCardItemsResult
         * @constructor
         * @param {CVP.IRequestScratchCardItemsResult=} [properties] Properties to set
         */
        function RequestScratchCardItemsResult(properties) {
            this.cardInfos = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestScratchCardItemsResult cardInfos.
         * @member {Array.<CVP.IItemInfo>} cardInfos
         * @memberof CVP.RequestScratchCardItemsResult
         * @instance
         */
        RequestScratchCardItemsResult.prototype.cardInfos = $util.emptyArray;

        /**
         * Creates a new RequestScratchCardItemsResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestScratchCardItemsResult
         * @static
         * @param {CVP.IRequestScratchCardItemsResult=} [properties] Properties to set
         * @returns {CVP.RequestScratchCardItemsResult} RequestScratchCardItemsResult instance
         */
        RequestScratchCardItemsResult.create = function create(properties) {
            return new RequestScratchCardItemsResult(properties);
        };

        /**
         * Encodes the specified RequestScratchCardItemsResult message. Does not implicitly {@link CVP.RequestScratchCardItemsResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestScratchCardItemsResult
         * @static
         * @param {CVP.IRequestScratchCardItemsResult} message RequestScratchCardItemsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchCardItemsResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cardInfos != null && message.cardInfos.length)
                for (var i = 0; i < message.cardInfos.length; ++i)
                    $root.CVP.ItemInfo.encode(message.cardInfos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestScratchCardItemsResult message, length delimited. Does not implicitly {@link CVP.RequestScratchCardItemsResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestScratchCardItemsResult
         * @static
         * @param {CVP.IRequestScratchCardItemsResult} message RequestScratchCardItemsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchCardItemsResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestScratchCardItemsResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestScratchCardItemsResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestScratchCardItemsResult} RequestScratchCardItemsResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchCardItemsResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestScratchCardItemsResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.cardInfos && message.cardInfos.length))
                        message.cardInfos = [];
                    message.cardInfos.push($root.CVP.ItemInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestScratchCardItemsResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestScratchCardItemsResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestScratchCardItemsResult} RequestScratchCardItemsResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchCardItemsResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestScratchCardItemsResult message.
         * @function verify
         * @memberof CVP.RequestScratchCardItemsResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestScratchCardItemsResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cardInfos != null && message.hasOwnProperty("cardInfos")) {
                if (!Array.isArray(message.cardInfos))
                    return "cardInfos: array expected";
                for (var i = 0; i < message.cardInfos.length; ++i) {
                    var error = $root.CVP.ItemInfo.verify(message.cardInfos[i]);
                    if (error)
                        return "cardInfos." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestScratchCardItemsResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestScratchCardItemsResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestScratchCardItemsResult} RequestScratchCardItemsResult
         */
        RequestScratchCardItemsResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestScratchCardItemsResult)
                return object;
            var message = new $root.CVP.RequestScratchCardItemsResult();
            if (object.cardInfos) {
                if (!Array.isArray(object.cardInfos))
                    throw TypeError(".CVP.RequestScratchCardItemsResult.cardInfos: array expected");
                message.cardInfos = [];
                for (var i = 0; i < object.cardInfos.length; ++i) {
                    if (typeof object.cardInfos[i] !== "object")
                        throw TypeError(".CVP.RequestScratchCardItemsResult.cardInfos: object expected");
                    message.cardInfos[i] = $root.CVP.ItemInfo.fromObject(object.cardInfos[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestScratchCardItemsResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestScratchCardItemsResult
         * @static
         * @param {CVP.RequestScratchCardItemsResult} message RequestScratchCardItemsResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestScratchCardItemsResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.cardInfos = [];
            if (message.cardInfos && message.cardInfos.length) {
                object.cardInfos = [];
                for (var j = 0; j < message.cardInfos.length; ++j)
                    object.cardInfos[j] = $root.CVP.ItemInfo.toObject(message.cardInfos[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestScratchCardItemsResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestScratchCardItemsResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestScratchCardItemsResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestScratchCardItemsResult;
    })();

    CVP.RequestScratch = (function() {

        /**
         * Properties of a RequestScratch.
         * @memberof CVP
         * @interface IRequestScratch
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestScratch commonParams
         */

        /**
         * Constructs a new RequestScratch.
         * @memberof CVP
         * @classdesc Represents a RequestScratch.
         * @implements IRequestScratch
         * @constructor
         * @param {CVP.IRequestScratch=} [properties] Properties to set
         */
        function RequestScratch(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestScratch commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestScratch
         * @instance
         */
        RequestScratch.prototype.commonParams = null;

        /**
         * Creates a new RequestScratch instance using the specified properties.
         * @function create
         * @memberof CVP.RequestScratch
         * @static
         * @param {CVP.IRequestScratch=} [properties] Properties to set
         * @returns {CVP.RequestScratch} RequestScratch instance
         */
        RequestScratch.create = function create(properties) {
            return new RequestScratch(properties);
        };

        /**
         * Encodes the specified RequestScratch message. Does not implicitly {@link CVP.RequestScratch.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestScratch
         * @static
         * @param {CVP.IRequestScratch} message RequestScratch message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratch.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestScratch message, length delimited. Does not implicitly {@link CVP.RequestScratch.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestScratch
         * @static
         * @param {CVP.IRequestScratch} message RequestScratch message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratch.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestScratch message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestScratch
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestScratch} RequestScratch
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratch.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestScratch();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestScratch message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestScratch
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestScratch} RequestScratch
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratch.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestScratch message.
         * @function verify
         * @memberof CVP.RequestScratch
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestScratch.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestScratch message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestScratch
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestScratch} RequestScratch
         */
        RequestScratch.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestScratch)
                return object;
            var message = new $root.CVP.RequestScratch();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestScratch.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestScratch message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestScratch
         * @static
         * @param {CVP.RequestScratch} message RequestScratch
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestScratch.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestScratch to JSON.
         * @function toJSON
         * @memberof CVP.RequestScratch
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestScratch.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestScratch;
    })();

    CVP.RequestScratchResult = (function() {

        /**
         * Properties of a RequestScratchResult.
         * @memberof CVP
         * @interface IRequestScratchResult
         * @property {number|null} [cardNumber] RequestScratchResult cardNumber
         */

        /**
         * Constructs a new RequestScratchResult.
         * @memberof CVP
         * @classdesc Represents a RequestScratchResult.
         * @implements IRequestScratchResult
         * @constructor
         * @param {CVP.IRequestScratchResult=} [properties] Properties to set
         */
        function RequestScratchResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestScratchResult cardNumber.
         * @member {number} cardNumber
         * @memberof CVP.RequestScratchResult
         * @instance
         */
        RequestScratchResult.prototype.cardNumber = 0;

        /**
         * Creates a new RequestScratchResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestScratchResult
         * @static
         * @param {CVP.IRequestScratchResult=} [properties] Properties to set
         * @returns {CVP.RequestScratchResult} RequestScratchResult instance
         */
        RequestScratchResult.create = function create(properties) {
            return new RequestScratchResult(properties);
        };

        /**
         * Encodes the specified RequestScratchResult message. Does not implicitly {@link CVP.RequestScratchResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestScratchResult
         * @static
         * @param {CVP.IRequestScratchResult} message RequestScratchResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cardNumber != null && message.hasOwnProperty("cardNumber"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.cardNumber);
            return writer;
        };

        /**
         * Encodes the specified RequestScratchResult message, length delimited. Does not implicitly {@link CVP.RequestScratchResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestScratchResult
         * @static
         * @param {CVP.IRequestScratchResult} message RequestScratchResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestScratchResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestScratchResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestScratchResult} RequestScratchResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestScratchResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cardNumber = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestScratchResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestScratchResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestScratchResult} RequestScratchResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestScratchResult message.
         * @function verify
         * @memberof CVP.RequestScratchResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestScratchResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cardNumber != null && message.hasOwnProperty("cardNumber"))
                if (!$util.isInteger(message.cardNumber))
                    return "cardNumber: integer expected";
            return null;
        };

        /**
         * Creates a RequestScratchResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestScratchResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestScratchResult} RequestScratchResult
         */
        RequestScratchResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestScratchResult)
                return object;
            var message = new $root.CVP.RequestScratchResult();
            if (object.cardNumber != null)
                message.cardNumber = object.cardNumber | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestScratchResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestScratchResult
         * @static
         * @param {CVP.RequestScratchResult} message RequestScratchResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestScratchResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cardNumber = 0;
            if (message.cardNumber != null && message.hasOwnProperty("cardNumber"))
                object.cardNumber = message.cardNumber;
            return object;
        };

        /**
         * Converts this RequestScratchResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestScratchResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestScratchResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestScratchResult;
    })();

    CVP.RequestScratchReward = (function() {

        /**
         * Properties of a RequestScratchReward.
         * @memberof CVP
         * @interface IRequestScratchReward
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestScratchReward commonParams
         * @property {number|null} [cardCounts] RequestScratchReward cardCounts
         */

        /**
         * Constructs a new RequestScratchReward.
         * @memberof CVP
         * @classdesc Represents a RequestScratchReward.
         * @implements IRequestScratchReward
         * @constructor
         * @param {CVP.IRequestScratchReward=} [properties] Properties to set
         */
        function RequestScratchReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestScratchReward commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestScratchReward
         * @instance
         */
        RequestScratchReward.prototype.commonParams = null;

        /**
         * RequestScratchReward cardCounts.
         * @member {number} cardCounts
         * @memberof CVP.RequestScratchReward
         * @instance
         */
        RequestScratchReward.prototype.cardCounts = 0;

        /**
         * Creates a new RequestScratchReward instance using the specified properties.
         * @function create
         * @memberof CVP.RequestScratchReward
         * @static
         * @param {CVP.IRequestScratchReward=} [properties] Properties to set
         * @returns {CVP.RequestScratchReward} RequestScratchReward instance
         */
        RequestScratchReward.create = function create(properties) {
            return new RequestScratchReward(properties);
        };

        /**
         * Encodes the specified RequestScratchReward message. Does not implicitly {@link CVP.RequestScratchReward.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestScratchReward
         * @static
         * @param {CVP.IRequestScratchReward} message RequestScratchReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.cardCounts != null && message.hasOwnProperty("cardCounts"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cardCounts);
            return writer;
        };

        /**
         * Encodes the specified RequestScratchReward message, length delimited. Does not implicitly {@link CVP.RequestScratchReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestScratchReward
         * @static
         * @param {CVP.IRequestScratchReward} message RequestScratchReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestScratchReward message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestScratchReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestScratchReward} RequestScratchReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestScratchReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.cardCounts = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestScratchReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestScratchReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestScratchReward} RequestScratchReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestScratchReward message.
         * @function verify
         * @memberof CVP.RequestScratchReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestScratchReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.cardCounts != null && message.hasOwnProperty("cardCounts"))
                if (!$util.isInteger(message.cardCounts))
                    return "cardCounts: integer expected";
            return null;
        };

        /**
         * Creates a RequestScratchReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestScratchReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestScratchReward} RequestScratchReward
         */
        RequestScratchReward.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestScratchReward)
                return object;
            var message = new $root.CVP.RequestScratchReward();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestScratchReward.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.cardCounts != null)
                message.cardCounts = object.cardCounts | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestScratchReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestScratchReward
         * @static
         * @param {CVP.RequestScratchReward} message RequestScratchReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestScratchReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.cardCounts = 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.cardCounts != null && message.hasOwnProperty("cardCounts"))
                object.cardCounts = message.cardCounts;
            return object;
        };

        /**
         * Converts this RequestScratchReward to JSON.
         * @function toJSON
         * @memberof CVP.RequestScratchReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestScratchReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestScratchReward;
    })();

    CVP.RequestScratchRewardResult = (function() {

        /**
         * Properties of a RequestScratchRewardResult.
         * @memberof CVP
         * @interface IRequestScratchRewardResult
         * @property {number|null} [reward] RequestScratchRewardResult reward
         */

        /**
         * Constructs a new RequestScratchRewardResult.
         * @memberof CVP
         * @classdesc Represents a RequestScratchRewardResult.
         * @implements IRequestScratchRewardResult
         * @constructor
         * @param {CVP.IRequestScratchRewardResult=} [properties] Properties to set
         */
        function RequestScratchRewardResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestScratchRewardResult reward.
         * @member {number} reward
         * @memberof CVP.RequestScratchRewardResult
         * @instance
         */
        RequestScratchRewardResult.prototype.reward = 0;

        /**
         * Creates a new RequestScratchRewardResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestScratchRewardResult
         * @static
         * @param {CVP.IRequestScratchRewardResult=} [properties] Properties to set
         * @returns {CVP.RequestScratchRewardResult} RequestScratchRewardResult instance
         */
        RequestScratchRewardResult.create = function create(properties) {
            return new RequestScratchRewardResult(properties);
        };

        /**
         * Encodes the specified RequestScratchRewardResult message. Does not implicitly {@link CVP.RequestScratchRewardResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestScratchRewardResult
         * @static
         * @param {CVP.IRequestScratchRewardResult} message RequestScratchRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchRewardResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.reward != null && message.hasOwnProperty("reward"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.reward);
            return writer;
        };

        /**
         * Encodes the specified RequestScratchRewardResult message, length delimited. Does not implicitly {@link CVP.RequestScratchRewardResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestScratchRewardResult
         * @static
         * @param {CVP.IRequestScratchRewardResult} message RequestScratchRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestScratchRewardResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestScratchRewardResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestScratchRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestScratchRewardResult} RequestScratchRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchRewardResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestScratchRewardResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reward = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestScratchRewardResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestScratchRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestScratchRewardResult} RequestScratchRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestScratchRewardResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestScratchRewardResult message.
         * @function verify
         * @memberof CVP.RequestScratchRewardResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestScratchRewardResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.reward != null && message.hasOwnProperty("reward"))
                if (typeof message.reward !== "number")
                    return "reward: number expected";
            return null;
        };

        /**
         * Creates a RequestScratchRewardResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestScratchRewardResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestScratchRewardResult} RequestScratchRewardResult
         */
        RequestScratchRewardResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestScratchRewardResult)
                return object;
            var message = new $root.CVP.RequestScratchRewardResult();
            if (object.reward != null)
                message.reward = Number(object.reward);
            return message;
        };

        /**
         * Creates a plain object from a RequestScratchRewardResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestScratchRewardResult
         * @static
         * @param {CVP.RequestScratchRewardResult} message RequestScratchRewardResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestScratchRewardResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.reward = 0;
            if (message.reward != null && message.hasOwnProperty("reward"))
                object.reward = options.json && !isFinite(message.reward) ? String(message.reward) : message.reward;
            return object;
        };

        /**
         * Converts this RequestScratchRewardResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestScratchRewardResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestScratchRewardResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestScratchRewardResult;
    })();

    CVP.RequestShopData = (function() {

        /**
         * Properties of a RequestShopData.
         * @memberof CVP
         * @interface IRequestShopData
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestShopData commonParams
         */

        /**
         * Constructs a new RequestShopData.
         * @memberof CVP
         * @classdesc Represents a RequestShopData.
         * @implements IRequestShopData
         * @constructor
         * @param {CVP.IRequestShopData=} [properties] Properties to set
         */
        function RequestShopData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestShopData commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestShopData
         * @instance
         */
        RequestShopData.prototype.commonParams = null;

        /**
         * Creates a new RequestShopData instance using the specified properties.
         * @function create
         * @memberof CVP.RequestShopData
         * @static
         * @param {CVP.IRequestShopData=} [properties] Properties to set
         * @returns {CVP.RequestShopData} RequestShopData instance
         */
        RequestShopData.create = function create(properties) {
            return new RequestShopData(properties);
        };

        /**
         * Encodes the specified RequestShopData message. Does not implicitly {@link CVP.RequestShopData.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestShopData
         * @static
         * @param {CVP.IRequestShopData} message RequestShopData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestShopData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestShopData message, length delimited. Does not implicitly {@link CVP.RequestShopData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestShopData
         * @static
         * @param {CVP.IRequestShopData} message RequestShopData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestShopData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestShopData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestShopData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestShopData} RequestShopData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestShopData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestShopData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestShopData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestShopData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestShopData} RequestShopData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestShopData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestShopData message.
         * @function verify
         * @memberof CVP.RequestShopData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestShopData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestShopData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestShopData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestShopData} RequestShopData
         */
        RequestShopData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestShopData)
                return object;
            var message = new $root.CVP.RequestShopData();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestShopData.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestShopData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestShopData
         * @static
         * @param {CVP.RequestShopData} message RequestShopData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestShopData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestShopData to JSON.
         * @function toJSON
         * @memberof CVP.RequestShopData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestShopData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestShopData;
    })();

    CVP.RequestShopDataResult = (function() {

        /**
         * Properties of a RequestShopDataResult.
         * @memberof CVP
         * @interface IRequestShopDataResult
         * @property {CVP.ICoinsShopData|null} [coinsShopData] RequestShopDataResult coinsShopData
         * @property {CVP.IBuffShopData|null} [buffShopData] RequestShopDataResult buffShopData
         */

        /**
         * Constructs a new RequestShopDataResult.
         * @memberof CVP
         * @classdesc Represents a RequestShopDataResult.
         * @implements IRequestShopDataResult
         * @constructor
         * @param {CVP.IRequestShopDataResult=} [properties] Properties to set
         */
        function RequestShopDataResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestShopDataResult coinsShopData.
         * @member {CVP.ICoinsShopData|null|undefined} coinsShopData
         * @memberof CVP.RequestShopDataResult
         * @instance
         */
        RequestShopDataResult.prototype.coinsShopData = null;

        /**
         * RequestShopDataResult buffShopData.
         * @member {CVP.IBuffShopData|null|undefined} buffShopData
         * @memberof CVP.RequestShopDataResult
         * @instance
         */
        RequestShopDataResult.prototype.buffShopData = null;

        /**
         * Creates a new RequestShopDataResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestShopDataResult
         * @static
         * @param {CVP.IRequestShopDataResult=} [properties] Properties to set
         * @returns {CVP.RequestShopDataResult} RequestShopDataResult instance
         */
        RequestShopDataResult.create = function create(properties) {
            return new RequestShopDataResult(properties);
        };

        /**
         * Encodes the specified RequestShopDataResult message. Does not implicitly {@link CVP.RequestShopDataResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestShopDataResult
         * @static
         * @param {CVP.IRequestShopDataResult} message RequestShopDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestShopDataResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coinsShopData != null && message.hasOwnProperty("coinsShopData"))
                $root.CVP.CoinsShopData.encode(message.coinsShopData, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.buffShopData != null && message.hasOwnProperty("buffShopData"))
                $root.CVP.BuffShopData.encode(message.buffShopData, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestShopDataResult message, length delimited. Does not implicitly {@link CVP.RequestShopDataResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestShopDataResult
         * @static
         * @param {CVP.IRequestShopDataResult} message RequestShopDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestShopDataResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestShopDataResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestShopDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestShopDataResult} RequestShopDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestShopDataResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestShopDataResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coinsShopData = $root.CVP.CoinsShopData.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.buffShopData = $root.CVP.BuffShopData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestShopDataResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestShopDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestShopDataResult} RequestShopDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestShopDataResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestShopDataResult message.
         * @function verify
         * @memberof CVP.RequestShopDataResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestShopDataResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coinsShopData != null && message.hasOwnProperty("coinsShopData")) {
                var error = $root.CVP.CoinsShopData.verify(message.coinsShopData);
                if (error)
                    return "coinsShopData." + error;
            }
            if (message.buffShopData != null && message.hasOwnProperty("buffShopData")) {
                var error = $root.CVP.BuffShopData.verify(message.buffShopData);
                if (error)
                    return "buffShopData." + error;
            }
            return null;
        };

        /**
         * Creates a RequestShopDataResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestShopDataResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestShopDataResult} RequestShopDataResult
         */
        RequestShopDataResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestShopDataResult)
                return object;
            var message = new $root.CVP.RequestShopDataResult();
            if (object.coinsShopData != null) {
                if (typeof object.coinsShopData !== "object")
                    throw TypeError(".CVP.RequestShopDataResult.coinsShopData: object expected");
                message.coinsShopData = $root.CVP.CoinsShopData.fromObject(object.coinsShopData);
            }
            if (object.buffShopData != null) {
                if (typeof object.buffShopData !== "object")
                    throw TypeError(".CVP.RequestShopDataResult.buffShopData: object expected");
                message.buffShopData = $root.CVP.BuffShopData.fromObject(object.buffShopData);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestShopDataResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestShopDataResult
         * @static
         * @param {CVP.RequestShopDataResult} message RequestShopDataResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestShopDataResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.coinsShopData = null;
                object.buffShopData = null;
            }
            if (message.coinsShopData != null && message.hasOwnProperty("coinsShopData"))
                object.coinsShopData = $root.CVP.CoinsShopData.toObject(message.coinsShopData, options);
            if (message.buffShopData != null && message.hasOwnProperty("buffShopData"))
                object.buffShopData = $root.CVP.BuffShopData.toObject(message.buffShopData, options);
            return object;
        };

        /**
         * Converts this RequestShopDataResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestShopDataResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestShopDataResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestShopDataResult;
    })();

    CVP.RequestGameShopData = (function() {

        /**
         * Properties of a RequestGameShopData.
         * @memberof CVP
         * @interface IRequestGameShopData
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestGameShopData commonParams
         */

        /**
         * Constructs a new RequestGameShopData.
         * @memberof CVP
         * @classdesc Represents a RequestGameShopData.
         * @implements IRequestGameShopData
         * @constructor
         * @param {CVP.IRequestGameShopData=} [properties] Properties to set
         */
        function RequestGameShopData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGameShopData commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestGameShopData
         * @instance
         */
        RequestGameShopData.prototype.commonParams = null;

        /**
         * Creates a new RequestGameShopData instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGameShopData
         * @static
         * @param {CVP.IRequestGameShopData=} [properties] Properties to set
         * @returns {CVP.RequestGameShopData} RequestGameShopData instance
         */
        RequestGameShopData.create = function create(properties) {
            return new RequestGameShopData(properties);
        };

        /**
         * Encodes the specified RequestGameShopData message. Does not implicitly {@link CVP.RequestGameShopData.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGameShopData
         * @static
         * @param {CVP.IRequestGameShopData} message RequestGameShopData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGameShopData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestGameShopData message, length delimited. Does not implicitly {@link CVP.RequestGameShopData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGameShopData
         * @static
         * @param {CVP.IRequestGameShopData} message RequestGameShopData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGameShopData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGameShopData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGameShopData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGameShopData} RequestGameShopData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGameShopData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGameShopData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGameShopData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGameShopData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGameShopData} RequestGameShopData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGameShopData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGameShopData message.
         * @function verify
         * @memberof CVP.RequestGameShopData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGameShopData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestGameShopData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGameShopData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGameShopData} RequestGameShopData
         */
        RequestGameShopData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGameShopData)
                return object;
            var message = new $root.CVP.RequestGameShopData();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestGameShopData.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestGameShopData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGameShopData
         * @static
         * @param {CVP.RequestGameShopData} message RequestGameShopData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGameShopData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestGameShopData to JSON.
         * @function toJSON
         * @memberof CVP.RequestGameShopData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGameShopData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGameShopData;
    })();

    CVP.RequestGameShopDataResult = (function() {

        /**
         * Properties of a RequestGameShopDataResult.
         * @memberof CVP
         * @interface IRequestGameShopDataResult
         * @property {CVP.ICoinsShopData|null} [coinsShopData] RequestGameShopDataResult coinsShopData
         * @property {CVP.IBuffShopData|null} [buffShopData] RequestGameShopDataResult buffShopData
         */

        /**
         * Constructs a new RequestGameShopDataResult.
         * @memberof CVP
         * @classdesc Represents a RequestGameShopDataResult.
         * @implements IRequestGameShopDataResult
         * @constructor
         * @param {CVP.IRequestGameShopDataResult=} [properties] Properties to set
         */
        function RequestGameShopDataResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestGameShopDataResult coinsShopData.
         * @member {CVP.ICoinsShopData|null|undefined} coinsShopData
         * @memberof CVP.RequestGameShopDataResult
         * @instance
         */
        RequestGameShopDataResult.prototype.coinsShopData = null;

        /**
         * RequestGameShopDataResult buffShopData.
         * @member {CVP.IBuffShopData|null|undefined} buffShopData
         * @memberof CVP.RequestGameShopDataResult
         * @instance
         */
        RequestGameShopDataResult.prototype.buffShopData = null;

        /**
         * Creates a new RequestGameShopDataResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestGameShopDataResult
         * @static
         * @param {CVP.IRequestGameShopDataResult=} [properties] Properties to set
         * @returns {CVP.RequestGameShopDataResult} RequestGameShopDataResult instance
         */
        RequestGameShopDataResult.create = function create(properties) {
            return new RequestGameShopDataResult(properties);
        };

        /**
         * Encodes the specified RequestGameShopDataResult message. Does not implicitly {@link CVP.RequestGameShopDataResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestGameShopDataResult
         * @static
         * @param {CVP.IRequestGameShopDataResult} message RequestGameShopDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGameShopDataResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coinsShopData != null && message.hasOwnProperty("coinsShopData"))
                $root.CVP.CoinsShopData.encode(message.coinsShopData, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.buffShopData != null && message.hasOwnProperty("buffShopData"))
                $root.CVP.BuffShopData.encode(message.buffShopData, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestGameShopDataResult message, length delimited. Does not implicitly {@link CVP.RequestGameShopDataResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestGameShopDataResult
         * @static
         * @param {CVP.IRequestGameShopDataResult} message RequestGameShopDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestGameShopDataResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestGameShopDataResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestGameShopDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestGameShopDataResult} RequestGameShopDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGameShopDataResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestGameShopDataResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coinsShopData = $root.CVP.CoinsShopData.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.buffShopData = $root.CVP.BuffShopData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestGameShopDataResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestGameShopDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestGameShopDataResult} RequestGameShopDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestGameShopDataResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestGameShopDataResult message.
         * @function verify
         * @memberof CVP.RequestGameShopDataResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestGameShopDataResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coinsShopData != null && message.hasOwnProperty("coinsShopData")) {
                var error = $root.CVP.CoinsShopData.verify(message.coinsShopData);
                if (error)
                    return "coinsShopData." + error;
            }
            if (message.buffShopData != null && message.hasOwnProperty("buffShopData")) {
                var error = $root.CVP.BuffShopData.verify(message.buffShopData);
                if (error)
                    return "buffShopData." + error;
            }
            return null;
        };

        /**
         * Creates a RequestGameShopDataResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestGameShopDataResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestGameShopDataResult} RequestGameShopDataResult
         */
        RequestGameShopDataResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestGameShopDataResult)
                return object;
            var message = new $root.CVP.RequestGameShopDataResult();
            if (object.coinsShopData != null) {
                if (typeof object.coinsShopData !== "object")
                    throw TypeError(".CVP.RequestGameShopDataResult.coinsShopData: object expected");
                message.coinsShopData = $root.CVP.CoinsShopData.fromObject(object.coinsShopData);
            }
            if (object.buffShopData != null) {
                if (typeof object.buffShopData !== "object")
                    throw TypeError(".CVP.RequestGameShopDataResult.buffShopData: object expected");
                message.buffShopData = $root.CVP.BuffShopData.fromObject(object.buffShopData);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestGameShopDataResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestGameShopDataResult
         * @static
         * @param {CVP.RequestGameShopDataResult} message RequestGameShopDataResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestGameShopDataResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.coinsShopData = null;
                object.buffShopData = null;
            }
            if (message.coinsShopData != null && message.hasOwnProperty("coinsShopData"))
                object.coinsShopData = $root.CVP.CoinsShopData.toObject(message.coinsShopData, options);
            if (message.buffShopData != null && message.hasOwnProperty("buffShopData"))
                object.buffShopData = $root.CVP.BuffShopData.toObject(message.buffShopData, options);
            return object;
        };

        /**
         * Converts this RequestGameShopDataResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestGameShopDataResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestGameShopDataResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestGameShopDataResult;
    })();

    CVP.CoinsShopData = (function() {

        /**
         * Properties of a CoinsShopData.
         * @memberof CVP
         * @interface ICoinsShopData
         * @property {Array.<CVP.IShopItem>|null} [shopItemList] CoinsShopData shopItemList
         */

        /**
         * Constructs a new CoinsShopData.
         * @memberof CVP
         * @classdesc Represents a CoinsShopData.
         * @implements ICoinsShopData
         * @constructor
         * @param {CVP.ICoinsShopData=} [properties] Properties to set
         */
        function CoinsShopData(properties) {
            this.shopItemList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoinsShopData shopItemList.
         * @member {Array.<CVP.IShopItem>} shopItemList
         * @memberof CVP.CoinsShopData
         * @instance
         */
        CoinsShopData.prototype.shopItemList = $util.emptyArray;

        /**
         * Creates a new CoinsShopData instance using the specified properties.
         * @function create
         * @memberof CVP.CoinsShopData
         * @static
         * @param {CVP.ICoinsShopData=} [properties] Properties to set
         * @returns {CVP.CoinsShopData} CoinsShopData instance
         */
        CoinsShopData.create = function create(properties) {
            return new CoinsShopData(properties);
        };

        /**
         * Encodes the specified CoinsShopData message. Does not implicitly {@link CVP.CoinsShopData.verify|verify} messages.
         * @function encode
         * @memberof CVP.CoinsShopData
         * @static
         * @param {CVP.ICoinsShopData} message CoinsShopData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoinsShopData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.shopItemList != null && message.shopItemList.length)
                for (var i = 0; i < message.shopItemList.length; ++i)
                    $root.CVP.ShopItem.encode(message.shopItemList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoinsShopData message, length delimited. Does not implicitly {@link CVP.CoinsShopData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.CoinsShopData
         * @static
         * @param {CVP.ICoinsShopData} message CoinsShopData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoinsShopData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoinsShopData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.CoinsShopData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.CoinsShopData} CoinsShopData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoinsShopData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.CoinsShopData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.shopItemList && message.shopItemList.length))
                        message.shopItemList = [];
                    message.shopItemList.push($root.CVP.ShopItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoinsShopData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.CoinsShopData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.CoinsShopData} CoinsShopData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoinsShopData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoinsShopData message.
         * @function verify
         * @memberof CVP.CoinsShopData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoinsShopData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.shopItemList != null && message.hasOwnProperty("shopItemList")) {
                if (!Array.isArray(message.shopItemList))
                    return "shopItemList: array expected";
                for (var i = 0; i < message.shopItemList.length; ++i) {
                    var error = $root.CVP.ShopItem.verify(message.shopItemList[i]);
                    if (error)
                        return "shopItemList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CoinsShopData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.CoinsShopData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.CoinsShopData} CoinsShopData
         */
        CoinsShopData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.CoinsShopData)
                return object;
            var message = new $root.CVP.CoinsShopData();
            if (object.shopItemList) {
                if (!Array.isArray(object.shopItemList))
                    throw TypeError(".CVP.CoinsShopData.shopItemList: array expected");
                message.shopItemList = [];
                for (var i = 0; i < object.shopItemList.length; ++i) {
                    if (typeof object.shopItemList[i] !== "object")
                        throw TypeError(".CVP.CoinsShopData.shopItemList: object expected");
                    message.shopItemList[i] = $root.CVP.ShopItem.fromObject(object.shopItemList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CoinsShopData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.CoinsShopData
         * @static
         * @param {CVP.CoinsShopData} message CoinsShopData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoinsShopData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.shopItemList = [];
            if (message.shopItemList && message.shopItemList.length) {
                object.shopItemList = [];
                for (var j = 0; j < message.shopItemList.length; ++j)
                    object.shopItemList[j] = $root.CVP.ShopItem.toObject(message.shopItemList[j], options);
            }
            return object;
        };

        /**
         * Converts this CoinsShopData to JSON.
         * @function toJSON
         * @memberof CVP.CoinsShopData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoinsShopData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoinsShopData;
    })();

    CVP.BuffShopData = (function() {

        /**
         * Properties of a BuffShopData.
         * @memberof CVP
         * @interface IBuffShopData
         * @property {Array.<CVP.IBuffGoodData>|null} [buffGoodDataList] BuffShopData buffGoodDataList
         */

        /**
         * Constructs a new BuffShopData.
         * @memberof CVP
         * @classdesc Represents a BuffShopData.
         * @implements IBuffShopData
         * @constructor
         * @param {CVP.IBuffShopData=} [properties] Properties to set
         */
        function BuffShopData(properties) {
            this.buffGoodDataList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BuffShopData buffGoodDataList.
         * @member {Array.<CVP.IBuffGoodData>} buffGoodDataList
         * @memberof CVP.BuffShopData
         * @instance
         */
        BuffShopData.prototype.buffGoodDataList = $util.emptyArray;

        /**
         * Creates a new BuffShopData instance using the specified properties.
         * @function create
         * @memberof CVP.BuffShopData
         * @static
         * @param {CVP.IBuffShopData=} [properties] Properties to set
         * @returns {CVP.BuffShopData} BuffShopData instance
         */
        BuffShopData.create = function create(properties) {
            return new BuffShopData(properties);
        };

        /**
         * Encodes the specified BuffShopData message. Does not implicitly {@link CVP.BuffShopData.verify|verify} messages.
         * @function encode
         * @memberof CVP.BuffShopData
         * @static
         * @param {CVP.IBuffShopData} message BuffShopData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BuffShopData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.buffGoodDataList != null && message.buffGoodDataList.length)
                for (var i = 0; i < message.buffGoodDataList.length; ++i)
                    $root.CVP.BuffGoodData.encode(message.buffGoodDataList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BuffShopData message, length delimited. Does not implicitly {@link CVP.BuffShopData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.BuffShopData
         * @static
         * @param {CVP.IBuffShopData} message BuffShopData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BuffShopData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BuffShopData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.BuffShopData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.BuffShopData} BuffShopData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BuffShopData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.BuffShopData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.buffGoodDataList && message.buffGoodDataList.length))
                        message.buffGoodDataList = [];
                    message.buffGoodDataList.push($root.CVP.BuffGoodData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BuffShopData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.BuffShopData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.BuffShopData} BuffShopData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BuffShopData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BuffShopData message.
         * @function verify
         * @memberof CVP.BuffShopData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BuffShopData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.buffGoodDataList != null && message.hasOwnProperty("buffGoodDataList")) {
                if (!Array.isArray(message.buffGoodDataList))
                    return "buffGoodDataList: array expected";
                for (var i = 0; i < message.buffGoodDataList.length; ++i) {
                    var error = $root.CVP.BuffGoodData.verify(message.buffGoodDataList[i]);
                    if (error)
                        return "buffGoodDataList." + error;
                }
            }
            return null;
        };

        /**
         * Creates a BuffShopData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.BuffShopData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.BuffShopData} BuffShopData
         */
        BuffShopData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.BuffShopData)
                return object;
            var message = new $root.CVP.BuffShopData();
            if (object.buffGoodDataList) {
                if (!Array.isArray(object.buffGoodDataList))
                    throw TypeError(".CVP.BuffShopData.buffGoodDataList: array expected");
                message.buffGoodDataList = [];
                for (var i = 0; i < object.buffGoodDataList.length; ++i) {
                    if (typeof object.buffGoodDataList[i] !== "object")
                        throw TypeError(".CVP.BuffShopData.buffGoodDataList: object expected");
                    message.buffGoodDataList[i] = $root.CVP.BuffGoodData.fromObject(object.buffGoodDataList[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a BuffShopData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.BuffShopData
         * @static
         * @param {CVP.BuffShopData} message BuffShopData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BuffShopData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.buffGoodDataList = [];
            if (message.buffGoodDataList && message.buffGoodDataList.length) {
                object.buffGoodDataList = [];
                for (var j = 0; j < message.buffGoodDataList.length; ++j)
                    object.buffGoodDataList[j] = $root.CVP.BuffGoodData.toObject(message.buffGoodDataList[j], options);
            }
            return object;
        };

        /**
         * Converts this BuffShopData to JSON.
         * @function toJSON
         * @memberof CVP.BuffShopData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BuffShopData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BuffShopData;
    })();

    CVP.BuffGoodData = (function() {

        /**
         * Properties of a BuffGoodData.
         * @memberof CVP
         * @interface IBuffGoodData
         * @property {string|null} [sku] BuffGoodData sku
         * @property {number|null} [speedPercent] BuffGoodData speedPercent
         * @property {Array.<number>|null} [buffTime] BuffGoodData buffTime
         * @property {number|null} [guaCardsNum] BuffGoodData guaCardsNum
         * @property {number|null} [winningNum] BuffGoodData winningNum
         * @property {number|null} [vipEx] BuffGoodData vipEx
         * @property {boolean|null} [isCanBuy] BuffGoodData isCanBuy
         */

        /**
         * Constructs a new BuffGoodData.
         * @memberof CVP
         * @classdesc Represents a BuffGoodData.
         * @implements IBuffGoodData
         * @constructor
         * @param {CVP.IBuffGoodData=} [properties] Properties to set
         */
        function BuffGoodData(properties) {
            this.buffTime = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BuffGoodData sku.
         * @member {string} sku
         * @memberof CVP.BuffGoodData
         * @instance
         */
        BuffGoodData.prototype.sku = "";

        /**
         * BuffGoodData speedPercent.
         * @member {number} speedPercent
         * @memberof CVP.BuffGoodData
         * @instance
         */
        BuffGoodData.prototype.speedPercent = 0;

        /**
         * BuffGoodData buffTime.
         * @member {Array.<number>} buffTime
         * @memberof CVP.BuffGoodData
         * @instance
         */
        BuffGoodData.prototype.buffTime = $util.emptyArray;

        /**
         * BuffGoodData guaCardsNum.
         * @member {number} guaCardsNum
         * @memberof CVP.BuffGoodData
         * @instance
         */
        BuffGoodData.prototype.guaCardsNum = 0;

        /**
         * BuffGoodData winningNum.
         * @member {number} winningNum
         * @memberof CVP.BuffGoodData
         * @instance
         */
        BuffGoodData.prototype.winningNum = 0;

        /**
         * BuffGoodData vipEx.
         * @member {number} vipEx
         * @memberof CVP.BuffGoodData
         * @instance
         */
        BuffGoodData.prototype.vipEx = 0;

        /**
         * BuffGoodData isCanBuy.
         * @member {boolean} isCanBuy
         * @memberof CVP.BuffGoodData
         * @instance
         */
        BuffGoodData.prototype.isCanBuy = false;

        /**
         * Creates a new BuffGoodData instance using the specified properties.
         * @function create
         * @memberof CVP.BuffGoodData
         * @static
         * @param {CVP.IBuffGoodData=} [properties] Properties to set
         * @returns {CVP.BuffGoodData} BuffGoodData instance
         */
        BuffGoodData.create = function create(properties) {
            return new BuffGoodData(properties);
        };

        /**
         * Encodes the specified BuffGoodData message. Does not implicitly {@link CVP.BuffGoodData.verify|verify} messages.
         * @function encode
         * @memberof CVP.BuffGoodData
         * @static
         * @param {CVP.IBuffGoodData} message BuffGoodData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BuffGoodData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sku != null && message.hasOwnProperty("sku"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sku);
            if (message.speedPercent != null && message.hasOwnProperty("speedPercent"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.speedPercent);
            if (message.buffTime != null && message.buffTime.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.buffTime.length; ++i)
                    writer.int32(message.buffTime[i]);
                writer.ldelim();
            }
            if (message.guaCardsNum != null && message.hasOwnProperty("guaCardsNum"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.guaCardsNum);
            if (message.winningNum != null && message.hasOwnProperty("winningNum"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.winningNum);
            if (message.vipEx != null && message.hasOwnProperty("vipEx"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.vipEx);
            if (message.isCanBuy != null && message.hasOwnProperty("isCanBuy"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isCanBuy);
            return writer;
        };

        /**
         * Encodes the specified BuffGoodData message, length delimited. Does not implicitly {@link CVP.BuffGoodData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.BuffGoodData
         * @static
         * @param {CVP.IBuffGoodData} message BuffGoodData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BuffGoodData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BuffGoodData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.BuffGoodData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.BuffGoodData} BuffGoodData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BuffGoodData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.BuffGoodData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sku = reader.string();
                    break;
                case 2:
                    message.speedPercent = reader.int32();
                    break;
                case 3:
                    if (!(message.buffTime && message.buffTime.length))
                        message.buffTime = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.buffTime.push(reader.int32());
                    } else
                        message.buffTime.push(reader.int32());
                    break;
                case 4:
                    message.guaCardsNum = reader.int32();
                    break;
                case 5:
                    message.winningNum = reader.int32();
                    break;
                case 6:
                    message.vipEx = reader.int32();
                    break;
                case 7:
                    message.isCanBuy = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BuffGoodData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.BuffGoodData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.BuffGoodData} BuffGoodData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BuffGoodData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BuffGoodData message.
         * @function verify
         * @memberof CVP.BuffGoodData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BuffGoodData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sku != null && message.hasOwnProperty("sku"))
                if (!$util.isString(message.sku))
                    return "sku: string expected";
            if (message.speedPercent != null && message.hasOwnProperty("speedPercent"))
                if (!$util.isInteger(message.speedPercent))
                    return "speedPercent: integer expected";
            if (message.buffTime != null && message.hasOwnProperty("buffTime")) {
                if (!Array.isArray(message.buffTime))
                    return "buffTime: array expected";
                for (var i = 0; i < message.buffTime.length; ++i)
                    if (!$util.isInteger(message.buffTime[i]))
                        return "buffTime: integer[] expected";
            }
            if (message.guaCardsNum != null && message.hasOwnProperty("guaCardsNum"))
                if (!$util.isInteger(message.guaCardsNum))
                    return "guaCardsNum: integer expected";
            if (message.winningNum != null && message.hasOwnProperty("winningNum"))
                if (!$util.isInteger(message.winningNum))
                    return "winningNum: integer expected";
            if (message.vipEx != null && message.hasOwnProperty("vipEx"))
                if (!$util.isInteger(message.vipEx))
                    return "vipEx: integer expected";
            if (message.isCanBuy != null && message.hasOwnProperty("isCanBuy"))
                if (typeof message.isCanBuy !== "boolean")
                    return "isCanBuy: boolean expected";
            return null;
        };

        /**
         * Creates a BuffGoodData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.BuffGoodData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.BuffGoodData} BuffGoodData
         */
        BuffGoodData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.BuffGoodData)
                return object;
            var message = new $root.CVP.BuffGoodData();
            if (object.sku != null)
                message.sku = String(object.sku);
            if (object.speedPercent != null)
                message.speedPercent = object.speedPercent | 0;
            if (object.buffTime) {
                if (!Array.isArray(object.buffTime))
                    throw TypeError(".CVP.BuffGoodData.buffTime: array expected");
                message.buffTime = [];
                for (var i = 0; i < object.buffTime.length; ++i)
                    message.buffTime[i] = object.buffTime[i] | 0;
            }
            if (object.guaCardsNum != null)
                message.guaCardsNum = object.guaCardsNum | 0;
            if (object.winningNum != null)
                message.winningNum = object.winningNum | 0;
            if (object.vipEx != null)
                message.vipEx = object.vipEx | 0;
            if (object.isCanBuy != null)
                message.isCanBuy = Boolean(object.isCanBuy);
            return message;
        };

        /**
         * Creates a plain object from a BuffGoodData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.BuffGoodData
         * @static
         * @param {CVP.BuffGoodData} message BuffGoodData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BuffGoodData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.buffTime = [];
            if (options.defaults) {
                object.sku = "";
                object.speedPercent = 0;
                object.guaCardsNum = 0;
                object.winningNum = 0;
                object.vipEx = 0;
                object.isCanBuy = false;
            }
            if (message.sku != null && message.hasOwnProperty("sku"))
                object.sku = message.sku;
            if (message.speedPercent != null && message.hasOwnProperty("speedPercent"))
                object.speedPercent = message.speedPercent;
            if (message.buffTime && message.buffTime.length) {
                object.buffTime = [];
                for (var j = 0; j < message.buffTime.length; ++j)
                    object.buffTime[j] = message.buffTime[j];
            }
            if (message.guaCardsNum != null && message.hasOwnProperty("guaCardsNum"))
                object.guaCardsNum = message.guaCardsNum;
            if (message.winningNum != null && message.hasOwnProperty("winningNum"))
                object.winningNum = message.winningNum;
            if (message.vipEx != null && message.hasOwnProperty("vipEx"))
                object.vipEx = message.vipEx;
            if (message.isCanBuy != null && message.hasOwnProperty("isCanBuy"))
                object.isCanBuy = message.isCanBuy;
            return object;
        };

        /**
         * Converts this BuffGoodData to JSON.
         * @function toJSON
         * @memberof CVP.BuffGoodData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BuffGoodData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BuffGoodData;
    })();

    CVP.GetShopGoodsForCoins = (function() {

        /**
         * Properties of a GetShopGoodsForCoins.
         * @memberof CVP
         * @interface IGetShopGoodsForCoins
         * @property {number|null} [vipBalance] GetShopGoodsForCoins vipBalance
         * @property {number|null} [winningBalance] GetShopGoodsForCoins winningBalance
         * @property {number|null} [guaCardBalance] GetShopGoodsForCoins guaCardBalance
         * @property {number|null} [coinsBalance] GetShopGoodsForCoins coinsBalance
         */

        /**
         * Constructs a new GetShopGoodsForCoins.
         * @memberof CVP
         * @classdesc Represents a GetShopGoodsForCoins.
         * @implements IGetShopGoodsForCoins
         * @constructor
         * @param {CVP.IGetShopGoodsForCoins=} [properties] Properties to set
         */
        function GetShopGoodsForCoins(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetShopGoodsForCoins vipBalance.
         * @member {number} vipBalance
         * @memberof CVP.GetShopGoodsForCoins
         * @instance
         */
        GetShopGoodsForCoins.prototype.vipBalance = 0;

        /**
         * GetShopGoodsForCoins winningBalance.
         * @member {number} winningBalance
         * @memberof CVP.GetShopGoodsForCoins
         * @instance
         */
        GetShopGoodsForCoins.prototype.winningBalance = 0;

        /**
         * GetShopGoodsForCoins guaCardBalance.
         * @member {number} guaCardBalance
         * @memberof CVP.GetShopGoodsForCoins
         * @instance
         */
        GetShopGoodsForCoins.prototype.guaCardBalance = 0;

        /**
         * GetShopGoodsForCoins coinsBalance.
         * @member {number} coinsBalance
         * @memberof CVP.GetShopGoodsForCoins
         * @instance
         */
        GetShopGoodsForCoins.prototype.coinsBalance = 0;

        /**
         * Creates a new GetShopGoodsForCoins instance using the specified properties.
         * @function create
         * @memberof CVP.GetShopGoodsForCoins
         * @static
         * @param {CVP.IGetShopGoodsForCoins=} [properties] Properties to set
         * @returns {CVP.GetShopGoodsForCoins} GetShopGoodsForCoins instance
         */
        GetShopGoodsForCoins.create = function create(properties) {
            return new GetShopGoodsForCoins(properties);
        };

        /**
         * Encodes the specified GetShopGoodsForCoins message. Does not implicitly {@link CVP.GetShopGoodsForCoins.verify|verify} messages.
         * @function encode
         * @memberof CVP.GetShopGoodsForCoins
         * @static
         * @param {CVP.IGetShopGoodsForCoins} message GetShopGoodsForCoins message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetShopGoodsForCoins.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.vipBalance != null && message.hasOwnProperty("vipBalance"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.vipBalance);
            if (message.winningBalance != null && message.hasOwnProperty("winningBalance"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.winningBalance);
            if (message.guaCardBalance != null && message.hasOwnProperty("guaCardBalance"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.guaCardBalance);
            if (message.coinsBalance != null && message.hasOwnProperty("coinsBalance"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.coinsBalance);
            return writer;
        };

        /**
         * Encodes the specified GetShopGoodsForCoins message, length delimited. Does not implicitly {@link CVP.GetShopGoodsForCoins.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.GetShopGoodsForCoins
         * @static
         * @param {CVP.IGetShopGoodsForCoins} message GetShopGoodsForCoins message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetShopGoodsForCoins.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetShopGoodsForCoins message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.GetShopGoodsForCoins
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.GetShopGoodsForCoins} GetShopGoodsForCoins
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetShopGoodsForCoins.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.GetShopGoodsForCoins();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.vipBalance = reader.int32();
                    break;
                case 2:
                    message.winningBalance = reader.int32();
                    break;
                case 3:
                    message.guaCardBalance = reader.int32();
                    break;
                case 4:
                    message.coinsBalance = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetShopGoodsForCoins message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.GetShopGoodsForCoins
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.GetShopGoodsForCoins} GetShopGoodsForCoins
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetShopGoodsForCoins.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetShopGoodsForCoins message.
         * @function verify
         * @memberof CVP.GetShopGoodsForCoins
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetShopGoodsForCoins.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.vipBalance != null && message.hasOwnProperty("vipBalance"))
                if (!$util.isInteger(message.vipBalance))
                    return "vipBalance: integer expected";
            if (message.winningBalance != null && message.hasOwnProperty("winningBalance"))
                if (!$util.isInteger(message.winningBalance))
                    return "winningBalance: integer expected";
            if (message.guaCardBalance != null && message.hasOwnProperty("guaCardBalance"))
                if (!$util.isInteger(message.guaCardBalance))
                    return "guaCardBalance: integer expected";
            if (message.coinsBalance != null && message.hasOwnProperty("coinsBalance"))
                if (!$util.isInteger(message.coinsBalance))
                    return "coinsBalance: integer expected";
            return null;
        };

        /**
         * Creates a GetShopGoodsForCoins message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.GetShopGoodsForCoins
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.GetShopGoodsForCoins} GetShopGoodsForCoins
         */
        GetShopGoodsForCoins.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.GetShopGoodsForCoins)
                return object;
            var message = new $root.CVP.GetShopGoodsForCoins();
            if (object.vipBalance != null)
                message.vipBalance = object.vipBalance | 0;
            if (object.winningBalance != null)
                message.winningBalance = object.winningBalance | 0;
            if (object.guaCardBalance != null)
                message.guaCardBalance = object.guaCardBalance | 0;
            if (object.coinsBalance != null)
                message.coinsBalance = object.coinsBalance | 0;
            return message;
        };

        /**
         * Creates a plain object from a GetShopGoodsForCoins message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.GetShopGoodsForCoins
         * @static
         * @param {CVP.GetShopGoodsForCoins} message GetShopGoodsForCoins
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetShopGoodsForCoins.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.vipBalance = 0;
                object.winningBalance = 0;
                object.guaCardBalance = 0;
                object.coinsBalance = 0;
            }
            if (message.vipBalance != null && message.hasOwnProperty("vipBalance"))
                object.vipBalance = message.vipBalance;
            if (message.winningBalance != null && message.hasOwnProperty("winningBalance"))
                object.winningBalance = message.winningBalance;
            if (message.guaCardBalance != null && message.hasOwnProperty("guaCardBalance"))
                object.guaCardBalance = message.guaCardBalance;
            if (message.coinsBalance != null && message.hasOwnProperty("coinsBalance"))
                object.coinsBalance = message.coinsBalance;
            return object;
        };

        /**
         * Converts this GetShopGoodsForCoins to JSON.
         * @function toJSON
         * @memberof CVP.GetShopGoodsForCoins
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetShopGoodsForCoins.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetShopGoodsForCoins;
    })();

    CVP.GetShopGoodsForBuff = (function() {

        /**
         * Properties of a GetShopGoodsForBuff.
         * @memberof CVP
         * @interface IGetShopGoodsForBuff
         * @property {number|null} [vipBalance] GetShopGoodsForBuff vipBalance
         * @property {number|null} [winningBalance] GetShopGoodsForBuff winningBalance
         * @property {number|null} [guaCardBalance] GetShopGoodsForBuff guaCardBalance
         * @property {number|null} [buffTimeBalance] GetShopGoodsForBuff buffTimeBalance
         */

        /**
         * Constructs a new GetShopGoodsForBuff.
         * @memberof CVP
         * @classdesc Represents a GetShopGoodsForBuff.
         * @implements IGetShopGoodsForBuff
         * @constructor
         * @param {CVP.IGetShopGoodsForBuff=} [properties] Properties to set
         */
        function GetShopGoodsForBuff(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GetShopGoodsForBuff vipBalance.
         * @member {number} vipBalance
         * @memberof CVP.GetShopGoodsForBuff
         * @instance
         */
        GetShopGoodsForBuff.prototype.vipBalance = 0;

        /**
         * GetShopGoodsForBuff winningBalance.
         * @member {number} winningBalance
         * @memberof CVP.GetShopGoodsForBuff
         * @instance
         */
        GetShopGoodsForBuff.prototype.winningBalance = 0;

        /**
         * GetShopGoodsForBuff guaCardBalance.
         * @member {number} guaCardBalance
         * @memberof CVP.GetShopGoodsForBuff
         * @instance
         */
        GetShopGoodsForBuff.prototype.guaCardBalance = 0;

        /**
         * GetShopGoodsForBuff buffTimeBalance.
         * @member {number} buffTimeBalance
         * @memberof CVP.GetShopGoodsForBuff
         * @instance
         */
        GetShopGoodsForBuff.prototype.buffTimeBalance = 0;

        /**
         * Creates a new GetShopGoodsForBuff instance using the specified properties.
         * @function create
         * @memberof CVP.GetShopGoodsForBuff
         * @static
         * @param {CVP.IGetShopGoodsForBuff=} [properties] Properties to set
         * @returns {CVP.GetShopGoodsForBuff} GetShopGoodsForBuff instance
         */
        GetShopGoodsForBuff.create = function create(properties) {
            return new GetShopGoodsForBuff(properties);
        };

        /**
         * Encodes the specified GetShopGoodsForBuff message. Does not implicitly {@link CVP.GetShopGoodsForBuff.verify|verify} messages.
         * @function encode
         * @memberof CVP.GetShopGoodsForBuff
         * @static
         * @param {CVP.IGetShopGoodsForBuff} message GetShopGoodsForBuff message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetShopGoodsForBuff.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.vipBalance != null && message.hasOwnProperty("vipBalance"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.vipBalance);
            if (message.winningBalance != null && message.hasOwnProperty("winningBalance"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.winningBalance);
            if (message.guaCardBalance != null && message.hasOwnProperty("guaCardBalance"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.guaCardBalance);
            if (message.buffTimeBalance != null && message.hasOwnProperty("buffTimeBalance"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.buffTimeBalance);
            return writer;
        };

        /**
         * Encodes the specified GetShopGoodsForBuff message, length delimited. Does not implicitly {@link CVP.GetShopGoodsForBuff.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.GetShopGoodsForBuff
         * @static
         * @param {CVP.IGetShopGoodsForBuff} message GetShopGoodsForBuff message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GetShopGoodsForBuff.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GetShopGoodsForBuff message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.GetShopGoodsForBuff
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.GetShopGoodsForBuff} GetShopGoodsForBuff
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetShopGoodsForBuff.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.GetShopGoodsForBuff();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.vipBalance = reader.int32();
                    break;
                case 2:
                    message.winningBalance = reader.int32();
                    break;
                case 3:
                    message.guaCardBalance = reader.int32();
                    break;
                case 4:
                    message.buffTimeBalance = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GetShopGoodsForBuff message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.GetShopGoodsForBuff
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.GetShopGoodsForBuff} GetShopGoodsForBuff
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GetShopGoodsForBuff.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GetShopGoodsForBuff message.
         * @function verify
         * @memberof CVP.GetShopGoodsForBuff
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GetShopGoodsForBuff.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.vipBalance != null && message.hasOwnProperty("vipBalance"))
                if (!$util.isInteger(message.vipBalance))
                    return "vipBalance: integer expected";
            if (message.winningBalance != null && message.hasOwnProperty("winningBalance"))
                if (!$util.isInteger(message.winningBalance))
                    return "winningBalance: integer expected";
            if (message.guaCardBalance != null && message.hasOwnProperty("guaCardBalance"))
                if (!$util.isInteger(message.guaCardBalance))
                    return "guaCardBalance: integer expected";
            if (message.buffTimeBalance != null && message.hasOwnProperty("buffTimeBalance"))
                if (!$util.isInteger(message.buffTimeBalance))
                    return "buffTimeBalance: integer expected";
            return null;
        };

        /**
         * Creates a GetShopGoodsForBuff message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.GetShopGoodsForBuff
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.GetShopGoodsForBuff} GetShopGoodsForBuff
         */
        GetShopGoodsForBuff.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.GetShopGoodsForBuff)
                return object;
            var message = new $root.CVP.GetShopGoodsForBuff();
            if (object.vipBalance != null)
                message.vipBalance = object.vipBalance | 0;
            if (object.winningBalance != null)
                message.winningBalance = object.winningBalance | 0;
            if (object.guaCardBalance != null)
                message.guaCardBalance = object.guaCardBalance | 0;
            if (object.buffTimeBalance != null)
                message.buffTimeBalance = object.buffTimeBalance | 0;
            return message;
        };

        /**
         * Creates a plain object from a GetShopGoodsForBuff message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.GetShopGoodsForBuff
         * @static
         * @param {CVP.GetShopGoodsForBuff} message GetShopGoodsForBuff
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GetShopGoodsForBuff.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.vipBalance = 0;
                object.winningBalance = 0;
                object.guaCardBalance = 0;
                object.buffTimeBalance = 0;
            }
            if (message.vipBalance != null && message.hasOwnProperty("vipBalance"))
                object.vipBalance = message.vipBalance;
            if (message.winningBalance != null && message.hasOwnProperty("winningBalance"))
                object.winningBalance = message.winningBalance;
            if (message.guaCardBalance != null && message.hasOwnProperty("guaCardBalance"))
                object.guaCardBalance = message.guaCardBalance;
            if (message.buffTimeBalance != null && message.hasOwnProperty("buffTimeBalance"))
                object.buffTimeBalance = message.buffTimeBalance;
            return object;
        };

        /**
         * Converts this GetShopGoodsForBuff to JSON.
         * @function toJSON
         * @memberof CVP.GetShopGoodsForBuff
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GetShopGoodsForBuff.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GetShopGoodsForBuff;
    })();

    /**
     * SigninRewardType enum.
     * @name CVP.SigninRewardType
     * @enum {string}
     * @property {number} NON=0 NON value
     * @property {number} COIN=1 COIN value
     * @property {number} SCRATCH_CARD=2 SCRATCH_CARD value
     * @property {number} AVATAR=3 AVATAR value
     * @property {number} VAULT_KEY=4 VAULT_KEY value
     * @property {number} M_COIN=5 M_COIN value
     * @property {number} HONOR=6 HONOR value
     */
    CVP.SigninRewardType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NON"] = 0;
        values[valuesById[1] = "COIN"] = 1;
        values[valuesById[2] = "SCRATCH_CARD"] = 2;
        values[valuesById[3] = "AVATAR"] = 3;
        values[valuesById[4] = "VAULT_KEY"] = 4;
        values[valuesById[5] = "M_COIN"] = 5;
        values[valuesById[6] = "HONOR"] = 6;
        return values;
    })();

    /**
     * SigninType enum.
     * @name CVP.SigninType
     * @enum {string}
     * @property {number} NON=0 NON value
     * @property {number} NORMAL=1 NORMAL value
     * @property {number} PURCHASE=2 PURCHASE value
     */
    CVP.SigninType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NON"] = 0;
        values[valuesById[1] = "NORMAL"] = 1;
        values[valuesById[2] = "PURCHASE"] = 2;
        return values;
    })();

    /**
     * SigninState enum.
     * @name CVP.SigninState
     * @enum {string}
     * @property {number} NON=0 NON value
     * @property {number} EXPIRED=1 EXPIRED value
     * @property {number} COMPLETED=2 COMPLETED value
     * @property {number} UNOPEN=3 UNOPEN value
     * @property {number} OPENED=4 OPENED value
     */
    CVP.SigninState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NON"] = 0;
        values[valuesById[1] = "EXPIRED"] = 1;
        values[valuesById[2] = "COMPLETED"] = 2;
        values[valuesById[3] = "UNOPEN"] = 3;
        values[valuesById[4] = "OPENED"] = 4;
        return values;
    })();

    CVP.SingleReward = (function() {

        /**
         * Properties of a SingleReward.
         * @memberof CVP
         * @interface ISingleReward
         * @property {CVP.SigninRewardType|null} [rewardType] SingleReward rewardType
         * @property {number|null} [rewardValue] SingleReward rewardValue
         */

        /**
         * Constructs a new SingleReward.
         * @memberof CVP
         * @classdesc Represents a SingleReward.
         * @implements ISingleReward
         * @constructor
         * @param {CVP.ISingleReward=} [properties] Properties to set
         */
        function SingleReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SingleReward rewardType.
         * @member {CVP.SigninRewardType} rewardType
         * @memberof CVP.SingleReward
         * @instance
         */
        SingleReward.prototype.rewardType = 0;

        /**
         * SingleReward rewardValue.
         * @member {number} rewardValue
         * @memberof CVP.SingleReward
         * @instance
         */
        SingleReward.prototype.rewardValue = 0;

        /**
         * Creates a new SingleReward instance using the specified properties.
         * @function create
         * @memberof CVP.SingleReward
         * @static
         * @param {CVP.ISingleReward=} [properties] Properties to set
         * @returns {CVP.SingleReward} SingleReward instance
         */
        SingleReward.create = function create(properties) {
            return new SingleReward(properties);
        };

        /**
         * Encodes the specified SingleReward message. Does not implicitly {@link CVP.SingleReward.verify|verify} messages.
         * @function encode
         * @memberof CVP.SingleReward
         * @static
         * @param {CVP.ISingleReward} message SingleReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SingleReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.rewardType);
            if (message.rewardValue != null && message.hasOwnProperty("rewardValue"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.rewardValue);
            return writer;
        };

        /**
         * Encodes the specified SingleReward message, length delimited. Does not implicitly {@link CVP.SingleReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SingleReward
         * @static
         * @param {CVP.ISingleReward} message SingleReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SingleReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SingleReward message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SingleReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SingleReward} SingleReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SingleReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SingleReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rewardType = reader.int32();
                    break;
                case 2:
                    message.rewardValue = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SingleReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SingleReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SingleReward} SingleReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SingleReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SingleReward message.
         * @function verify
         * @memberof CVP.SingleReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SingleReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                switch (message.rewardType) {
                default:
                    return "rewardType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.rewardValue != null && message.hasOwnProperty("rewardValue"))
                if (typeof message.rewardValue !== "number")
                    return "rewardValue: number expected";
            return null;
        };

        /**
         * Creates a SingleReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SingleReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SingleReward} SingleReward
         */
        SingleReward.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SingleReward)
                return object;
            var message = new $root.CVP.SingleReward();
            switch (object.rewardType) {
            case "NON":
            case 0:
                message.rewardType = 0;
                break;
            case "COIN":
            case 1:
                message.rewardType = 1;
                break;
            case "SCRATCH_CARD":
            case 2:
                message.rewardType = 2;
                break;
            case "AVATAR":
            case 3:
                message.rewardType = 3;
                break;
            case "VAULT_KEY":
            case 4:
                message.rewardType = 4;
                break;
            case "M_COIN":
            case 5:
                message.rewardType = 5;
                break;
            case "HONOR":
            case 6:
                message.rewardType = 6;
                break;
            }
            if (object.rewardValue != null)
                message.rewardValue = Number(object.rewardValue);
            return message;
        };

        /**
         * Creates a plain object from a SingleReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SingleReward
         * @static
         * @param {CVP.SingleReward} message SingleReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SingleReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.rewardType = options.enums === String ? "NON" : 0;
                object.rewardValue = 0;
            }
            if (message.rewardType != null && message.hasOwnProperty("rewardType"))
                object.rewardType = options.enums === String ? $root.CVP.SigninRewardType[message.rewardType] : message.rewardType;
            if (message.rewardValue != null && message.hasOwnProperty("rewardValue"))
                object.rewardValue = options.json && !isFinite(message.rewardValue) ? String(message.rewardValue) : message.rewardValue;
            return object;
        };

        /**
         * Converts this SingleReward to JSON.
         * @function toJSON
         * @memberof CVP.SingleReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SingleReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SingleReward;
    })();

    CVP.SigninCumulativeReward = (function() {

        /**
         * Properties of a SigninCumulativeReward.
         * @memberof CVP
         * @interface ISigninCumulativeReward
         * @property {number|null} [idx] SigninCumulativeReward idx
         * @property {Array.<CVP.ISingleReward>|null} [singleRewardList] SigninCumulativeReward singleRewardList
         * @property {number|null} [cumulativeRewardTarget] SigninCumulativeReward cumulativeRewardTarget
         * @property {boolean|null} [isCollected] SigninCumulativeReward isCollected
         */

        /**
         * Constructs a new SigninCumulativeReward.
         * @memberof CVP
         * @classdesc Represents a SigninCumulativeReward.
         * @implements ISigninCumulativeReward
         * @constructor
         * @param {CVP.ISigninCumulativeReward=} [properties] Properties to set
         */
        function SigninCumulativeReward(properties) {
            this.singleRewardList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SigninCumulativeReward idx.
         * @member {number} idx
         * @memberof CVP.SigninCumulativeReward
         * @instance
         */
        SigninCumulativeReward.prototype.idx = 0;

        /**
         * SigninCumulativeReward singleRewardList.
         * @member {Array.<CVP.ISingleReward>} singleRewardList
         * @memberof CVP.SigninCumulativeReward
         * @instance
         */
        SigninCumulativeReward.prototype.singleRewardList = $util.emptyArray;

        /**
         * SigninCumulativeReward cumulativeRewardTarget.
         * @member {number} cumulativeRewardTarget
         * @memberof CVP.SigninCumulativeReward
         * @instance
         */
        SigninCumulativeReward.prototype.cumulativeRewardTarget = 0;

        /**
         * SigninCumulativeReward isCollected.
         * @member {boolean} isCollected
         * @memberof CVP.SigninCumulativeReward
         * @instance
         */
        SigninCumulativeReward.prototype.isCollected = false;

        /**
         * Creates a new SigninCumulativeReward instance using the specified properties.
         * @function create
         * @memberof CVP.SigninCumulativeReward
         * @static
         * @param {CVP.ISigninCumulativeReward=} [properties] Properties to set
         * @returns {CVP.SigninCumulativeReward} SigninCumulativeReward instance
         */
        SigninCumulativeReward.create = function create(properties) {
            return new SigninCumulativeReward(properties);
        };

        /**
         * Encodes the specified SigninCumulativeReward message. Does not implicitly {@link CVP.SigninCumulativeReward.verify|verify} messages.
         * @function encode
         * @memberof CVP.SigninCumulativeReward
         * @static
         * @param {CVP.ISigninCumulativeReward} message SigninCumulativeReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SigninCumulativeReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.idx != null && message.hasOwnProperty("idx"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.idx);
            if (message.singleRewardList != null && message.singleRewardList.length)
                for (var i = 0; i < message.singleRewardList.length; ++i)
                    $root.CVP.SingleReward.encode(message.singleRewardList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.cumulativeRewardTarget != null && message.hasOwnProperty("cumulativeRewardTarget"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cumulativeRewardTarget);
            if (message.isCollected != null && message.hasOwnProperty("isCollected"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isCollected);
            return writer;
        };

        /**
         * Encodes the specified SigninCumulativeReward message, length delimited. Does not implicitly {@link CVP.SigninCumulativeReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.SigninCumulativeReward
         * @static
         * @param {CVP.ISigninCumulativeReward} message SigninCumulativeReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SigninCumulativeReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SigninCumulativeReward message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.SigninCumulativeReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.SigninCumulativeReward} SigninCumulativeReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SigninCumulativeReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.SigninCumulativeReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.idx = reader.int32();
                    break;
                case 2:
                    if (!(message.singleRewardList && message.singleRewardList.length))
                        message.singleRewardList = [];
                    message.singleRewardList.push($root.CVP.SingleReward.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.cumulativeRewardTarget = reader.int32();
                    break;
                case 4:
                    message.isCollected = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SigninCumulativeReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.SigninCumulativeReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.SigninCumulativeReward} SigninCumulativeReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SigninCumulativeReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SigninCumulativeReward message.
         * @function verify
         * @memberof CVP.SigninCumulativeReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SigninCumulativeReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.idx != null && message.hasOwnProperty("idx"))
                if (!$util.isInteger(message.idx))
                    return "idx: integer expected";
            if (message.singleRewardList != null && message.hasOwnProperty("singleRewardList")) {
                if (!Array.isArray(message.singleRewardList))
                    return "singleRewardList: array expected";
                for (var i = 0; i < message.singleRewardList.length; ++i) {
                    var error = $root.CVP.SingleReward.verify(message.singleRewardList[i]);
                    if (error)
                        return "singleRewardList." + error;
                }
            }
            if (message.cumulativeRewardTarget != null && message.hasOwnProperty("cumulativeRewardTarget"))
                if (!$util.isInteger(message.cumulativeRewardTarget))
                    return "cumulativeRewardTarget: integer expected";
            if (message.isCollected != null && message.hasOwnProperty("isCollected"))
                if (typeof message.isCollected !== "boolean")
                    return "isCollected: boolean expected";
            return null;
        };

        /**
         * Creates a SigninCumulativeReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.SigninCumulativeReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.SigninCumulativeReward} SigninCumulativeReward
         */
        SigninCumulativeReward.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.SigninCumulativeReward)
                return object;
            var message = new $root.CVP.SigninCumulativeReward();
            if (object.idx != null)
                message.idx = object.idx | 0;
            if (object.singleRewardList) {
                if (!Array.isArray(object.singleRewardList))
                    throw TypeError(".CVP.SigninCumulativeReward.singleRewardList: array expected");
                message.singleRewardList = [];
                for (var i = 0; i < object.singleRewardList.length; ++i) {
                    if (typeof object.singleRewardList[i] !== "object")
                        throw TypeError(".CVP.SigninCumulativeReward.singleRewardList: object expected");
                    message.singleRewardList[i] = $root.CVP.SingleReward.fromObject(object.singleRewardList[i]);
                }
            }
            if (object.cumulativeRewardTarget != null)
                message.cumulativeRewardTarget = object.cumulativeRewardTarget | 0;
            if (object.isCollected != null)
                message.isCollected = Boolean(object.isCollected);
            return message;
        };

        /**
         * Creates a plain object from a SigninCumulativeReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.SigninCumulativeReward
         * @static
         * @param {CVP.SigninCumulativeReward} message SigninCumulativeReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SigninCumulativeReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.singleRewardList = [];
            if (options.defaults) {
                object.idx = 0;
                object.cumulativeRewardTarget = 0;
                object.isCollected = false;
            }
            if (message.idx != null && message.hasOwnProperty("idx"))
                object.idx = message.idx;
            if (message.singleRewardList && message.singleRewardList.length) {
                object.singleRewardList = [];
                for (var j = 0; j < message.singleRewardList.length; ++j)
                    object.singleRewardList[j] = $root.CVP.SingleReward.toObject(message.singleRewardList[j], options);
            }
            if (message.cumulativeRewardTarget != null && message.hasOwnProperty("cumulativeRewardTarget"))
                object.cumulativeRewardTarget = message.cumulativeRewardTarget;
            if (message.isCollected != null && message.hasOwnProperty("isCollected"))
                object.isCollected = message.isCollected;
            return object;
        };

        /**
         * Converts this SigninCumulativeReward to JSON.
         * @function toJSON
         * @memberof CVP.SigninCumulativeReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SigninCumulativeReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SigninCumulativeReward;
    })();

    CVP.NormalSigninTable = (function() {

        /**
         * Properties of a NormalSigninTable.
         * @memberof CVP
         * @interface INormalSigninTable
         * @property {Array.<CVP.INormalSigninDaily>|null} [normalSigninDailyList] NormalSigninTable normalSigninDailyList
         * @property {Array.<CVP.ISigninCumulativeReward>|null} [signinCumulativeRewardList] NormalSigninTable signinCumulativeRewardList
         * @property {number|null} [cumulativeRewardProgress] NormalSigninTable cumulativeRewardProgress
         */

        /**
         * Constructs a new NormalSigninTable.
         * @memberof CVP
         * @classdesc Represents a NormalSigninTable.
         * @implements INormalSigninTable
         * @constructor
         * @param {CVP.INormalSigninTable=} [properties] Properties to set
         */
        function NormalSigninTable(properties) {
            this.normalSigninDailyList = [];
            this.signinCumulativeRewardList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NormalSigninTable normalSigninDailyList.
         * @member {Array.<CVP.INormalSigninDaily>} normalSigninDailyList
         * @memberof CVP.NormalSigninTable
         * @instance
         */
        NormalSigninTable.prototype.normalSigninDailyList = $util.emptyArray;

        /**
         * NormalSigninTable signinCumulativeRewardList.
         * @member {Array.<CVP.ISigninCumulativeReward>} signinCumulativeRewardList
         * @memberof CVP.NormalSigninTable
         * @instance
         */
        NormalSigninTable.prototype.signinCumulativeRewardList = $util.emptyArray;

        /**
         * NormalSigninTable cumulativeRewardProgress.
         * @member {number} cumulativeRewardProgress
         * @memberof CVP.NormalSigninTable
         * @instance
         */
        NormalSigninTable.prototype.cumulativeRewardProgress = 0;

        /**
         * Creates a new NormalSigninTable instance using the specified properties.
         * @function create
         * @memberof CVP.NormalSigninTable
         * @static
         * @param {CVP.INormalSigninTable=} [properties] Properties to set
         * @returns {CVP.NormalSigninTable} NormalSigninTable instance
         */
        NormalSigninTable.create = function create(properties) {
            return new NormalSigninTable(properties);
        };

        /**
         * Encodes the specified NormalSigninTable message. Does not implicitly {@link CVP.NormalSigninTable.verify|verify} messages.
         * @function encode
         * @memberof CVP.NormalSigninTable
         * @static
         * @param {CVP.INormalSigninTable} message NormalSigninTable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NormalSigninTable.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.normalSigninDailyList != null && message.normalSigninDailyList.length)
                for (var i = 0; i < message.normalSigninDailyList.length; ++i)
                    $root.CVP.NormalSigninDaily.encode(message.normalSigninDailyList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.signinCumulativeRewardList != null && message.signinCumulativeRewardList.length)
                for (var i = 0; i < message.signinCumulativeRewardList.length; ++i)
                    $root.CVP.SigninCumulativeReward.encode(message.signinCumulativeRewardList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.cumulativeRewardProgress != null && message.hasOwnProperty("cumulativeRewardProgress"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cumulativeRewardProgress);
            return writer;
        };

        /**
         * Encodes the specified NormalSigninTable message, length delimited. Does not implicitly {@link CVP.NormalSigninTable.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.NormalSigninTable
         * @static
         * @param {CVP.INormalSigninTable} message NormalSigninTable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NormalSigninTable.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NormalSigninTable message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.NormalSigninTable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.NormalSigninTable} NormalSigninTable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NormalSigninTable.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.NormalSigninTable();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.normalSigninDailyList && message.normalSigninDailyList.length))
                        message.normalSigninDailyList = [];
                    message.normalSigninDailyList.push($root.CVP.NormalSigninDaily.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.signinCumulativeRewardList && message.signinCumulativeRewardList.length))
                        message.signinCumulativeRewardList = [];
                    message.signinCumulativeRewardList.push($root.CVP.SigninCumulativeReward.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.cumulativeRewardProgress = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NormalSigninTable message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.NormalSigninTable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.NormalSigninTable} NormalSigninTable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NormalSigninTable.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NormalSigninTable message.
         * @function verify
         * @memberof CVP.NormalSigninTable
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NormalSigninTable.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.normalSigninDailyList != null && message.hasOwnProperty("normalSigninDailyList")) {
                if (!Array.isArray(message.normalSigninDailyList))
                    return "normalSigninDailyList: array expected";
                for (var i = 0; i < message.normalSigninDailyList.length; ++i) {
                    var error = $root.CVP.NormalSigninDaily.verify(message.normalSigninDailyList[i]);
                    if (error)
                        return "normalSigninDailyList." + error;
                }
            }
            if (message.signinCumulativeRewardList != null && message.hasOwnProperty("signinCumulativeRewardList")) {
                if (!Array.isArray(message.signinCumulativeRewardList))
                    return "signinCumulativeRewardList: array expected";
                for (var i = 0; i < message.signinCumulativeRewardList.length; ++i) {
                    var error = $root.CVP.SigninCumulativeReward.verify(message.signinCumulativeRewardList[i]);
                    if (error)
                        return "signinCumulativeRewardList." + error;
                }
            }
            if (message.cumulativeRewardProgress != null && message.hasOwnProperty("cumulativeRewardProgress"))
                if (!$util.isInteger(message.cumulativeRewardProgress))
                    return "cumulativeRewardProgress: integer expected";
            return null;
        };

        /**
         * Creates a NormalSigninTable message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.NormalSigninTable
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.NormalSigninTable} NormalSigninTable
         */
        NormalSigninTable.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.NormalSigninTable)
                return object;
            var message = new $root.CVP.NormalSigninTable();
            if (object.normalSigninDailyList) {
                if (!Array.isArray(object.normalSigninDailyList))
                    throw TypeError(".CVP.NormalSigninTable.normalSigninDailyList: array expected");
                message.normalSigninDailyList = [];
                for (var i = 0; i < object.normalSigninDailyList.length; ++i) {
                    if (typeof object.normalSigninDailyList[i] !== "object")
                        throw TypeError(".CVP.NormalSigninTable.normalSigninDailyList: object expected");
                    message.normalSigninDailyList[i] = $root.CVP.NormalSigninDaily.fromObject(object.normalSigninDailyList[i]);
                }
            }
            if (object.signinCumulativeRewardList) {
                if (!Array.isArray(object.signinCumulativeRewardList))
                    throw TypeError(".CVP.NormalSigninTable.signinCumulativeRewardList: array expected");
                message.signinCumulativeRewardList = [];
                for (var i = 0; i < object.signinCumulativeRewardList.length; ++i) {
                    if (typeof object.signinCumulativeRewardList[i] !== "object")
                        throw TypeError(".CVP.NormalSigninTable.signinCumulativeRewardList: object expected");
                    message.signinCumulativeRewardList[i] = $root.CVP.SigninCumulativeReward.fromObject(object.signinCumulativeRewardList[i]);
                }
            }
            if (object.cumulativeRewardProgress != null)
                message.cumulativeRewardProgress = object.cumulativeRewardProgress | 0;
            return message;
        };

        /**
         * Creates a plain object from a NormalSigninTable message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.NormalSigninTable
         * @static
         * @param {CVP.NormalSigninTable} message NormalSigninTable
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NormalSigninTable.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.normalSigninDailyList = [];
                object.signinCumulativeRewardList = [];
            }
            if (options.defaults)
                object.cumulativeRewardProgress = 0;
            if (message.normalSigninDailyList && message.normalSigninDailyList.length) {
                object.normalSigninDailyList = [];
                for (var j = 0; j < message.normalSigninDailyList.length; ++j)
                    object.normalSigninDailyList[j] = $root.CVP.NormalSigninDaily.toObject(message.normalSigninDailyList[j], options);
            }
            if (message.signinCumulativeRewardList && message.signinCumulativeRewardList.length) {
                object.signinCumulativeRewardList = [];
                for (var j = 0; j < message.signinCumulativeRewardList.length; ++j)
                    object.signinCumulativeRewardList[j] = $root.CVP.SigninCumulativeReward.toObject(message.signinCumulativeRewardList[j], options);
            }
            if (message.cumulativeRewardProgress != null && message.hasOwnProperty("cumulativeRewardProgress"))
                object.cumulativeRewardProgress = message.cumulativeRewardProgress;
            return object;
        };

        /**
         * Converts this NormalSigninTable to JSON.
         * @function toJSON
         * @memberof CVP.NormalSigninTable
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NormalSigninTable.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NormalSigninTable;
    })();

    CVP.NormalSigninDaily = (function() {

        /**
         * Properties of a NormalSigninDaily.
         * @memberof CVP
         * @interface INormalSigninDaily
         * @property {CVP.SigninState|null} [state] NormalSigninDaily state
         * @property {CVP.ISingleReward|null} [signinReward] NormalSigninDaily signinReward
         */

        /**
         * Constructs a new NormalSigninDaily.
         * @memberof CVP
         * @classdesc Represents a NormalSigninDaily.
         * @implements INormalSigninDaily
         * @constructor
         * @param {CVP.INormalSigninDaily=} [properties] Properties to set
         */
        function NormalSigninDaily(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NormalSigninDaily state.
         * @member {CVP.SigninState} state
         * @memberof CVP.NormalSigninDaily
         * @instance
         */
        NormalSigninDaily.prototype.state = 0;

        /**
         * NormalSigninDaily signinReward.
         * @member {CVP.ISingleReward|null|undefined} signinReward
         * @memberof CVP.NormalSigninDaily
         * @instance
         */
        NormalSigninDaily.prototype.signinReward = null;

        /**
         * Creates a new NormalSigninDaily instance using the specified properties.
         * @function create
         * @memberof CVP.NormalSigninDaily
         * @static
         * @param {CVP.INormalSigninDaily=} [properties] Properties to set
         * @returns {CVP.NormalSigninDaily} NormalSigninDaily instance
         */
        NormalSigninDaily.create = function create(properties) {
            return new NormalSigninDaily(properties);
        };

        /**
         * Encodes the specified NormalSigninDaily message. Does not implicitly {@link CVP.NormalSigninDaily.verify|verify} messages.
         * @function encode
         * @memberof CVP.NormalSigninDaily
         * @static
         * @param {CVP.INormalSigninDaily} message NormalSigninDaily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NormalSigninDaily.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
            if (message.signinReward != null && message.hasOwnProperty("signinReward"))
                $root.CVP.SingleReward.encode(message.signinReward, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified NormalSigninDaily message, length delimited. Does not implicitly {@link CVP.NormalSigninDaily.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.NormalSigninDaily
         * @static
         * @param {CVP.INormalSigninDaily} message NormalSigninDaily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NormalSigninDaily.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NormalSigninDaily message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.NormalSigninDaily
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.NormalSigninDaily} NormalSigninDaily
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NormalSigninDaily.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.NormalSigninDaily();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.state = reader.int32();
                    break;
                case 2:
                    message.signinReward = $root.CVP.SingleReward.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NormalSigninDaily message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.NormalSigninDaily
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.NormalSigninDaily} NormalSigninDaily
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NormalSigninDaily.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NormalSigninDaily message.
         * @function verify
         * @memberof CVP.NormalSigninDaily
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NormalSigninDaily.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.state != null && message.hasOwnProperty("state"))
                switch (message.state) {
                default:
                    return "state: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.signinReward != null && message.hasOwnProperty("signinReward")) {
                var error = $root.CVP.SingleReward.verify(message.signinReward);
                if (error)
                    return "signinReward." + error;
            }
            return null;
        };

        /**
         * Creates a NormalSigninDaily message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.NormalSigninDaily
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.NormalSigninDaily} NormalSigninDaily
         */
        NormalSigninDaily.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.NormalSigninDaily)
                return object;
            var message = new $root.CVP.NormalSigninDaily();
            switch (object.state) {
            case "NON":
            case 0:
                message.state = 0;
                break;
            case "EXPIRED":
            case 1:
                message.state = 1;
                break;
            case "COMPLETED":
            case 2:
                message.state = 2;
                break;
            case "UNOPEN":
            case 3:
                message.state = 3;
                break;
            case "OPENED":
            case 4:
                message.state = 4;
                break;
            }
            if (object.signinReward != null) {
                if (typeof object.signinReward !== "object")
                    throw TypeError(".CVP.NormalSigninDaily.signinReward: object expected");
                message.signinReward = $root.CVP.SingleReward.fromObject(object.signinReward);
            }
            return message;
        };

        /**
         * Creates a plain object from a NormalSigninDaily message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.NormalSigninDaily
         * @static
         * @param {CVP.NormalSigninDaily} message NormalSigninDaily
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NormalSigninDaily.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.state = options.enums === String ? "NON" : 0;
                object.signinReward = null;
            }
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = options.enums === String ? $root.CVP.SigninState[message.state] : message.state;
            if (message.signinReward != null && message.hasOwnProperty("signinReward"))
                object.signinReward = $root.CVP.SingleReward.toObject(message.signinReward, options);
            return object;
        };

        /**
         * Converts this NormalSigninDaily to JSON.
         * @function toJSON
         * @memberof CVP.NormalSigninDaily
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NormalSigninDaily.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NormalSigninDaily;
    })();

    CVP.RequestNormalSignin = (function() {

        /**
         * Properties of a RequestNormalSignin.
         * @memberof CVP
         * @interface IRequestNormalSignin
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestNormalSignin commonParams
         * @property {boolean|null} [isLookAtAd] RequestNormalSignin isLookAtAd
         */

        /**
         * Constructs a new RequestNormalSignin.
         * @memberof CVP
         * @classdesc Represents a RequestNormalSignin.
         * @implements IRequestNormalSignin
         * @constructor
         * @param {CVP.IRequestNormalSignin=} [properties] Properties to set
         */
        function RequestNormalSignin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestNormalSignin commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestNormalSignin
         * @instance
         */
        RequestNormalSignin.prototype.commonParams = null;

        /**
         * RequestNormalSignin isLookAtAd.
         * @member {boolean} isLookAtAd
         * @memberof CVP.RequestNormalSignin
         * @instance
         */
        RequestNormalSignin.prototype.isLookAtAd = false;

        /**
         * Creates a new RequestNormalSignin instance using the specified properties.
         * @function create
         * @memberof CVP.RequestNormalSignin
         * @static
         * @param {CVP.IRequestNormalSignin=} [properties] Properties to set
         * @returns {CVP.RequestNormalSignin} RequestNormalSignin instance
         */
        RequestNormalSignin.create = function create(properties) {
            return new RequestNormalSignin(properties);
        };

        /**
         * Encodes the specified RequestNormalSignin message. Does not implicitly {@link CVP.RequestNormalSignin.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestNormalSignin
         * @static
         * @param {CVP.IRequestNormalSignin} message RequestNormalSignin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestNormalSignin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.isLookAtAd != null && message.hasOwnProperty("isLookAtAd"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isLookAtAd);
            return writer;
        };

        /**
         * Encodes the specified RequestNormalSignin message, length delimited. Does not implicitly {@link CVP.RequestNormalSignin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestNormalSignin
         * @static
         * @param {CVP.IRequestNormalSignin} message RequestNormalSignin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestNormalSignin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestNormalSignin message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestNormalSignin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestNormalSignin} RequestNormalSignin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestNormalSignin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestNormalSignin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.isLookAtAd = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestNormalSignin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestNormalSignin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestNormalSignin} RequestNormalSignin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestNormalSignin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestNormalSignin message.
         * @function verify
         * @memberof CVP.RequestNormalSignin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestNormalSignin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.isLookAtAd != null && message.hasOwnProperty("isLookAtAd"))
                if (typeof message.isLookAtAd !== "boolean")
                    return "isLookAtAd: boolean expected";
            return null;
        };

        /**
         * Creates a RequestNormalSignin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestNormalSignin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestNormalSignin} RequestNormalSignin
         */
        RequestNormalSignin.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestNormalSignin)
                return object;
            var message = new $root.CVP.RequestNormalSignin();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestNormalSignin.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.isLookAtAd != null)
                message.isLookAtAd = Boolean(object.isLookAtAd);
            return message;
        };

        /**
         * Creates a plain object from a RequestNormalSignin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestNormalSignin
         * @static
         * @param {CVP.RequestNormalSignin} message RequestNormalSignin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestNormalSignin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.isLookAtAd = false;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.isLookAtAd != null && message.hasOwnProperty("isLookAtAd"))
                object.isLookAtAd = message.isLookAtAd;
            return object;
        };

        /**
         * Converts this RequestNormalSignin to JSON.
         * @function toJSON
         * @memberof CVP.RequestNormalSignin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestNormalSignin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestNormalSignin;
    })();

    CVP.RequestNormalSigninResult = (function() {

        /**
         * Properties of a RequestNormalSigninResult.
         * @memberof CVP
         * @interface IRequestNormalSigninResult
         * @property {CVP.ISingleReward|null} [signinReward] RequestNormalSigninResult signinReward
         * @property {CVP.INormalSigninTable|null} [normalSigninTable] RequestNormalSigninResult normalSigninTable
         */

        /**
         * Constructs a new RequestNormalSigninResult.
         * @memberof CVP
         * @classdesc Represents a RequestNormalSigninResult.
         * @implements IRequestNormalSigninResult
         * @constructor
         * @param {CVP.IRequestNormalSigninResult=} [properties] Properties to set
         */
        function RequestNormalSigninResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestNormalSigninResult signinReward.
         * @member {CVP.ISingleReward|null|undefined} signinReward
         * @memberof CVP.RequestNormalSigninResult
         * @instance
         */
        RequestNormalSigninResult.prototype.signinReward = null;

        /**
         * RequestNormalSigninResult normalSigninTable.
         * @member {CVP.INormalSigninTable|null|undefined} normalSigninTable
         * @memberof CVP.RequestNormalSigninResult
         * @instance
         */
        RequestNormalSigninResult.prototype.normalSigninTable = null;

        /**
         * Creates a new RequestNormalSigninResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestNormalSigninResult
         * @static
         * @param {CVP.IRequestNormalSigninResult=} [properties] Properties to set
         * @returns {CVP.RequestNormalSigninResult} RequestNormalSigninResult instance
         */
        RequestNormalSigninResult.create = function create(properties) {
            return new RequestNormalSigninResult(properties);
        };

        /**
         * Encodes the specified RequestNormalSigninResult message. Does not implicitly {@link CVP.RequestNormalSigninResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestNormalSigninResult
         * @static
         * @param {CVP.IRequestNormalSigninResult} message RequestNormalSigninResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestNormalSigninResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.signinReward != null && message.hasOwnProperty("signinReward"))
                $root.CVP.SingleReward.encode(message.signinReward, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.normalSigninTable != null && message.hasOwnProperty("normalSigninTable"))
                $root.CVP.NormalSigninTable.encode(message.normalSigninTable, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestNormalSigninResult message, length delimited. Does not implicitly {@link CVP.RequestNormalSigninResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestNormalSigninResult
         * @static
         * @param {CVP.IRequestNormalSigninResult} message RequestNormalSigninResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestNormalSigninResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestNormalSigninResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestNormalSigninResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestNormalSigninResult} RequestNormalSigninResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestNormalSigninResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestNormalSigninResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.signinReward = $root.CVP.SingleReward.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.normalSigninTable = $root.CVP.NormalSigninTable.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestNormalSigninResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestNormalSigninResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestNormalSigninResult} RequestNormalSigninResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestNormalSigninResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestNormalSigninResult message.
         * @function verify
         * @memberof CVP.RequestNormalSigninResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestNormalSigninResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.signinReward != null && message.hasOwnProperty("signinReward")) {
                var error = $root.CVP.SingleReward.verify(message.signinReward);
                if (error)
                    return "signinReward." + error;
            }
            if (message.normalSigninTable != null && message.hasOwnProperty("normalSigninTable")) {
                var error = $root.CVP.NormalSigninTable.verify(message.normalSigninTable);
                if (error)
                    return "normalSigninTable." + error;
            }
            return null;
        };

        /**
         * Creates a RequestNormalSigninResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestNormalSigninResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestNormalSigninResult} RequestNormalSigninResult
         */
        RequestNormalSigninResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestNormalSigninResult)
                return object;
            var message = new $root.CVP.RequestNormalSigninResult();
            if (object.signinReward != null) {
                if (typeof object.signinReward !== "object")
                    throw TypeError(".CVP.RequestNormalSigninResult.signinReward: object expected");
                message.signinReward = $root.CVP.SingleReward.fromObject(object.signinReward);
            }
            if (object.normalSigninTable != null) {
                if (typeof object.normalSigninTable !== "object")
                    throw TypeError(".CVP.RequestNormalSigninResult.normalSigninTable: object expected");
                message.normalSigninTable = $root.CVP.NormalSigninTable.fromObject(object.normalSigninTable);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestNormalSigninResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestNormalSigninResult
         * @static
         * @param {CVP.RequestNormalSigninResult} message RequestNormalSigninResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestNormalSigninResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.signinReward = null;
                object.normalSigninTable = null;
            }
            if (message.signinReward != null && message.hasOwnProperty("signinReward"))
                object.signinReward = $root.CVP.SingleReward.toObject(message.signinReward, options);
            if (message.normalSigninTable != null && message.hasOwnProperty("normalSigninTable"))
                object.normalSigninTable = $root.CVP.NormalSigninTable.toObject(message.normalSigninTable, options);
            return object;
        };

        /**
         * Converts this RequestNormalSigninResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestNormalSigninResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestNormalSigninResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestNormalSigninResult;
    })();

    CVP.RequestSigninTable = (function() {

        /**
         * Properties of a RequestSigninTable.
         * @memberof CVP
         * @interface IRequestSigninTable
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestSigninTable commonParams
         */

        /**
         * Constructs a new RequestSigninTable.
         * @memberof CVP
         * @classdesc Represents a RequestSigninTable.
         * @implements IRequestSigninTable
         * @constructor
         * @param {CVP.IRequestSigninTable=} [properties] Properties to set
         */
        function RequestSigninTable(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSigninTable commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestSigninTable
         * @instance
         */
        RequestSigninTable.prototype.commonParams = null;

        /**
         * Creates a new RequestSigninTable instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSigninTable
         * @static
         * @param {CVP.IRequestSigninTable=} [properties] Properties to set
         * @returns {CVP.RequestSigninTable} RequestSigninTable instance
         */
        RequestSigninTable.create = function create(properties) {
            return new RequestSigninTable(properties);
        };

        /**
         * Encodes the specified RequestSigninTable message. Does not implicitly {@link CVP.RequestSigninTable.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSigninTable
         * @static
         * @param {CVP.IRequestSigninTable} message RequestSigninTable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSigninTable.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestSigninTable message, length delimited. Does not implicitly {@link CVP.RequestSigninTable.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSigninTable
         * @static
         * @param {CVP.IRequestSigninTable} message RequestSigninTable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSigninTable.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSigninTable message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSigninTable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSigninTable} RequestSigninTable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSigninTable.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSigninTable();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSigninTable message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSigninTable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSigninTable} RequestSigninTable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSigninTable.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSigninTable message.
         * @function verify
         * @memberof CVP.RequestSigninTable
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSigninTable.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestSigninTable message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSigninTable
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSigninTable} RequestSigninTable
         */
        RequestSigninTable.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSigninTable)
                return object;
            var message = new $root.CVP.RequestSigninTable();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestSigninTable.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestSigninTable message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSigninTable
         * @static
         * @param {CVP.RequestSigninTable} message RequestSigninTable
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSigninTable.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestSigninTable to JSON.
         * @function toJSON
         * @memberof CVP.RequestSigninTable
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSigninTable.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSigninTable;
    })();

    CVP.RequestSigninTableResult = (function() {

        /**
         * Properties of a RequestSigninTableResult.
         * @memberof CVP
         * @interface IRequestSigninTableResult
         * @property {CVP.INormalSigninTable|null} [normalSigninTable] RequestSigninTableResult normalSigninTable
         * @property {CVP.IPurchaseSigninTable|null} [purchaseSigninTable] RequestSigninTableResult purchaseSigninTable
         * @property {CVP.SigninType|null} [signinType] RequestSigninTableResult signinType
         */

        /**
         * Constructs a new RequestSigninTableResult.
         * @memberof CVP
         * @classdesc Represents a RequestSigninTableResult.
         * @implements IRequestSigninTableResult
         * @constructor
         * @param {CVP.IRequestSigninTableResult=} [properties] Properties to set
         */
        function RequestSigninTableResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSigninTableResult normalSigninTable.
         * @member {CVP.INormalSigninTable|null|undefined} normalSigninTable
         * @memberof CVP.RequestSigninTableResult
         * @instance
         */
        RequestSigninTableResult.prototype.normalSigninTable = null;

        /**
         * RequestSigninTableResult purchaseSigninTable.
         * @member {CVP.IPurchaseSigninTable|null|undefined} purchaseSigninTable
         * @memberof CVP.RequestSigninTableResult
         * @instance
         */
        RequestSigninTableResult.prototype.purchaseSigninTable = null;

        /**
         * RequestSigninTableResult signinType.
         * @member {CVP.SigninType} signinType
         * @memberof CVP.RequestSigninTableResult
         * @instance
         */
        RequestSigninTableResult.prototype.signinType = 0;

        /**
         * Creates a new RequestSigninTableResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSigninTableResult
         * @static
         * @param {CVP.IRequestSigninTableResult=} [properties] Properties to set
         * @returns {CVP.RequestSigninTableResult} RequestSigninTableResult instance
         */
        RequestSigninTableResult.create = function create(properties) {
            return new RequestSigninTableResult(properties);
        };

        /**
         * Encodes the specified RequestSigninTableResult message. Does not implicitly {@link CVP.RequestSigninTableResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSigninTableResult
         * @static
         * @param {CVP.IRequestSigninTableResult} message RequestSigninTableResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSigninTableResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.normalSigninTable != null && message.hasOwnProperty("normalSigninTable"))
                $root.CVP.NormalSigninTable.encode(message.normalSigninTable, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.purchaseSigninTable != null && message.hasOwnProperty("purchaseSigninTable"))
                $root.CVP.PurchaseSigninTable.encode(message.purchaseSigninTable, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.signinType != null && message.hasOwnProperty("signinType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.signinType);
            return writer;
        };

        /**
         * Encodes the specified RequestSigninTableResult message, length delimited. Does not implicitly {@link CVP.RequestSigninTableResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSigninTableResult
         * @static
         * @param {CVP.IRequestSigninTableResult} message RequestSigninTableResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSigninTableResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSigninTableResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSigninTableResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSigninTableResult} RequestSigninTableResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSigninTableResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSigninTableResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.normalSigninTable = $root.CVP.NormalSigninTable.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.purchaseSigninTable = $root.CVP.PurchaseSigninTable.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.signinType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSigninTableResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSigninTableResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSigninTableResult} RequestSigninTableResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSigninTableResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSigninTableResult message.
         * @function verify
         * @memberof CVP.RequestSigninTableResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSigninTableResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.normalSigninTable != null && message.hasOwnProperty("normalSigninTable")) {
                var error = $root.CVP.NormalSigninTable.verify(message.normalSigninTable);
                if (error)
                    return "normalSigninTable." + error;
            }
            if (message.purchaseSigninTable != null && message.hasOwnProperty("purchaseSigninTable")) {
                var error = $root.CVP.PurchaseSigninTable.verify(message.purchaseSigninTable);
                if (error)
                    return "purchaseSigninTable." + error;
            }
            if (message.signinType != null && message.hasOwnProperty("signinType"))
                switch (message.signinType) {
                default:
                    return "signinType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestSigninTableResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSigninTableResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSigninTableResult} RequestSigninTableResult
         */
        RequestSigninTableResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSigninTableResult)
                return object;
            var message = new $root.CVP.RequestSigninTableResult();
            if (object.normalSigninTable != null) {
                if (typeof object.normalSigninTable !== "object")
                    throw TypeError(".CVP.RequestSigninTableResult.normalSigninTable: object expected");
                message.normalSigninTable = $root.CVP.NormalSigninTable.fromObject(object.normalSigninTable);
            }
            if (object.purchaseSigninTable != null) {
                if (typeof object.purchaseSigninTable !== "object")
                    throw TypeError(".CVP.RequestSigninTableResult.purchaseSigninTable: object expected");
                message.purchaseSigninTable = $root.CVP.PurchaseSigninTable.fromObject(object.purchaseSigninTable);
            }
            switch (object.signinType) {
            case "NON":
            case 0:
                message.signinType = 0;
                break;
            case "NORMAL":
            case 1:
                message.signinType = 1;
                break;
            case "PURCHASE":
            case 2:
                message.signinType = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestSigninTableResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSigninTableResult
         * @static
         * @param {CVP.RequestSigninTableResult} message RequestSigninTableResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSigninTableResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.normalSigninTable = null;
                object.purchaseSigninTable = null;
                object.signinType = options.enums === String ? "NON" : 0;
            }
            if (message.normalSigninTable != null && message.hasOwnProperty("normalSigninTable"))
                object.normalSigninTable = $root.CVP.NormalSigninTable.toObject(message.normalSigninTable, options);
            if (message.purchaseSigninTable != null && message.hasOwnProperty("purchaseSigninTable"))
                object.purchaseSigninTable = $root.CVP.PurchaseSigninTable.toObject(message.purchaseSigninTable, options);
            if (message.signinType != null && message.hasOwnProperty("signinType"))
                object.signinType = options.enums === String ? $root.CVP.SigninType[message.signinType] : message.signinType;
            return object;
        };

        /**
         * Converts this RequestSigninTableResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestSigninTableResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSigninTableResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSigninTableResult;
    })();

    CVP.RequestCollectCumulativeReward = (function() {

        /**
         * Properties of a RequestCollectCumulativeReward.
         * @memberof CVP
         * @interface IRequestCollectCumulativeReward
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestCollectCumulativeReward commonParams
         * @property {number|null} [idx] RequestCollectCumulativeReward idx
         * @property {CVP.SigninType|null} [signinType] RequestCollectCumulativeReward signinType
         */

        /**
         * Constructs a new RequestCollectCumulativeReward.
         * @memberof CVP
         * @classdesc Represents a RequestCollectCumulativeReward.
         * @implements IRequestCollectCumulativeReward
         * @constructor
         * @param {CVP.IRequestCollectCumulativeReward=} [properties] Properties to set
         */
        function RequestCollectCumulativeReward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestCollectCumulativeReward commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestCollectCumulativeReward
         * @instance
         */
        RequestCollectCumulativeReward.prototype.commonParams = null;

        /**
         * RequestCollectCumulativeReward idx.
         * @member {number} idx
         * @memberof CVP.RequestCollectCumulativeReward
         * @instance
         */
        RequestCollectCumulativeReward.prototype.idx = 0;

        /**
         * RequestCollectCumulativeReward signinType.
         * @member {CVP.SigninType} signinType
         * @memberof CVP.RequestCollectCumulativeReward
         * @instance
         */
        RequestCollectCumulativeReward.prototype.signinType = 0;

        /**
         * Creates a new RequestCollectCumulativeReward instance using the specified properties.
         * @function create
         * @memberof CVP.RequestCollectCumulativeReward
         * @static
         * @param {CVP.IRequestCollectCumulativeReward=} [properties] Properties to set
         * @returns {CVP.RequestCollectCumulativeReward} RequestCollectCumulativeReward instance
         */
        RequestCollectCumulativeReward.create = function create(properties) {
            return new RequestCollectCumulativeReward(properties);
        };

        /**
         * Encodes the specified RequestCollectCumulativeReward message. Does not implicitly {@link CVP.RequestCollectCumulativeReward.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestCollectCumulativeReward
         * @static
         * @param {CVP.IRequestCollectCumulativeReward} message RequestCollectCumulativeReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectCumulativeReward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.idx != null && message.hasOwnProperty("idx"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.idx);
            if (message.signinType != null && message.hasOwnProperty("signinType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.signinType);
            return writer;
        };

        /**
         * Encodes the specified RequestCollectCumulativeReward message, length delimited. Does not implicitly {@link CVP.RequestCollectCumulativeReward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestCollectCumulativeReward
         * @static
         * @param {CVP.IRequestCollectCumulativeReward} message RequestCollectCumulativeReward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectCumulativeReward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestCollectCumulativeReward message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestCollectCumulativeReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestCollectCumulativeReward} RequestCollectCumulativeReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectCumulativeReward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestCollectCumulativeReward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.idx = reader.int32();
                    break;
                case 3:
                    message.signinType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestCollectCumulativeReward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestCollectCumulativeReward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestCollectCumulativeReward} RequestCollectCumulativeReward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectCumulativeReward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestCollectCumulativeReward message.
         * @function verify
         * @memberof CVP.RequestCollectCumulativeReward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestCollectCumulativeReward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            if (message.idx != null && message.hasOwnProperty("idx"))
                if (!$util.isInteger(message.idx))
                    return "idx: integer expected";
            if (message.signinType != null && message.hasOwnProperty("signinType"))
                switch (message.signinType) {
                default:
                    return "signinType: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a RequestCollectCumulativeReward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestCollectCumulativeReward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestCollectCumulativeReward} RequestCollectCumulativeReward
         */
        RequestCollectCumulativeReward.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestCollectCumulativeReward)
                return object;
            var message = new $root.CVP.RequestCollectCumulativeReward();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestCollectCumulativeReward.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            if (object.idx != null)
                message.idx = object.idx | 0;
            switch (object.signinType) {
            case "NON":
            case 0:
                message.signinType = 0;
                break;
            case "NORMAL":
            case 1:
                message.signinType = 1;
                break;
            case "PURCHASE":
            case 2:
                message.signinType = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestCollectCumulativeReward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestCollectCumulativeReward
         * @static
         * @param {CVP.RequestCollectCumulativeReward} message RequestCollectCumulativeReward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestCollectCumulativeReward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.commonParams = null;
                object.idx = 0;
                object.signinType = options.enums === String ? "NON" : 0;
            }
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            if (message.idx != null && message.hasOwnProperty("idx"))
                object.idx = message.idx;
            if (message.signinType != null && message.hasOwnProperty("signinType"))
                object.signinType = options.enums === String ? $root.CVP.SigninType[message.signinType] : message.signinType;
            return object;
        };

        /**
         * Converts this RequestCollectCumulativeReward to JSON.
         * @function toJSON
         * @memberof CVP.RequestCollectCumulativeReward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestCollectCumulativeReward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestCollectCumulativeReward;
    })();

    CVP.RequestCollectCumulativeRewardResult = (function() {

        /**
         * Properties of a RequestCollectCumulativeRewardResult.
         * @memberof CVP
         * @interface IRequestCollectCumulativeRewardResult
         * @property {Array.<CVP.ISingleReward>|null} [singleRewardList] RequestCollectCumulativeRewardResult singleRewardList
         * @property {Array.<CVP.ISigninCumulativeReward>|null} [signinCumulativeRewardList] RequestCollectCumulativeRewardResult signinCumulativeRewardList
         * @property {number|null} [cumulativeRewardProgress] RequestCollectCumulativeRewardResult cumulativeRewardProgress
         */

        /**
         * Constructs a new RequestCollectCumulativeRewardResult.
         * @memberof CVP
         * @classdesc Represents a RequestCollectCumulativeRewardResult.
         * @implements IRequestCollectCumulativeRewardResult
         * @constructor
         * @param {CVP.IRequestCollectCumulativeRewardResult=} [properties] Properties to set
         */
        function RequestCollectCumulativeRewardResult(properties) {
            this.singleRewardList = [];
            this.signinCumulativeRewardList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestCollectCumulativeRewardResult singleRewardList.
         * @member {Array.<CVP.ISingleReward>} singleRewardList
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @instance
         */
        RequestCollectCumulativeRewardResult.prototype.singleRewardList = $util.emptyArray;

        /**
         * RequestCollectCumulativeRewardResult signinCumulativeRewardList.
         * @member {Array.<CVP.ISigninCumulativeReward>} signinCumulativeRewardList
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @instance
         */
        RequestCollectCumulativeRewardResult.prototype.signinCumulativeRewardList = $util.emptyArray;

        /**
         * RequestCollectCumulativeRewardResult cumulativeRewardProgress.
         * @member {number} cumulativeRewardProgress
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @instance
         */
        RequestCollectCumulativeRewardResult.prototype.cumulativeRewardProgress = 0;

        /**
         * Creates a new RequestCollectCumulativeRewardResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @static
         * @param {CVP.IRequestCollectCumulativeRewardResult=} [properties] Properties to set
         * @returns {CVP.RequestCollectCumulativeRewardResult} RequestCollectCumulativeRewardResult instance
         */
        RequestCollectCumulativeRewardResult.create = function create(properties) {
            return new RequestCollectCumulativeRewardResult(properties);
        };

        /**
         * Encodes the specified RequestCollectCumulativeRewardResult message. Does not implicitly {@link CVP.RequestCollectCumulativeRewardResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @static
         * @param {CVP.IRequestCollectCumulativeRewardResult} message RequestCollectCumulativeRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectCumulativeRewardResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.singleRewardList != null && message.singleRewardList.length)
                for (var i = 0; i < message.singleRewardList.length; ++i)
                    $root.CVP.SingleReward.encode(message.singleRewardList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.signinCumulativeRewardList != null && message.signinCumulativeRewardList.length)
                for (var i = 0; i < message.signinCumulativeRewardList.length; ++i)
                    $root.CVP.SigninCumulativeReward.encode(message.signinCumulativeRewardList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.cumulativeRewardProgress != null && message.hasOwnProperty("cumulativeRewardProgress"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cumulativeRewardProgress);
            return writer;
        };

        /**
         * Encodes the specified RequestCollectCumulativeRewardResult message, length delimited. Does not implicitly {@link CVP.RequestCollectCumulativeRewardResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @static
         * @param {CVP.IRequestCollectCumulativeRewardResult} message RequestCollectCumulativeRewardResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestCollectCumulativeRewardResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestCollectCumulativeRewardResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestCollectCumulativeRewardResult} RequestCollectCumulativeRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectCumulativeRewardResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestCollectCumulativeRewardResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.singleRewardList && message.singleRewardList.length))
                        message.singleRewardList = [];
                    message.singleRewardList.push($root.CVP.SingleReward.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.signinCumulativeRewardList && message.signinCumulativeRewardList.length))
                        message.signinCumulativeRewardList = [];
                    message.signinCumulativeRewardList.push($root.CVP.SigninCumulativeReward.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.cumulativeRewardProgress = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestCollectCumulativeRewardResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestCollectCumulativeRewardResult} RequestCollectCumulativeRewardResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestCollectCumulativeRewardResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestCollectCumulativeRewardResult message.
         * @function verify
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestCollectCumulativeRewardResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.singleRewardList != null && message.hasOwnProperty("singleRewardList")) {
                if (!Array.isArray(message.singleRewardList))
                    return "singleRewardList: array expected";
                for (var i = 0; i < message.singleRewardList.length; ++i) {
                    var error = $root.CVP.SingleReward.verify(message.singleRewardList[i]);
                    if (error)
                        return "singleRewardList." + error;
                }
            }
            if (message.signinCumulativeRewardList != null && message.hasOwnProperty("signinCumulativeRewardList")) {
                if (!Array.isArray(message.signinCumulativeRewardList))
                    return "signinCumulativeRewardList: array expected";
                for (var i = 0; i < message.signinCumulativeRewardList.length; ++i) {
                    var error = $root.CVP.SigninCumulativeReward.verify(message.signinCumulativeRewardList[i]);
                    if (error)
                        return "signinCumulativeRewardList." + error;
                }
            }
            if (message.cumulativeRewardProgress != null && message.hasOwnProperty("cumulativeRewardProgress"))
                if (!$util.isInteger(message.cumulativeRewardProgress))
                    return "cumulativeRewardProgress: integer expected";
            return null;
        };

        /**
         * Creates a RequestCollectCumulativeRewardResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestCollectCumulativeRewardResult} RequestCollectCumulativeRewardResult
         */
        RequestCollectCumulativeRewardResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestCollectCumulativeRewardResult)
                return object;
            var message = new $root.CVP.RequestCollectCumulativeRewardResult();
            if (object.singleRewardList) {
                if (!Array.isArray(object.singleRewardList))
                    throw TypeError(".CVP.RequestCollectCumulativeRewardResult.singleRewardList: array expected");
                message.singleRewardList = [];
                for (var i = 0; i < object.singleRewardList.length; ++i) {
                    if (typeof object.singleRewardList[i] !== "object")
                        throw TypeError(".CVP.RequestCollectCumulativeRewardResult.singleRewardList: object expected");
                    message.singleRewardList[i] = $root.CVP.SingleReward.fromObject(object.singleRewardList[i]);
                }
            }
            if (object.signinCumulativeRewardList) {
                if (!Array.isArray(object.signinCumulativeRewardList))
                    throw TypeError(".CVP.RequestCollectCumulativeRewardResult.signinCumulativeRewardList: array expected");
                message.signinCumulativeRewardList = [];
                for (var i = 0; i < object.signinCumulativeRewardList.length; ++i) {
                    if (typeof object.signinCumulativeRewardList[i] !== "object")
                        throw TypeError(".CVP.RequestCollectCumulativeRewardResult.signinCumulativeRewardList: object expected");
                    message.signinCumulativeRewardList[i] = $root.CVP.SigninCumulativeReward.fromObject(object.signinCumulativeRewardList[i]);
                }
            }
            if (object.cumulativeRewardProgress != null)
                message.cumulativeRewardProgress = object.cumulativeRewardProgress | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestCollectCumulativeRewardResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @static
         * @param {CVP.RequestCollectCumulativeRewardResult} message RequestCollectCumulativeRewardResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestCollectCumulativeRewardResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.singleRewardList = [];
                object.signinCumulativeRewardList = [];
            }
            if (options.defaults)
                object.cumulativeRewardProgress = 0;
            if (message.singleRewardList && message.singleRewardList.length) {
                object.singleRewardList = [];
                for (var j = 0; j < message.singleRewardList.length; ++j)
                    object.singleRewardList[j] = $root.CVP.SingleReward.toObject(message.singleRewardList[j], options);
            }
            if (message.signinCumulativeRewardList && message.signinCumulativeRewardList.length) {
                object.signinCumulativeRewardList = [];
                for (var j = 0; j < message.signinCumulativeRewardList.length; ++j)
                    object.signinCumulativeRewardList[j] = $root.CVP.SigninCumulativeReward.toObject(message.signinCumulativeRewardList[j], options);
            }
            if (message.cumulativeRewardProgress != null && message.hasOwnProperty("cumulativeRewardProgress"))
                object.cumulativeRewardProgress = message.cumulativeRewardProgress;
            return object;
        };

        /**
         * Converts this RequestCollectCumulativeRewardResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestCollectCumulativeRewardResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestCollectCumulativeRewardResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestCollectCumulativeRewardResult;
    })();

    CVP.PurchaseSigninTable = (function() {

        /**
         * Properties of a PurchaseSigninTable.
         * @memberof CVP
         * @interface IPurchaseSigninTable
         * @property {Array.<CVP.IPurchaseSigninDaily>|null} [purchaseSigninDailyList] PurchaseSigninTable purchaseSigninDailyList
         * @property {Array.<CVP.ISigninCumulativeReward>|null} [signinCumulativeRewardList] PurchaseSigninTable signinCumulativeRewardList
         * @property {number|null} [cumulativeRewardProgress] PurchaseSigninTable cumulativeRewardProgress
         */

        /**
         * Constructs a new PurchaseSigninTable.
         * @memberof CVP
         * @classdesc Represents a PurchaseSigninTable.
         * @implements IPurchaseSigninTable
         * @constructor
         * @param {CVP.IPurchaseSigninTable=} [properties] Properties to set
         */
        function PurchaseSigninTable(properties) {
            this.purchaseSigninDailyList = [];
            this.signinCumulativeRewardList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PurchaseSigninTable purchaseSigninDailyList.
         * @member {Array.<CVP.IPurchaseSigninDaily>} purchaseSigninDailyList
         * @memberof CVP.PurchaseSigninTable
         * @instance
         */
        PurchaseSigninTable.prototype.purchaseSigninDailyList = $util.emptyArray;

        /**
         * PurchaseSigninTable signinCumulativeRewardList.
         * @member {Array.<CVP.ISigninCumulativeReward>} signinCumulativeRewardList
         * @memberof CVP.PurchaseSigninTable
         * @instance
         */
        PurchaseSigninTable.prototype.signinCumulativeRewardList = $util.emptyArray;

        /**
         * PurchaseSigninTable cumulativeRewardProgress.
         * @member {number} cumulativeRewardProgress
         * @memberof CVP.PurchaseSigninTable
         * @instance
         */
        PurchaseSigninTable.prototype.cumulativeRewardProgress = 0;

        /**
         * Creates a new PurchaseSigninTable instance using the specified properties.
         * @function create
         * @memberof CVP.PurchaseSigninTable
         * @static
         * @param {CVP.IPurchaseSigninTable=} [properties] Properties to set
         * @returns {CVP.PurchaseSigninTable} PurchaseSigninTable instance
         */
        PurchaseSigninTable.create = function create(properties) {
            return new PurchaseSigninTable(properties);
        };

        /**
         * Encodes the specified PurchaseSigninTable message. Does not implicitly {@link CVP.PurchaseSigninTable.verify|verify} messages.
         * @function encode
         * @memberof CVP.PurchaseSigninTable
         * @static
         * @param {CVP.IPurchaseSigninTable} message PurchaseSigninTable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PurchaseSigninTable.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.purchaseSigninDailyList != null && message.purchaseSigninDailyList.length)
                for (var i = 0; i < message.purchaseSigninDailyList.length; ++i)
                    $root.CVP.PurchaseSigninDaily.encode(message.purchaseSigninDailyList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.signinCumulativeRewardList != null && message.signinCumulativeRewardList.length)
                for (var i = 0; i < message.signinCumulativeRewardList.length; ++i)
                    $root.CVP.SigninCumulativeReward.encode(message.signinCumulativeRewardList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.cumulativeRewardProgress != null && message.hasOwnProperty("cumulativeRewardProgress"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cumulativeRewardProgress);
            return writer;
        };

        /**
         * Encodes the specified PurchaseSigninTable message, length delimited. Does not implicitly {@link CVP.PurchaseSigninTable.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.PurchaseSigninTable
         * @static
         * @param {CVP.IPurchaseSigninTable} message PurchaseSigninTable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PurchaseSigninTable.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PurchaseSigninTable message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.PurchaseSigninTable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.PurchaseSigninTable} PurchaseSigninTable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PurchaseSigninTable.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.PurchaseSigninTable();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.purchaseSigninDailyList && message.purchaseSigninDailyList.length))
                        message.purchaseSigninDailyList = [];
                    message.purchaseSigninDailyList.push($root.CVP.PurchaseSigninDaily.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.signinCumulativeRewardList && message.signinCumulativeRewardList.length))
                        message.signinCumulativeRewardList = [];
                    message.signinCumulativeRewardList.push($root.CVP.SigninCumulativeReward.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.cumulativeRewardProgress = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PurchaseSigninTable message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.PurchaseSigninTable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.PurchaseSigninTable} PurchaseSigninTable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PurchaseSigninTable.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PurchaseSigninTable message.
         * @function verify
         * @memberof CVP.PurchaseSigninTable
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PurchaseSigninTable.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.purchaseSigninDailyList != null && message.hasOwnProperty("purchaseSigninDailyList")) {
                if (!Array.isArray(message.purchaseSigninDailyList))
                    return "purchaseSigninDailyList: array expected";
                for (var i = 0; i < message.purchaseSigninDailyList.length; ++i) {
                    var error = $root.CVP.PurchaseSigninDaily.verify(message.purchaseSigninDailyList[i]);
                    if (error)
                        return "purchaseSigninDailyList." + error;
                }
            }
            if (message.signinCumulativeRewardList != null && message.hasOwnProperty("signinCumulativeRewardList")) {
                if (!Array.isArray(message.signinCumulativeRewardList))
                    return "signinCumulativeRewardList: array expected";
                for (var i = 0; i < message.signinCumulativeRewardList.length; ++i) {
                    var error = $root.CVP.SigninCumulativeReward.verify(message.signinCumulativeRewardList[i]);
                    if (error)
                        return "signinCumulativeRewardList." + error;
                }
            }
            if (message.cumulativeRewardProgress != null && message.hasOwnProperty("cumulativeRewardProgress"))
                if (!$util.isInteger(message.cumulativeRewardProgress))
                    return "cumulativeRewardProgress: integer expected";
            return null;
        };

        /**
         * Creates a PurchaseSigninTable message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.PurchaseSigninTable
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.PurchaseSigninTable} PurchaseSigninTable
         */
        PurchaseSigninTable.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.PurchaseSigninTable)
                return object;
            var message = new $root.CVP.PurchaseSigninTable();
            if (object.purchaseSigninDailyList) {
                if (!Array.isArray(object.purchaseSigninDailyList))
                    throw TypeError(".CVP.PurchaseSigninTable.purchaseSigninDailyList: array expected");
                message.purchaseSigninDailyList = [];
                for (var i = 0; i < object.purchaseSigninDailyList.length; ++i) {
                    if (typeof object.purchaseSigninDailyList[i] !== "object")
                        throw TypeError(".CVP.PurchaseSigninTable.purchaseSigninDailyList: object expected");
                    message.purchaseSigninDailyList[i] = $root.CVP.PurchaseSigninDaily.fromObject(object.purchaseSigninDailyList[i]);
                }
            }
            if (object.signinCumulativeRewardList) {
                if (!Array.isArray(object.signinCumulativeRewardList))
                    throw TypeError(".CVP.PurchaseSigninTable.signinCumulativeRewardList: array expected");
                message.signinCumulativeRewardList = [];
                for (var i = 0; i < object.signinCumulativeRewardList.length; ++i) {
                    if (typeof object.signinCumulativeRewardList[i] !== "object")
                        throw TypeError(".CVP.PurchaseSigninTable.signinCumulativeRewardList: object expected");
                    message.signinCumulativeRewardList[i] = $root.CVP.SigninCumulativeReward.fromObject(object.signinCumulativeRewardList[i]);
                }
            }
            if (object.cumulativeRewardProgress != null)
                message.cumulativeRewardProgress = object.cumulativeRewardProgress | 0;
            return message;
        };

        /**
         * Creates a plain object from a PurchaseSigninTable message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.PurchaseSigninTable
         * @static
         * @param {CVP.PurchaseSigninTable} message PurchaseSigninTable
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PurchaseSigninTable.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.purchaseSigninDailyList = [];
                object.signinCumulativeRewardList = [];
            }
            if (options.defaults)
                object.cumulativeRewardProgress = 0;
            if (message.purchaseSigninDailyList && message.purchaseSigninDailyList.length) {
                object.purchaseSigninDailyList = [];
                for (var j = 0; j < message.purchaseSigninDailyList.length; ++j)
                    object.purchaseSigninDailyList[j] = $root.CVP.PurchaseSigninDaily.toObject(message.purchaseSigninDailyList[j], options);
            }
            if (message.signinCumulativeRewardList && message.signinCumulativeRewardList.length) {
                object.signinCumulativeRewardList = [];
                for (var j = 0; j < message.signinCumulativeRewardList.length; ++j)
                    object.signinCumulativeRewardList[j] = $root.CVP.SigninCumulativeReward.toObject(message.signinCumulativeRewardList[j], options);
            }
            if (message.cumulativeRewardProgress != null && message.hasOwnProperty("cumulativeRewardProgress"))
                object.cumulativeRewardProgress = message.cumulativeRewardProgress;
            return object;
        };

        /**
         * Converts this PurchaseSigninTable to JSON.
         * @function toJSON
         * @memberof CVP.PurchaseSigninTable
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PurchaseSigninTable.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PurchaseSigninTable;
    })();

    CVP.PurchaseSigninDaily = (function() {

        /**
         * Properties of a PurchaseSigninDaily.
         * @memberof CVP
         * @interface IPurchaseSigninDaily
         * @property {CVP.SigninState} state PurchaseSigninDaily state
         * @property {Array.<CVP.ISingleReward>|null} [singleRewardList] PurchaseSigninDaily singleRewardList
         * @property {number} progress PurchaseSigninDaily progress
         * @property {number} target PurchaseSigninDaily target
         */

        /**
         * Constructs a new PurchaseSigninDaily.
         * @memberof CVP
         * @classdesc Represents a PurchaseSigninDaily.
         * @implements IPurchaseSigninDaily
         * @constructor
         * @param {CVP.IPurchaseSigninDaily=} [properties] Properties to set
         */
        function PurchaseSigninDaily(properties) {
            this.singleRewardList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PurchaseSigninDaily state.
         * @member {CVP.SigninState} state
         * @memberof CVP.PurchaseSigninDaily
         * @instance
         */
        PurchaseSigninDaily.prototype.state = 0;

        /**
         * PurchaseSigninDaily singleRewardList.
         * @member {Array.<CVP.ISingleReward>} singleRewardList
         * @memberof CVP.PurchaseSigninDaily
         * @instance
         */
        PurchaseSigninDaily.prototype.singleRewardList = $util.emptyArray;

        /**
         * PurchaseSigninDaily progress.
         * @member {number} progress
         * @memberof CVP.PurchaseSigninDaily
         * @instance
         */
        PurchaseSigninDaily.prototype.progress = 0;

        /**
         * PurchaseSigninDaily target.
         * @member {number} target
         * @memberof CVP.PurchaseSigninDaily
         * @instance
         */
        PurchaseSigninDaily.prototype.target = 0;

        /**
         * Creates a new PurchaseSigninDaily instance using the specified properties.
         * @function create
         * @memberof CVP.PurchaseSigninDaily
         * @static
         * @param {CVP.IPurchaseSigninDaily=} [properties] Properties to set
         * @returns {CVP.PurchaseSigninDaily} PurchaseSigninDaily instance
         */
        PurchaseSigninDaily.create = function create(properties) {
            return new PurchaseSigninDaily(properties);
        };

        /**
         * Encodes the specified PurchaseSigninDaily message. Does not implicitly {@link CVP.PurchaseSigninDaily.verify|verify} messages.
         * @function encode
         * @memberof CVP.PurchaseSigninDaily
         * @static
         * @param {CVP.IPurchaseSigninDaily} message PurchaseSigninDaily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PurchaseSigninDaily.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
            if (message.singleRewardList != null && message.singleRewardList.length)
                for (var i = 0; i < message.singleRewardList.length; ++i)
                    $root.CVP.SingleReward.encode(message.singleRewardList[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            writer.uint32(/* id 4, wireType 1 =*/33).double(message.progress);
            writer.uint32(/* id 5, wireType 1 =*/41).double(message.target);
            return writer;
        };

        /**
         * Encodes the specified PurchaseSigninDaily message, length delimited. Does not implicitly {@link CVP.PurchaseSigninDaily.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.PurchaseSigninDaily
         * @static
         * @param {CVP.IPurchaseSigninDaily} message PurchaseSigninDaily message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PurchaseSigninDaily.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PurchaseSigninDaily message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.PurchaseSigninDaily
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.PurchaseSigninDaily} PurchaseSigninDaily
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PurchaseSigninDaily.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.PurchaseSigninDaily();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.state = reader.int32();
                    break;
                case 3:
                    if (!(message.singleRewardList && message.singleRewardList.length))
                        message.singleRewardList = [];
                    message.singleRewardList.push($root.CVP.SingleReward.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.progress = reader.double();
                    break;
                case 5:
                    message.target = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("state"))
                throw $util.ProtocolError("missing required 'state'", { instance: message });
            if (!message.hasOwnProperty("progress"))
                throw $util.ProtocolError("missing required 'progress'", { instance: message });
            if (!message.hasOwnProperty("target"))
                throw $util.ProtocolError("missing required 'target'", { instance: message });
            return message;
        };

        /**
         * Decodes a PurchaseSigninDaily message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.PurchaseSigninDaily
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.PurchaseSigninDaily} PurchaseSigninDaily
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PurchaseSigninDaily.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PurchaseSigninDaily message.
         * @function verify
         * @memberof CVP.PurchaseSigninDaily
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PurchaseSigninDaily.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
            if (message.singleRewardList != null && message.hasOwnProperty("singleRewardList")) {
                if (!Array.isArray(message.singleRewardList))
                    return "singleRewardList: array expected";
                for (var i = 0; i < message.singleRewardList.length; ++i) {
                    var error = $root.CVP.SingleReward.verify(message.singleRewardList[i]);
                    if (error)
                        return "singleRewardList." + error;
                }
            }
            if (typeof message.progress !== "number")
                return "progress: number expected";
            if (typeof message.target !== "number")
                return "target: number expected";
            return null;
        };

        /**
         * Creates a PurchaseSigninDaily message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.PurchaseSigninDaily
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.PurchaseSigninDaily} PurchaseSigninDaily
         */
        PurchaseSigninDaily.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.PurchaseSigninDaily)
                return object;
            var message = new $root.CVP.PurchaseSigninDaily();
            switch (object.state) {
            case "NON":
            case 0:
                message.state = 0;
                break;
            case "EXPIRED":
            case 1:
                message.state = 1;
                break;
            case "COMPLETED":
            case 2:
                message.state = 2;
                break;
            case "UNOPEN":
            case 3:
                message.state = 3;
                break;
            case "OPENED":
            case 4:
                message.state = 4;
                break;
            }
            if (object.singleRewardList) {
                if (!Array.isArray(object.singleRewardList))
                    throw TypeError(".CVP.PurchaseSigninDaily.singleRewardList: array expected");
                message.singleRewardList = [];
                for (var i = 0; i < object.singleRewardList.length; ++i) {
                    if (typeof object.singleRewardList[i] !== "object")
                        throw TypeError(".CVP.PurchaseSigninDaily.singleRewardList: object expected");
                    message.singleRewardList[i] = $root.CVP.SingleReward.fromObject(object.singleRewardList[i]);
                }
            }
            if (object.progress != null)
                message.progress = Number(object.progress);
            if (object.target != null)
                message.target = Number(object.target);
            return message;
        };

        /**
         * Creates a plain object from a PurchaseSigninDaily message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.PurchaseSigninDaily
         * @static
         * @param {CVP.PurchaseSigninDaily} message PurchaseSigninDaily
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PurchaseSigninDaily.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.singleRewardList = [];
            if (options.defaults) {
                object.state = options.enums === String ? "NON" : 0;
                object.progress = 0;
                object.target = 0;
            }
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = options.enums === String ? $root.CVP.SigninState[message.state] : message.state;
            if (message.singleRewardList && message.singleRewardList.length) {
                object.singleRewardList = [];
                for (var j = 0; j < message.singleRewardList.length; ++j)
                    object.singleRewardList[j] = $root.CVP.SingleReward.toObject(message.singleRewardList[j], options);
            }
            if (message.progress != null && message.hasOwnProperty("progress"))
                object.progress = options.json && !isFinite(message.progress) ? String(message.progress) : message.progress;
            if (message.target != null && message.hasOwnProperty("target"))
                object.target = options.json && !isFinite(message.target) ? String(message.target) : message.target;
            return object;
        };

        /**
         * Converts this PurchaseSigninDaily to JSON.
         * @function toJSON
         * @memberof CVP.PurchaseSigninDaily
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PurchaseSigninDaily.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PurchaseSigninDaily;
    })();

    CVP.RequestPurchaseSignin = (function() {

        /**
         * Properties of a RequestPurchaseSignin.
         * @memberof CVP
         * @interface IRequestPurchaseSignin
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestPurchaseSignin commonParams
         */

        /**
         * Constructs a new RequestPurchaseSignin.
         * @memberof CVP
         * @classdesc Represents a RequestPurchaseSignin.
         * @implements IRequestPurchaseSignin
         * @constructor
         * @param {CVP.IRequestPurchaseSignin=} [properties] Properties to set
         */
        function RequestPurchaseSignin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPurchaseSignin commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestPurchaseSignin
         * @instance
         */
        RequestPurchaseSignin.prototype.commonParams = null;

        /**
         * Creates a new RequestPurchaseSignin instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPurchaseSignin
         * @static
         * @param {CVP.IRequestPurchaseSignin=} [properties] Properties to set
         * @returns {CVP.RequestPurchaseSignin} RequestPurchaseSignin instance
         */
        RequestPurchaseSignin.create = function create(properties) {
            return new RequestPurchaseSignin(properties);
        };

        /**
         * Encodes the specified RequestPurchaseSignin message. Does not implicitly {@link CVP.RequestPurchaseSignin.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPurchaseSignin
         * @static
         * @param {CVP.IRequestPurchaseSignin} message RequestPurchaseSignin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPurchaseSignin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPurchaseSignin message, length delimited. Does not implicitly {@link CVP.RequestPurchaseSignin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPurchaseSignin
         * @static
         * @param {CVP.IRequestPurchaseSignin} message RequestPurchaseSignin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPurchaseSignin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPurchaseSignin message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPurchaseSignin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPurchaseSignin} RequestPurchaseSignin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPurchaseSignin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPurchaseSignin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPurchaseSignin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPurchaseSignin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPurchaseSignin} RequestPurchaseSignin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPurchaseSignin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPurchaseSignin message.
         * @function verify
         * @memberof CVP.RequestPurchaseSignin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPurchaseSignin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestPurchaseSignin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPurchaseSignin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPurchaseSignin} RequestPurchaseSignin
         */
        RequestPurchaseSignin.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPurchaseSignin)
                return object;
            var message = new $root.CVP.RequestPurchaseSignin();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestPurchaseSignin.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPurchaseSignin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPurchaseSignin
         * @static
         * @param {CVP.RequestPurchaseSignin} message RequestPurchaseSignin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPurchaseSignin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestPurchaseSignin to JSON.
         * @function toJSON
         * @memberof CVP.RequestPurchaseSignin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPurchaseSignin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPurchaseSignin;
    })();

    CVP.RequestPurchaseSigninResult = (function() {

        /**
         * Properties of a RequestPurchaseSigninResult.
         * @memberof CVP
         * @interface IRequestPurchaseSigninResult
         * @property {Array.<CVP.ISingleReward>|null} [singleRewardList] RequestPurchaseSigninResult singleRewardList
         * @property {CVP.IPurchaseSigninTable|null} [purchaseSigninTable] RequestPurchaseSigninResult purchaseSigninTable
         */

        /**
         * Constructs a new RequestPurchaseSigninResult.
         * @memberof CVP
         * @classdesc Represents a RequestPurchaseSigninResult.
         * @implements IRequestPurchaseSigninResult
         * @constructor
         * @param {CVP.IRequestPurchaseSigninResult=} [properties] Properties to set
         */
        function RequestPurchaseSigninResult(properties) {
            this.singleRewardList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestPurchaseSigninResult singleRewardList.
         * @member {Array.<CVP.ISingleReward>} singleRewardList
         * @memberof CVP.RequestPurchaseSigninResult
         * @instance
         */
        RequestPurchaseSigninResult.prototype.singleRewardList = $util.emptyArray;

        /**
         * RequestPurchaseSigninResult purchaseSigninTable.
         * @member {CVP.IPurchaseSigninTable|null|undefined} purchaseSigninTable
         * @memberof CVP.RequestPurchaseSigninResult
         * @instance
         */
        RequestPurchaseSigninResult.prototype.purchaseSigninTable = null;

        /**
         * Creates a new RequestPurchaseSigninResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestPurchaseSigninResult
         * @static
         * @param {CVP.IRequestPurchaseSigninResult=} [properties] Properties to set
         * @returns {CVP.RequestPurchaseSigninResult} RequestPurchaseSigninResult instance
         */
        RequestPurchaseSigninResult.create = function create(properties) {
            return new RequestPurchaseSigninResult(properties);
        };

        /**
         * Encodes the specified RequestPurchaseSigninResult message. Does not implicitly {@link CVP.RequestPurchaseSigninResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestPurchaseSigninResult
         * @static
         * @param {CVP.IRequestPurchaseSigninResult} message RequestPurchaseSigninResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPurchaseSigninResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.singleRewardList != null && message.singleRewardList.length)
                for (var i = 0; i < message.singleRewardList.length; ++i)
                    $root.CVP.SingleReward.encode(message.singleRewardList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.purchaseSigninTable != null && message.hasOwnProperty("purchaseSigninTable"))
                $root.CVP.PurchaseSigninTable.encode(message.purchaseSigninTable, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestPurchaseSigninResult message, length delimited. Does not implicitly {@link CVP.RequestPurchaseSigninResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestPurchaseSigninResult
         * @static
         * @param {CVP.IRequestPurchaseSigninResult} message RequestPurchaseSigninResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestPurchaseSigninResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestPurchaseSigninResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestPurchaseSigninResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestPurchaseSigninResult} RequestPurchaseSigninResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPurchaseSigninResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestPurchaseSigninResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.singleRewardList && message.singleRewardList.length))
                        message.singleRewardList = [];
                    message.singleRewardList.push($root.CVP.SingleReward.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.purchaseSigninTable = $root.CVP.PurchaseSigninTable.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestPurchaseSigninResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestPurchaseSigninResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestPurchaseSigninResult} RequestPurchaseSigninResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestPurchaseSigninResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestPurchaseSigninResult message.
         * @function verify
         * @memberof CVP.RequestPurchaseSigninResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestPurchaseSigninResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.singleRewardList != null && message.hasOwnProperty("singleRewardList")) {
                if (!Array.isArray(message.singleRewardList))
                    return "singleRewardList: array expected";
                for (var i = 0; i < message.singleRewardList.length; ++i) {
                    var error = $root.CVP.SingleReward.verify(message.singleRewardList[i]);
                    if (error)
                        return "singleRewardList." + error;
                }
            }
            if (message.purchaseSigninTable != null && message.hasOwnProperty("purchaseSigninTable")) {
                var error = $root.CVP.PurchaseSigninTable.verify(message.purchaseSigninTable);
                if (error)
                    return "purchaseSigninTable." + error;
            }
            return null;
        };

        /**
         * Creates a RequestPurchaseSigninResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestPurchaseSigninResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestPurchaseSigninResult} RequestPurchaseSigninResult
         */
        RequestPurchaseSigninResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestPurchaseSigninResult)
                return object;
            var message = new $root.CVP.RequestPurchaseSigninResult();
            if (object.singleRewardList) {
                if (!Array.isArray(object.singleRewardList))
                    throw TypeError(".CVP.RequestPurchaseSigninResult.singleRewardList: array expected");
                message.singleRewardList = [];
                for (var i = 0; i < object.singleRewardList.length; ++i) {
                    if (typeof object.singleRewardList[i] !== "object")
                        throw TypeError(".CVP.RequestPurchaseSigninResult.singleRewardList: object expected");
                    message.singleRewardList[i] = $root.CVP.SingleReward.fromObject(object.singleRewardList[i]);
                }
            }
            if (object.purchaseSigninTable != null) {
                if (typeof object.purchaseSigninTable !== "object")
                    throw TypeError(".CVP.RequestPurchaseSigninResult.purchaseSigninTable: object expected");
                message.purchaseSigninTable = $root.CVP.PurchaseSigninTable.fromObject(object.purchaseSigninTable);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestPurchaseSigninResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestPurchaseSigninResult
         * @static
         * @param {CVP.RequestPurchaseSigninResult} message RequestPurchaseSigninResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestPurchaseSigninResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.singleRewardList = [];
            if (options.defaults)
                object.purchaseSigninTable = null;
            if (message.singleRewardList && message.singleRewardList.length) {
                object.singleRewardList = [];
                for (var j = 0; j < message.singleRewardList.length; ++j)
                    object.singleRewardList[j] = $root.CVP.SingleReward.toObject(message.singleRewardList[j], options);
            }
            if (message.purchaseSigninTable != null && message.hasOwnProperty("purchaseSigninTable"))
                object.purchaseSigninTable = $root.CVP.PurchaseSigninTable.toObject(message.purchaseSigninTable, options);
            return object;
        };

        /**
         * Converts this RequestPurchaseSigninResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestPurchaseSigninResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestPurchaseSigninResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestPurchaseSigninResult;
    })();

    CVP.UpdateSign = (function() {

        /**
         * Properties of an UpdateSign.
         * @memberof CVP
         * @interface IUpdateSign
         * @property {number|null} [finish] UpdateSign finish
         * @property {boolean|null} [normalRed] UpdateSign normalRed
         * @property {boolean|null} [purhaseRed] UpdateSign purhaseRed
         */

        /**
         * Constructs a new UpdateSign.
         * @memberof CVP
         * @classdesc Represents an UpdateSign.
         * @implements IUpdateSign
         * @constructor
         * @param {CVP.IUpdateSign=} [properties] Properties to set
         */
        function UpdateSign(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UpdateSign finish.
         * @member {number} finish
         * @memberof CVP.UpdateSign
         * @instance
         */
        UpdateSign.prototype.finish = 0;

        /**
         * UpdateSign normalRed.
         * @member {boolean} normalRed
         * @memberof CVP.UpdateSign
         * @instance
         */
        UpdateSign.prototype.normalRed = false;

        /**
         * UpdateSign purhaseRed.
         * @member {boolean} purhaseRed
         * @memberof CVP.UpdateSign
         * @instance
         */
        UpdateSign.prototype.purhaseRed = false;

        /**
         * Creates a new UpdateSign instance using the specified properties.
         * @function create
         * @memberof CVP.UpdateSign
         * @static
         * @param {CVP.IUpdateSign=} [properties] Properties to set
         * @returns {CVP.UpdateSign} UpdateSign instance
         */
        UpdateSign.create = function create(properties) {
            return new UpdateSign(properties);
        };

        /**
         * Encodes the specified UpdateSign message. Does not implicitly {@link CVP.UpdateSign.verify|verify} messages.
         * @function encode
         * @memberof CVP.UpdateSign
         * @static
         * @param {CVP.IUpdateSign} message UpdateSign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateSign.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.finish != null && message.hasOwnProperty("finish"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.finish);
            if (message.normalRed != null && message.hasOwnProperty("normalRed"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.normalRed);
            if (message.purhaseRed != null && message.hasOwnProperty("purhaseRed"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.purhaseRed);
            return writer;
        };

        /**
         * Encodes the specified UpdateSign message, length delimited. Does not implicitly {@link CVP.UpdateSign.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.UpdateSign
         * @static
         * @param {CVP.IUpdateSign} message UpdateSign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UpdateSign.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an UpdateSign message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.UpdateSign
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.UpdateSign} UpdateSign
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateSign.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.UpdateSign();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.finish = reader.int32();
                    break;
                case 2:
                    message.normalRed = reader.bool();
                    break;
                case 3:
                    message.purhaseRed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an UpdateSign message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.UpdateSign
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.UpdateSign} UpdateSign
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UpdateSign.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an UpdateSign message.
         * @function verify
         * @memberof CVP.UpdateSign
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UpdateSign.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.finish != null && message.hasOwnProperty("finish"))
                if (!$util.isInteger(message.finish))
                    return "finish: integer expected";
            if (message.normalRed != null && message.hasOwnProperty("normalRed"))
                if (typeof message.normalRed !== "boolean")
                    return "normalRed: boolean expected";
            if (message.purhaseRed != null && message.hasOwnProperty("purhaseRed"))
                if (typeof message.purhaseRed !== "boolean")
                    return "purhaseRed: boolean expected";
            return null;
        };

        /**
         * Creates an UpdateSign message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.UpdateSign
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.UpdateSign} UpdateSign
         */
        UpdateSign.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.UpdateSign)
                return object;
            var message = new $root.CVP.UpdateSign();
            if (object.finish != null)
                message.finish = object.finish | 0;
            if (object.normalRed != null)
                message.normalRed = Boolean(object.normalRed);
            if (object.purhaseRed != null)
                message.purhaseRed = Boolean(object.purhaseRed);
            return message;
        };

        /**
         * Creates a plain object from an UpdateSign message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.UpdateSign
         * @static
         * @param {CVP.UpdateSign} message UpdateSign
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UpdateSign.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.finish = 0;
                object.normalRed = false;
                object.purhaseRed = false;
            }
            if (message.finish != null && message.hasOwnProperty("finish"))
                object.finish = message.finish;
            if (message.normalRed != null && message.hasOwnProperty("normalRed"))
                object.normalRed = message.normalRed;
            if (message.purhaseRed != null && message.hasOwnProperty("purhaseRed"))
                object.purhaseRed = message.purhaseRed;
            return object;
        };

        /**
         * Converts this UpdateSign to JSON.
         * @function toJSON
         * @memberof CVP.UpdateSign
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UpdateSign.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UpdateSign;
    })();

    CVP.RequestSubscribeData = (function() {

        /**
         * Properties of a RequestSubscribeData.
         * @memberof CVP
         * @interface IRequestSubscribeData
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestSubscribeData commonParams
         */

        /**
         * Constructs a new RequestSubscribeData.
         * @memberof CVP
         * @classdesc Represents a RequestSubscribeData.
         * @implements IRequestSubscribeData
         * @constructor
         * @param {CVP.IRequestSubscribeData=} [properties] Properties to set
         */
        function RequestSubscribeData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSubscribeData commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestSubscribeData
         * @instance
         */
        RequestSubscribeData.prototype.commonParams = null;

        /**
         * Creates a new RequestSubscribeData instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSubscribeData
         * @static
         * @param {CVP.IRequestSubscribeData=} [properties] Properties to set
         * @returns {CVP.RequestSubscribeData} RequestSubscribeData instance
         */
        RequestSubscribeData.create = function create(properties) {
            return new RequestSubscribeData(properties);
        };

        /**
         * Encodes the specified RequestSubscribeData message. Does not implicitly {@link CVP.RequestSubscribeData.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSubscribeData
         * @static
         * @param {CVP.IRequestSubscribeData} message RequestSubscribeData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSubscribeData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestSubscribeData message, length delimited. Does not implicitly {@link CVP.RequestSubscribeData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSubscribeData
         * @static
         * @param {CVP.IRequestSubscribeData} message RequestSubscribeData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSubscribeData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSubscribeData message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSubscribeData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSubscribeData} RequestSubscribeData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSubscribeData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSubscribeData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSubscribeData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSubscribeData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSubscribeData} RequestSubscribeData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSubscribeData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSubscribeData message.
         * @function verify
         * @memberof CVP.RequestSubscribeData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSubscribeData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestSubscribeData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSubscribeData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSubscribeData} RequestSubscribeData
         */
        RequestSubscribeData.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSubscribeData)
                return object;
            var message = new $root.CVP.RequestSubscribeData();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestSubscribeData.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestSubscribeData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSubscribeData
         * @static
         * @param {CVP.RequestSubscribeData} message RequestSubscribeData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSubscribeData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestSubscribeData to JSON.
         * @function toJSON
         * @memberof CVP.RequestSubscribeData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSubscribeData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSubscribeData;
    })();

    CVP.RequestSubscribeDataResult = (function() {

        /**
         * Properties of a RequestSubscribeDataResult.
         * @memberof CVP
         * @interface IRequestSubscribeDataResult
         * @property {Array.<CVP.IShopItem>|null} [shopItemList] RequestSubscribeDataResult shopItemList
         * @property {CVP.IShopItem|null} [shopItem] RequestSubscribeDataResult shopItem
         * @property {boolean|null} [isSubscribe] RequestSubscribeDataResult isSubscribe
         * @property {string|null} [leftDayDate] RequestSubscribeDataResult leftDayDate
         * @property {boolean|null} [isGetCoins] RequestSubscribeDataResult isGetCoins
         * @property {number|null} [getCoinsNum] RequestSubscribeDataResult getCoinsNum
         */

        /**
         * Constructs a new RequestSubscribeDataResult.
         * @memberof CVP
         * @classdesc Represents a RequestSubscribeDataResult.
         * @implements IRequestSubscribeDataResult
         * @constructor
         * @param {CVP.IRequestSubscribeDataResult=} [properties] Properties to set
         */
        function RequestSubscribeDataResult(properties) {
            this.shopItemList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSubscribeDataResult shopItemList.
         * @member {Array.<CVP.IShopItem>} shopItemList
         * @memberof CVP.RequestSubscribeDataResult
         * @instance
         */
        RequestSubscribeDataResult.prototype.shopItemList = $util.emptyArray;

        /**
         * RequestSubscribeDataResult shopItem.
         * @member {CVP.IShopItem|null|undefined} shopItem
         * @memberof CVP.RequestSubscribeDataResult
         * @instance
         */
        RequestSubscribeDataResult.prototype.shopItem = null;

        /**
         * RequestSubscribeDataResult isSubscribe.
         * @member {boolean} isSubscribe
         * @memberof CVP.RequestSubscribeDataResult
         * @instance
         */
        RequestSubscribeDataResult.prototype.isSubscribe = false;

        /**
         * RequestSubscribeDataResult leftDayDate.
         * @member {string} leftDayDate
         * @memberof CVP.RequestSubscribeDataResult
         * @instance
         */
        RequestSubscribeDataResult.prototype.leftDayDate = "";

        /**
         * RequestSubscribeDataResult isGetCoins.
         * @member {boolean} isGetCoins
         * @memberof CVP.RequestSubscribeDataResult
         * @instance
         */
        RequestSubscribeDataResult.prototype.isGetCoins = false;

        /**
         * RequestSubscribeDataResult getCoinsNum.
         * @member {number} getCoinsNum
         * @memberof CVP.RequestSubscribeDataResult
         * @instance
         */
        RequestSubscribeDataResult.prototype.getCoinsNum = 0;

        /**
         * Creates a new RequestSubscribeDataResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSubscribeDataResult
         * @static
         * @param {CVP.IRequestSubscribeDataResult=} [properties] Properties to set
         * @returns {CVP.RequestSubscribeDataResult} RequestSubscribeDataResult instance
         */
        RequestSubscribeDataResult.create = function create(properties) {
            return new RequestSubscribeDataResult(properties);
        };

        /**
         * Encodes the specified RequestSubscribeDataResult message. Does not implicitly {@link CVP.RequestSubscribeDataResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSubscribeDataResult
         * @static
         * @param {CVP.IRequestSubscribeDataResult} message RequestSubscribeDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSubscribeDataResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.shopItemList != null && message.shopItemList.length)
                for (var i = 0; i < message.shopItemList.length; ++i)
                    $root.CVP.ShopItem.encode(message.shopItemList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.shopItem != null && message.hasOwnProperty("shopItem"))
                $root.CVP.ShopItem.encode(message.shopItem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.isSubscribe != null && message.hasOwnProperty("isSubscribe"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isSubscribe);
            if (message.leftDayDate != null && message.hasOwnProperty("leftDayDate"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.leftDayDate);
            if (message.isGetCoins != null && message.hasOwnProperty("isGetCoins"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isGetCoins);
            if (message.getCoinsNum != null && message.hasOwnProperty("getCoinsNum"))
                writer.uint32(/* id 6, wireType 1 =*/49).double(message.getCoinsNum);
            return writer;
        };

        /**
         * Encodes the specified RequestSubscribeDataResult message, length delimited. Does not implicitly {@link CVP.RequestSubscribeDataResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSubscribeDataResult
         * @static
         * @param {CVP.IRequestSubscribeDataResult} message RequestSubscribeDataResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSubscribeDataResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSubscribeDataResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSubscribeDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSubscribeDataResult} RequestSubscribeDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSubscribeDataResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSubscribeDataResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.shopItemList && message.shopItemList.length))
                        message.shopItemList = [];
                    message.shopItemList.push($root.CVP.ShopItem.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.shopItem = $root.CVP.ShopItem.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.isSubscribe = reader.bool();
                    break;
                case 4:
                    message.leftDayDate = reader.string();
                    break;
                case 5:
                    message.isGetCoins = reader.bool();
                    break;
                case 6:
                    message.getCoinsNum = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSubscribeDataResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSubscribeDataResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSubscribeDataResult} RequestSubscribeDataResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSubscribeDataResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSubscribeDataResult message.
         * @function verify
         * @memberof CVP.RequestSubscribeDataResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSubscribeDataResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.shopItemList != null && message.hasOwnProperty("shopItemList")) {
                if (!Array.isArray(message.shopItemList))
                    return "shopItemList: array expected";
                for (var i = 0; i < message.shopItemList.length; ++i) {
                    var error = $root.CVP.ShopItem.verify(message.shopItemList[i]);
                    if (error)
                        return "shopItemList." + error;
                }
            }
            if (message.shopItem != null && message.hasOwnProperty("shopItem")) {
                var error = $root.CVP.ShopItem.verify(message.shopItem);
                if (error)
                    return "shopItem." + error;
            }
            if (message.isSubscribe != null && message.hasOwnProperty("isSubscribe"))
                if (typeof message.isSubscribe !== "boolean")
                    return "isSubscribe: boolean expected";
            if (message.leftDayDate != null && message.hasOwnProperty("leftDayDate"))
                if (!$util.isString(message.leftDayDate))
                    return "leftDayDate: string expected";
            if (message.isGetCoins != null && message.hasOwnProperty("isGetCoins"))
                if (typeof message.isGetCoins !== "boolean")
                    return "isGetCoins: boolean expected";
            if (message.getCoinsNum != null && message.hasOwnProperty("getCoinsNum"))
                if (typeof message.getCoinsNum !== "number")
                    return "getCoinsNum: number expected";
            return null;
        };

        /**
         * Creates a RequestSubscribeDataResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSubscribeDataResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSubscribeDataResult} RequestSubscribeDataResult
         */
        RequestSubscribeDataResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSubscribeDataResult)
                return object;
            var message = new $root.CVP.RequestSubscribeDataResult();
            if (object.shopItemList) {
                if (!Array.isArray(object.shopItemList))
                    throw TypeError(".CVP.RequestSubscribeDataResult.shopItemList: array expected");
                message.shopItemList = [];
                for (var i = 0; i < object.shopItemList.length; ++i) {
                    if (typeof object.shopItemList[i] !== "object")
                        throw TypeError(".CVP.RequestSubscribeDataResult.shopItemList: object expected");
                    message.shopItemList[i] = $root.CVP.ShopItem.fromObject(object.shopItemList[i]);
                }
            }
            if (object.shopItem != null) {
                if (typeof object.shopItem !== "object")
                    throw TypeError(".CVP.RequestSubscribeDataResult.shopItem: object expected");
                message.shopItem = $root.CVP.ShopItem.fromObject(object.shopItem);
            }
            if (object.isSubscribe != null)
                message.isSubscribe = Boolean(object.isSubscribe);
            if (object.leftDayDate != null)
                message.leftDayDate = String(object.leftDayDate);
            if (object.isGetCoins != null)
                message.isGetCoins = Boolean(object.isGetCoins);
            if (object.getCoinsNum != null)
                message.getCoinsNum = Number(object.getCoinsNum);
            return message;
        };

        /**
         * Creates a plain object from a RequestSubscribeDataResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSubscribeDataResult
         * @static
         * @param {CVP.RequestSubscribeDataResult} message RequestSubscribeDataResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSubscribeDataResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.shopItemList = [];
            if (options.defaults) {
                object.shopItem = null;
                object.isSubscribe = false;
                object.leftDayDate = "";
                object.isGetCoins = false;
                object.getCoinsNum = 0;
            }
            if (message.shopItemList && message.shopItemList.length) {
                object.shopItemList = [];
                for (var j = 0; j < message.shopItemList.length; ++j)
                    object.shopItemList[j] = $root.CVP.ShopItem.toObject(message.shopItemList[j], options);
            }
            if (message.shopItem != null && message.hasOwnProperty("shopItem"))
                object.shopItem = $root.CVP.ShopItem.toObject(message.shopItem, options);
            if (message.isSubscribe != null && message.hasOwnProperty("isSubscribe"))
                object.isSubscribe = message.isSubscribe;
            if (message.leftDayDate != null && message.hasOwnProperty("leftDayDate"))
                object.leftDayDate = message.leftDayDate;
            if (message.isGetCoins != null && message.hasOwnProperty("isGetCoins"))
                object.isGetCoins = message.isGetCoins;
            if (message.getCoinsNum != null && message.hasOwnProperty("getCoinsNum"))
                object.getCoinsNum = options.json && !isFinite(message.getCoinsNum) ? String(message.getCoinsNum) : message.getCoinsNum;
            return object;
        };

        /**
         * Converts this RequestSubscribeDataResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestSubscribeDataResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSubscribeDataResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSubscribeDataResult;
    })();

    CVP.RequestSubscribeGetCoins = (function() {

        /**
         * Properties of a RequestSubscribeGetCoins.
         * @memberof CVP
         * @interface IRequestSubscribeGetCoins
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestSubscribeGetCoins commonParams
         */

        /**
         * Constructs a new RequestSubscribeGetCoins.
         * @memberof CVP
         * @classdesc Represents a RequestSubscribeGetCoins.
         * @implements IRequestSubscribeGetCoins
         * @constructor
         * @param {CVP.IRequestSubscribeGetCoins=} [properties] Properties to set
         */
        function RequestSubscribeGetCoins(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSubscribeGetCoins commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestSubscribeGetCoins
         * @instance
         */
        RequestSubscribeGetCoins.prototype.commonParams = null;

        /**
         * Creates a new RequestSubscribeGetCoins instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSubscribeGetCoins
         * @static
         * @param {CVP.IRequestSubscribeGetCoins=} [properties] Properties to set
         * @returns {CVP.RequestSubscribeGetCoins} RequestSubscribeGetCoins instance
         */
        RequestSubscribeGetCoins.create = function create(properties) {
            return new RequestSubscribeGetCoins(properties);
        };

        /**
         * Encodes the specified RequestSubscribeGetCoins message. Does not implicitly {@link CVP.RequestSubscribeGetCoins.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSubscribeGetCoins
         * @static
         * @param {CVP.IRequestSubscribeGetCoins} message RequestSubscribeGetCoins message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSubscribeGetCoins.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestSubscribeGetCoins message, length delimited. Does not implicitly {@link CVP.RequestSubscribeGetCoins.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSubscribeGetCoins
         * @static
         * @param {CVP.IRequestSubscribeGetCoins} message RequestSubscribeGetCoins message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSubscribeGetCoins.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSubscribeGetCoins message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSubscribeGetCoins
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSubscribeGetCoins} RequestSubscribeGetCoins
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSubscribeGetCoins.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSubscribeGetCoins();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSubscribeGetCoins message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSubscribeGetCoins
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSubscribeGetCoins} RequestSubscribeGetCoins
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSubscribeGetCoins.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSubscribeGetCoins message.
         * @function verify
         * @memberof CVP.RequestSubscribeGetCoins
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSubscribeGetCoins.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestSubscribeGetCoins message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSubscribeGetCoins
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSubscribeGetCoins} RequestSubscribeGetCoins
         */
        RequestSubscribeGetCoins.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSubscribeGetCoins)
                return object;
            var message = new $root.CVP.RequestSubscribeGetCoins();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestSubscribeGetCoins.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestSubscribeGetCoins message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSubscribeGetCoins
         * @static
         * @param {CVP.RequestSubscribeGetCoins} message RequestSubscribeGetCoins
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSubscribeGetCoins.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestSubscribeGetCoins to JSON.
         * @function toJSON
         * @memberof CVP.RequestSubscribeGetCoins
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSubscribeGetCoins.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSubscribeGetCoins;
    })();

    CVP.RequestSubscribeGetCoinsResult = (function() {

        /**
         * Properties of a RequestSubscribeGetCoinsResult.
         * @memberof CVP
         * @interface IRequestSubscribeGetCoinsResult
         * @property {number|null} [coins] RequestSubscribeGetCoinsResult coins
         * @property {number|null} [balance] RequestSubscribeGetCoinsResult balance
         */

        /**
         * Constructs a new RequestSubscribeGetCoinsResult.
         * @memberof CVP
         * @classdesc Represents a RequestSubscribeGetCoinsResult.
         * @implements IRequestSubscribeGetCoinsResult
         * @constructor
         * @param {CVP.IRequestSubscribeGetCoinsResult=} [properties] Properties to set
         */
        function RequestSubscribeGetCoinsResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestSubscribeGetCoinsResult coins.
         * @member {number} coins
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @instance
         */
        RequestSubscribeGetCoinsResult.prototype.coins = 0;

        /**
         * RequestSubscribeGetCoinsResult balance.
         * @member {number} balance
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @instance
         */
        RequestSubscribeGetCoinsResult.prototype.balance = 0;

        /**
         * Creates a new RequestSubscribeGetCoinsResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @static
         * @param {CVP.IRequestSubscribeGetCoinsResult=} [properties] Properties to set
         * @returns {CVP.RequestSubscribeGetCoinsResult} RequestSubscribeGetCoinsResult instance
         */
        RequestSubscribeGetCoinsResult.create = function create(properties) {
            return new RequestSubscribeGetCoinsResult(properties);
        };

        /**
         * Encodes the specified RequestSubscribeGetCoinsResult message. Does not implicitly {@link CVP.RequestSubscribeGetCoinsResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @static
         * @param {CVP.IRequestSubscribeGetCoinsResult} message RequestSubscribeGetCoinsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSubscribeGetCoinsResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            if (message.balance != null && message.hasOwnProperty("balance"))
                writer.uint32(/* id 2, wireType 1 =*/17).double(message.balance);
            return writer;
        };

        /**
         * Encodes the specified RequestSubscribeGetCoinsResult message, length delimited. Does not implicitly {@link CVP.RequestSubscribeGetCoinsResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @static
         * @param {CVP.IRequestSubscribeGetCoinsResult} message RequestSubscribeGetCoinsResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestSubscribeGetCoinsResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestSubscribeGetCoinsResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestSubscribeGetCoinsResult} RequestSubscribeGetCoinsResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSubscribeGetCoinsResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestSubscribeGetCoinsResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                case 2:
                    message.balance = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestSubscribeGetCoinsResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestSubscribeGetCoinsResult} RequestSubscribeGetCoinsResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestSubscribeGetCoinsResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestSubscribeGetCoinsResult message.
         * @function verify
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestSubscribeGetCoinsResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            if (message.balance != null && message.hasOwnProperty("balance"))
                if (typeof message.balance !== "number")
                    return "balance: number expected";
            return null;
        };

        /**
         * Creates a RequestSubscribeGetCoinsResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestSubscribeGetCoinsResult} RequestSubscribeGetCoinsResult
         */
        RequestSubscribeGetCoinsResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestSubscribeGetCoinsResult)
                return object;
            var message = new $root.CVP.RequestSubscribeGetCoinsResult();
            if (object.coins != null)
                message.coins = Number(object.coins);
            if (object.balance != null)
                message.balance = Number(object.balance);
            return message;
        };

        /**
         * Creates a plain object from a RequestSubscribeGetCoinsResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @static
         * @param {CVP.RequestSubscribeGetCoinsResult} message RequestSubscribeGetCoinsResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestSubscribeGetCoinsResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.coins = 0;
                object.balance = 0;
            }
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            if (message.balance != null && message.hasOwnProperty("balance"))
                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;
            return object;
        };

        /**
         * Converts this RequestSubscribeGetCoinsResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestSubscribeGetCoinsResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestSubscribeGetCoinsResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestSubscribeGetCoinsResult;
    })();

    CVP.RequestRestore = (function() {

        /**
         * Properties of a RequestRestore.
         * @memberof CVP
         * @interface IRequestRestore
         * @property {string|null} [sku] RequestRestore sku
         * @property {string|null} [purchase_data] RequestRestore purchase_data
         * @property {string|null} [signature_data] RequestRestore signature_data
         * @property {string|null} [package_name] RequestRestore package_name
         * @property {string|null} [purchase_binary_data] RequestRestore purchase_binary_data
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestRestore commonParams
         */

        /**
         * Constructs a new RequestRestore.
         * @memberof CVP
         * @classdesc Represents a RequestRestore.
         * @implements IRequestRestore
         * @constructor
         * @param {CVP.IRequestRestore=} [properties] Properties to set
         */
        function RequestRestore(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestRestore sku.
         * @member {string} sku
         * @memberof CVP.RequestRestore
         * @instance
         */
        RequestRestore.prototype.sku = "";

        /**
         * RequestRestore purchase_data.
         * @member {string} purchase_data
         * @memberof CVP.RequestRestore
         * @instance
         */
        RequestRestore.prototype.purchase_data = "";

        /**
         * RequestRestore signature_data.
         * @member {string} signature_data
         * @memberof CVP.RequestRestore
         * @instance
         */
        RequestRestore.prototype.signature_data = "";

        /**
         * RequestRestore package_name.
         * @member {string} package_name
         * @memberof CVP.RequestRestore
         * @instance
         */
        RequestRestore.prototype.package_name = "";

        /**
         * RequestRestore purchase_binary_data.
         * @member {string} purchase_binary_data
         * @memberof CVP.RequestRestore
         * @instance
         */
        RequestRestore.prototype.purchase_binary_data = "";

        /**
         * RequestRestore commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestRestore
         * @instance
         */
        RequestRestore.prototype.commonParams = null;

        /**
         * Creates a new RequestRestore instance using the specified properties.
         * @function create
         * @memberof CVP.RequestRestore
         * @static
         * @param {CVP.IRequestRestore=} [properties] Properties to set
         * @returns {CVP.RequestRestore} RequestRestore instance
         */
        RequestRestore.create = function create(properties) {
            return new RequestRestore(properties);
        };

        /**
         * Encodes the specified RequestRestore message. Does not implicitly {@link CVP.RequestRestore.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestRestore
         * @static
         * @param {CVP.IRequestRestore} message RequestRestore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRestore.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sku != null && message.hasOwnProperty("sku"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sku);
            if (message.purchase_data != null && message.hasOwnProperty("purchase_data"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.purchase_data);
            if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.signature_data);
            if (message.package_name != null && message.hasOwnProperty("package_name"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.package_name);
            if (message.purchase_binary_data != null && message.hasOwnProperty("purchase_binary_data"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.purchase_binary_data);
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestRestore message, length delimited. Does not implicitly {@link CVP.RequestRestore.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestRestore
         * @static
         * @param {CVP.IRequestRestore} message RequestRestore message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRestore.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestRestore message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestRestore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestRestore} RequestRestore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRestore.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestRestore();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sku = reader.string();
                    break;
                case 2:
                    message.purchase_data = reader.string();
                    break;
                case 3:
                    message.signature_data = reader.string();
                    break;
                case 4:
                    message.package_name = reader.string();
                    break;
                case 5:
                    message.purchase_binary_data = reader.string();
                    break;
                case 6:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestRestore message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestRestore
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestRestore} RequestRestore
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRestore.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestRestore message.
         * @function verify
         * @memberof CVP.RequestRestore
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestRestore.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sku != null && message.hasOwnProperty("sku"))
                if (!$util.isString(message.sku))
                    return "sku: string expected";
            if (message.purchase_data != null && message.hasOwnProperty("purchase_data"))
                if (!$util.isString(message.purchase_data))
                    return "purchase_data: string expected";
            if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                if (!$util.isString(message.signature_data))
                    return "signature_data: string expected";
            if (message.package_name != null && message.hasOwnProperty("package_name"))
                if (!$util.isString(message.package_name))
                    return "package_name: string expected";
            if (message.purchase_binary_data != null && message.hasOwnProperty("purchase_binary_data"))
                if (!$util.isString(message.purchase_binary_data))
                    return "purchase_binary_data: string expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestRestore message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestRestore
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestRestore} RequestRestore
         */
        RequestRestore.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestRestore)
                return object;
            var message = new $root.CVP.RequestRestore();
            if (object.sku != null)
                message.sku = String(object.sku);
            if (object.purchase_data != null)
                message.purchase_data = String(object.purchase_data);
            if (object.signature_data != null)
                message.signature_data = String(object.signature_data);
            if (object.package_name != null)
                message.package_name = String(object.package_name);
            if (object.purchase_binary_data != null)
                message.purchase_binary_data = String(object.purchase_binary_data);
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestRestore.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestRestore message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestRestore
         * @static
         * @param {CVP.RequestRestore} message RequestRestore
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestRestore.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.sku = "";
                object.purchase_data = "";
                object.signature_data = "";
                object.package_name = "";
                object.purchase_binary_data = "";
                object.commonParams = null;
            }
            if (message.sku != null && message.hasOwnProperty("sku"))
                object.sku = message.sku;
            if (message.purchase_data != null && message.hasOwnProperty("purchase_data"))
                object.purchase_data = message.purchase_data;
            if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                object.signature_data = message.signature_data;
            if (message.package_name != null && message.hasOwnProperty("package_name"))
                object.package_name = message.package_name;
            if (message.purchase_binary_data != null && message.hasOwnProperty("purchase_binary_data"))
                object.purchase_binary_data = message.purchase_binary_data;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestRestore to JSON.
         * @function toJSON
         * @memberof CVP.RequestRestore
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestRestore.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestRestore;
    })();

    CVP.RequestRestoreResult = (function() {

        /**
         * Properties of a RequestRestoreResult.
         * @memberof CVP
         * @interface IRequestRestoreResult
         * @property {boolean|null} [success] RequestRestoreResult success
         * @property {string|null} [error] RequestRestoreResult error
         */

        /**
         * Constructs a new RequestRestoreResult.
         * @memberof CVP
         * @classdesc Represents a RequestRestoreResult.
         * @implements IRequestRestoreResult
         * @constructor
         * @param {CVP.IRequestRestoreResult=} [properties] Properties to set
         */
        function RequestRestoreResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestRestoreResult success.
         * @member {boolean} success
         * @memberof CVP.RequestRestoreResult
         * @instance
         */
        RequestRestoreResult.prototype.success = false;

        /**
         * RequestRestoreResult error.
         * @member {string} error
         * @memberof CVP.RequestRestoreResult
         * @instance
         */
        RequestRestoreResult.prototype.error = "";

        /**
         * Creates a new RequestRestoreResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestRestoreResult
         * @static
         * @param {CVP.IRequestRestoreResult=} [properties] Properties to set
         * @returns {CVP.RequestRestoreResult} RequestRestoreResult instance
         */
        RequestRestoreResult.create = function create(properties) {
            return new RequestRestoreResult(properties);
        };

        /**
         * Encodes the specified RequestRestoreResult message. Does not implicitly {@link CVP.RequestRestoreResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestRestoreResult
         * @static
         * @param {CVP.IRequestRestoreResult} message RequestRestoreResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRestoreResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && message.hasOwnProperty("success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.error != null && message.hasOwnProperty("error"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.error);
            return writer;
        };

        /**
         * Encodes the specified RequestRestoreResult message, length delimited. Does not implicitly {@link CVP.RequestRestoreResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestRestoreResult
         * @static
         * @param {CVP.IRequestRestoreResult} message RequestRestoreResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestRestoreResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestRestoreResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestRestoreResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestRestoreResult} RequestRestoreResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRestoreResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestRestoreResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.error = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestRestoreResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestRestoreResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestRestoreResult} RequestRestoreResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestRestoreResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestRestoreResult message.
         * @function verify
         * @memberof CVP.RequestRestoreResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestRestoreResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.error != null && message.hasOwnProperty("error"))
                if (!$util.isString(message.error))
                    return "error: string expected";
            return null;
        };

        /**
         * Creates a RequestRestoreResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestRestoreResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestRestoreResult} RequestRestoreResult
         */
        RequestRestoreResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestRestoreResult)
                return object;
            var message = new $root.CVP.RequestRestoreResult();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.error != null)
                message.error = String(object.error);
            return message;
        };

        /**
         * Creates a plain object from a RequestRestoreResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestRestoreResult
         * @static
         * @param {CVP.RequestRestoreResult} message RequestRestoreResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestRestoreResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.success = false;
                object.error = "";
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.error != null && message.hasOwnProperty("error"))
                object.error = message.error;
            return object;
        };

        /**
         * Converts this RequestRestoreResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestRestoreResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestRestoreResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestRestoreResult;
    })();

    CVP.RequestFreeSubscribe = (function() {

        /**
         * Properties of a RequestFreeSubscribe.
         * @memberof CVP
         * @interface IRequestFreeSubscribe
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestFreeSubscribe commonParams
         */

        /**
         * Constructs a new RequestFreeSubscribe.
         * @memberof CVP
         * @classdesc Represents a RequestFreeSubscribe.
         * @implements IRequestFreeSubscribe
         * @constructor
         * @param {CVP.IRequestFreeSubscribe=} [properties] Properties to set
         */
        function RequestFreeSubscribe(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestFreeSubscribe commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestFreeSubscribe
         * @instance
         */
        RequestFreeSubscribe.prototype.commonParams = null;

        /**
         * Creates a new RequestFreeSubscribe instance using the specified properties.
         * @function create
         * @memberof CVP.RequestFreeSubscribe
         * @static
         * @param {CVP.IRequestFreeSubscribe=} [properties] Properties to set
         * @returns {CVP.RequestFreeSubscribe} RequestFreeSubscribe instance
         */
        RequestFreeSubscribe.create = function create(properties) {
            return new RequestFreeSubscribe(properties);
        };

        /**
         * Encodes the specified RequestFreeSubscribe message. Does not implicitly {@link CVP.RequestFreeSubscribe.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestFreeSubscribe
         * @static
         * @param {CVP.IRequestFreeSubscribe} message RequestFreeSubscribe message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFreeSubscribe.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestFreeSubscribe message, length delimited. Does not implicitly {@link CVP.RequestFreeSubscribe.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestFreeSubscribe
         * @static
         * @param {CVP.IRequestFreeSubscribe} message RequestFreeSubscribe message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFreeSubscribe.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestFreeSubscribe message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestFreeSubscribe
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestFreeSubscribe} RequestFreeSubscribe
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFreeSubscribe.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestFreeSubscribe();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestFreeSubscribe message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestFreeSubscribe
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestFreeSubscribe} RequestFreeSubscribe
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFreeSubscribe.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestFreeSubscribe message.
         * @function verify
         * @memberof CVP.RequestFreeSubscribe
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestFreeSubscribe.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestFreeSubscribe message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestFreeSubscribe
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestFreeSubscribe} RequestFreeSubscribe
         */
        RequestFreeSubscribe.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestFreeSubscribe)
                return object;
            var message = new $root.CVP.RequestFreeSubscribe();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestFreeSubscribe.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestFreeSubscribe message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestFreeSubscribe
         * @static
         * @param {CVP.RequestFreeSubscribe} message RequestFreeSubscribe
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestFreeSubscribe.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestFreeSubscribe to JSON.
         * @function toJSON
         * @memberof CVP.RequestFreeSubscribe
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestFreeSubscribe.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestFreeSubscribe;
    })();

    CVP.RequestFreeSubscribeResult = (function() {

        /**
         * Properties of a RequestFreeSubscribeResult.
         * @memberof CVP
         * @interface IRequestFreeSubscribeResult
         * @property {boolean|null} [success] RequestFreeSubscribeResult success
         */

        /**
         * Constructs a new RequestFreeSubscribeResult.
         * @memberof CVP
         * @classdesc Represents a RequestFreeSubscribeResult.
         * @implements IRequestFreeSubscribeResult
         * @constructor
         * @param {CVP.IRequestFreeSubscribeResult=} [properties] Properties to set
         */
        function RequestFreeSubscribeResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestFreeSubscribeResult success.
         * @member {boolean} success
         * @memberof CVP.RequestFreeSubscribeResult
         * @instance
         */
        RequestFreeSubscribeResult.prototype.success = false;

        /**
         * Creates a new RequestFreeSubscribeResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestFreeSubscribeResult
         * @static
         * @param {CVP.IRequestFreeSubscribeResult=} [properties] Properties to set
         * @returns {CVP.RequestFreeSubscribeResult} RequestFreeSubscribeResult instance
         */
        RequestFreeSubscribeResult.create = function create(properties) {
            return new RequestFreeSubscribeResult(properties);
        };

        /**
         * Encodes the specified RequestFreeSubscribeResult message. Does not implicitly {@link CVP.RequestFreeSubscribeResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestFreeSubscribeResult
         * @static
         * @param {CVP.IRequestFreeSubscribeResult} message RequestFreeSubscribeResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFreeSubscribeResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && message.hasOwnProperty("success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            return writer;
        };

        /**
         * Encodes the specified RequestFreeSubscribeResult message, length delimited. Does not implicitly {@link CVP.RequestFreeSubscribeResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestFreeSubscribeResult
         * @static
         * @param {CVP.IRequestFreeSubscribeResult} message RequestFreeSubscribeResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestFreeSubscribeResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestFreeSubscribeResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestFreeSubscribeResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestFreeSubscribeResult} RequestFreeSubscribeResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFreeSubscribeResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestFreeSubscribeResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestFreeSubscribeResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestFreeSubscribeResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestFreeSubscribeResult} RequestFreeSubscribeResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestFreeSubscribeResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestFreeSubscribeResult message.
         * @function verify
         * @memberof CVP.RequestFreeSubscribeResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestFreeSubscribeResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            return null;
        };

        /**
         * Creates a RequestFreeSubscribeResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestFreeSubscribeResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestFreeSubscribeResult} RequestFreeSubscribeResult
         */
        RequestFreeSubscribeResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestFreeSubscribeResult)
                return object;
            var message = new $root.CVP.RequestFreeSubscribeResult();
            if (object.success != null)
                message.success = Boolean(object.success);
            return message;
        };

        /**
         * Creates a plain object from a RequestFreeSubscribeResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestFreeSubscribeResult
         * @static
         * @param {CVP.RequestFreeSubscribeResult} message RequestFreeSubscribeResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestFreeSubscribeResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.success = false;
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            return object;
        };

        /**
         * Converts this RequestFreeSubscribeResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestFreeSubscribeResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestFreeSubscribeResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestFreeSubscribeResult;
    })();

    CVP.RequestEnterTutorial = (function() {

        /**
         * Properties of a RequestEnterTutorial.
         * @memberof CVP
         * @interface IRequestEnterTutorial
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestEnterTutorial commonParams
         */

        /**
         * Constructs a new RequestEnterTutorial.
         * @memberof CVP
         * @classdesc Represents a RequestEnterTutorial.
         * @implements IRequestEnterTutorial
         * @constructor
         * @param {CVP.IRequestEnterTutorial=} [properties] Properties to set
         */
        function RequestEnterTutorial(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestEnterTutorial commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestEnterTutorial
         * @instance
         */
        RequestEnterTutorial.prototype.commonParams = null;

        /**
         * Creates a new RequestEnterTutorial instance using the specified properties.
         * @function create
         * @memberof CVP.RequestEnterTutorial
         * @static
         * @param {CVP.IRequestEnterTutorial=} [properties] Properties to set
         * @returns {CVP.RequestEnterTutorial} RequestEnterTutorial instance
         */
        RequestEnterTutorial.create = function create(properties) {
            return new RequestEnterTutorial(properties);
        };

        /**
         * Encodes the specified RequestEnterTutorial message. Does not implicitly {@link CVP.RequestEnterTutorial.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestEnterTutorial
         * @static
         * @param {CVP.IRequestEnterTutorial} message RequestEnterTutorial message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestEnterTutorial.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestEnterTutorial message, length delimited. Does not implicitly {@link CVP.RequestEnterTutorial.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestEnterTutorial
         * @static
         * @param {CVP.IRequestEnterTutorial} message RequestEnterTutorial message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestEnterTutorial.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestEnterTutorial message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestEnterTutorial
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestEnterTutorial} RequestEnterTutorial
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestEnterTutorial.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestEnterTutorial();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestEnterTutorial message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestEnterTutorial
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestEnterTutorial} RequestEnterTutorial
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestEnterTutorial.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestEnterTutorial message.
         * @function verify
         * @memberof CVP.RequestEnterTutorial
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestEnterTutorial.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestEnterTutorial message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestEnterTutorial
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestEnterTutorial} RequestEnterTutorial
         */
        RequestEnterTutorial.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestEnterTutorial)
                return object;
            var message = new $root.CVP.RequestEnterTutorial();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestEnterTutorial.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestEnterTutorial message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestEnterTutorial
         * @static
         * @param {CVP.RequestEnterTutorial} message RequestEnterTutorial
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestEnterTutorial.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestEnterTutorial to JSON.
         * @function toJSON
         * @memberof CVP.RequestEnterTutorial
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestEnterTutorial.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestEnterTutorial;
    })();

    CVP.RequestEnterTutorialResult = (function() {

        /**
         * Properties of a RequestEnterTutorialResult.
         * @memberof CVP
         * @interface IRequestEnterTutorialResult
         * @property {number|null} [curBetIdx] RequestEnterTutorialResult curBetIdx
         * @property {CVP.IPayTable|null} [payTable] RequestEnterTutorialResult payTable
         * @property {Array.<number>|null} [creditAmount] RequestEnterTutorialResult creditAmount
         * @property {number|null} [jackpotAcc] RequestEnterTutorialResult jackpotAcc
         * @property {number|null} [jackpotBase] RequestEnterTutorialResult jackpotBase
         * @property {number|null} [creditAmountIdx] RequestEnterTutorialResult creditAmountIdx
         */

        /**
         * Constructs a new RequestEnterTutorialResult.
         * @memberof CVP
         * @classdesc Represents a RequestEnterTutorialResult.
         * @implements IRequestEnterTutorialResult
         * @constructor
         * @param {CVP.IRequestEnterTutorialResult=} [properties] Properties to set
         */
        function RequestEnterTutorialResult(properties) {
            this.creditAmount = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestEnterTutorialResult curBetIdx.
         * @member {number} curBetIdx
         * @memberof CVP.RequestEnterTutorialResult
         * @instance
         */
        RequestEnterTutorialResult.prototype.curBetIdx = 0;

        /**
         * RequestEnterTutorialResult payTable.
         * @member {CVP.IPayTable|null|undefined} payTable
         * @memberof CVP.RequestEnterTutorialResult
         * @instance
         */
        RequestEnterTutorialResult.prototype.payTable = null;

        /**
         * RequestEnterTutorialResult creditAmount.
         * @member {Array.<number>} creditAmount
         * @memberof CVP.RequestEnterTutorialResult
         * @instance
         */
        RequestEnterTutorialResult.prototype.creditAmount = $util.emptyArray;

        /**
         * RequestEnterTutorialResult jackpotAcc.
         * @member {number} jackpotAcc
         * @memberof CVP.RequestEnterTutorialResult
         * @instance
         */
        RequestEnterTutorialResult.prototype.jackpotAcc = 0;

        /**
         * RequestEnterTutorialResult jackpotBase.
         * @member {number} jackpotBase
         * @memberof CVP.RequestEnterTutorialResult
         * @instance
         */
        RequestEnterTutorialResult.prototype.jackpotBase = 0;

        /**
         * RequestEnterTutorialResult creditAmountIdx.
         * @member {number} creditAmountIdx
         * @memberof CVP.RequestEnterTutorialResult
         * @instance
         */
        RequestEnterTutorialResult.prototype.creditAmountIdx = 0;

        /**
         * Creates a new RequestEnterTutorialResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestEnterTutorialResult
         * @static
         * @param {CVP.IRequestEnterTutorialResult=} [properties] Properties to set
         * @returns {CVP.RequestEnterTutorialResult} RequestEnterTutorialResult instance
         */
        RequestEnterTutorialResult.create = function create(properties) {
            return new RequestEnterTutorialResult(properties);
        };

        /**
         * Encodes the specified RequestEnterTutorialResult message. Does not implicitly {@link CVP.RequestEnterTutorialResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestEnterTutorialResult
         * @static
         * @param {CVP.IRequestEnterTutorialResult} message RequestEnterTutorialResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestEnterTutorialResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.curBetIdx);
            if (message.payTable != null && message.hasOwnProperty("payTable"))
                $root.CVP.PayTable.encode(message.payTable, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.creditAmount != null && message.creditAmount.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.creditAmount.length; ++i)
                    writer.double(message.creditAmount[i]);
                writer.ldelim();
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.jackpotAcc);
            if (message.jackpotBase != null && message.hasOwnProperty("jackpotBase"))
                writer.uint32(/* id 5, wireType 1 =*/41).double(message.jackpotBase);
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.creditAmountIdx);
            return writer;
        };

        /**
         * Encodes the specified RequestEnterTutorialResult message, length delimited. Does not implicitly {@link CVP.RequestEnterTutorialResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestEnterTutorialResult
         * @static
         * @param {CVP.IRequestEnterTutorialResult} message RequestEnterTutorialResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestEnterTutorialResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestEnterTutorialResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestEnterTutorialResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestEnterTutorialResult} RequestEnterTutorialResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestEnterTutorialResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestEnterTutorialResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.curBetIdx = reader.int32();
                    break;
                case 2:
                    message.payTable = $root.CVP.PayTable.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.creditAmount && message.creditAmount.length))
                        message.creditAmount = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.creditAmount.push(reader.double());
                    } else
                        message.creditAmount.push(reader.double());
                    break;
                case 4:
                    message.jackpotAcc = reader.int32();
                    break;
                case 5:
                    message.jackpotBase = reader.double();
                    break;
                case 6:
                    message.creditAmountIdx = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestEnterTutorialResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestEnterTutorialResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestEnterTutorialResult} RequestEnterTutorialResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestEnterTutorialResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestEnterTutorialResult message.
         * @function verify
         * @memberof CVP.RequestEnterTutorialResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestEnterTutorialResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                if (!$util.isInteger(message.curBetIdx))
                    return "curBetIdx: integer expected";
            if (message.payTable != null && message.hasOwnProperty("payTable")) {
                var error = $root.CVP.PayTable.verify(message.payTable);
                if (error)
                    return "payTable." + error;
            }
            if (message.creditAmount != null && message.hasOwnProperty("creditAmount")) {
                if (!Array.isArray(message.creditAmount))
                    return "creditAmount: array expected";
                for (var i = 0; i < message.creditAmount.length; ++i)
                    if (typeof message.creditAmount[i] !== "number")
                        return "creditAmount: number[] expected";
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                if (!$util.isInteger(message.jackpotAcc))
                    return "jackpotAcc: integer expected";
            if (message.jackpotBase != null && message.hasOwnProperty("jackpotBase"))
                if (typeof message.jackpotBase !== "number")
                    return "jackpotBase: number expected";
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                if (!$util.isInteger(message.creditAmountIdx))
                    return "creditAmountIdx: integer expected";
            return null;
        };

        /**
         * Creates a RequestEnterTutorialResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestEnterTutorialResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestEnterTutorialResult} RequestEnterTutorialResult
         */
        RequestEnterTutorialResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestEnterTutorialResult)
                return object;
            var message = new $root.CVP.RequestEnterTutorialResult();
            if (object.curBetIdx != null)
                message.curBetIdx = object.curBetIdx | 0;
            if (object.payTable != null) {
                if (typeof object.payTable !== "object")
                    throw TypeError(".CVP.RequestEnterTutorialResult.payTable: object expected");
                message.payTable = $root.CVP.PayTable.fromObject(object.payTable);
            }
            if (object.creditAmount) {
                if (!Array.isArray(object.creditAmount))
                    throw TypeError(".CVP.RequestEnterTutorialResult.creditAmount: array expected");
                message.creditAmount = [];
                for (var i = 0; i < object.creditAmount.length; ++i)
                    message.creditAmount[i] = Number(object.creditAmount[i]);
            }
            if (object.jackpotAcc != null)
                message.jackpotAcc = object.jackpotAcc | 0;
            if (object.jackpotBase != null)
                message.jackpotBase = Number(object.jackpotBase);
            if (object.creditAmountIdx != null)
                message.creditAmountIdx = object.creditAmountIdx | 0;
            return message;
        };

        /**
         * Creates a plain object from a RequestEnterTutorialResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestEnterTutorialResult
         * @static
         * @param {CVP.RequestEnterTutorialResult} message RequestEnterTutorialResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestEnterTutorialResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.creditAmount = [];
            if (options.defaults) {
                object.curBetIdx = 0;
                object.payTable = null;
                object.jackpotAcc = 0;
                object.jackpotBase = 0;
                object.creditAmountIdx = 0;
            }
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                object.curBetIdx = message.curBetIdx;
            if (message.payTable != null && message.hasOwnProperty("payTable"))
                object.payTable = $root.CVP.PayTable.toObject(message.payTable, options);
            if (message.creditAmount && message.creditAmount.length) {
                object.creditAmount = [];
                for (var j = 0; j < message.creditAmount.length; ++j)
                    object.creditAmount[j] = options.json && !isFinite(message.creditAmount[j]) ? String(message.creditAmount[j]) : message.creditAmount[j];
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                object.jackpotAcc = message.jackpotAcc;
            if (message.jackpotBase != null && message.hasOwnProperty("jackpotBase"))
                object.jackpotBase = options.json && !isFinite(message.jackpotBase) ? String(message.jackpotBase) : message.jackpotBase;
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                object.creditAmountIdx = message.creditAmountIdx;
            return object;
        };

        /**
         * Converts this RequestEnterTutorialResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestEnterTutorialResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestEnterTutorialResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestEnterTutorialResult;
    })();

    CVP.RequestTutorialDeal = (function() {

        /**
         * Properties of a RequestTutorialDeal.
         * @memberof CVP
         * @interface IRequestTutorialDeal
         * @property {number|null} [curBetIdx] RequestTutorialDeal curBetIdx
         * @property {number|null} [creditAmountIdx] RequestTutorialDeal creditAmountIdx
         * @property {number|null} [hand] RequestTutorialDeal hand
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestTutorialDeal commonParams
         */

        /**
         * Constructs a new RequestTutorialDeal.
         * @memberof CVP
         * @classdesc Represents a RequestTutorialDeal.
         * @implements IRequestTutorialDeal
         * @constructor
         * @param {CVP.IRequestTutorialDeal=} [properties] Properties to set
         */
        function RequestTutorialDeal(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTutorialDeal curBetIdx.
         * @member {number} curBetIdx
         * @memberof CVP.RequestTutorialDeal
         * @instance
         */
        RequestTutorialDeal.prototype.curBetIdx = 0;

        /**
         * RequestTutorialDeal creditAmountIdx.
         * @member {number} creditAmountIdx
         * @memberof CVP.RequestTutorialDeal
         * @instance
         */
        RequestTutorialDeal.prototype.creditAmountIdx = 0;

        /**
         * RequestTutorialDeal hand.
         * @member {number} hand
         * @memberof CVP.RequestTutorialDeal
         * @instance
         */
        RequestTutorialDeal.prototype.hand = 0;

        /**
         * RequestTutorialDeal commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestTutorialDeal
         * @instance
         */
        RequestTutorialDeal.prototype.commonParams = null;

        /**
         * Creates a new RequestTutorialDeal instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTutorialDeal
         * @static
         * @param {CVP.IRequestTutorialDeal=} [properties] Properties to set
         * @returns {CVP.RequestTutorialDeal} RequestTutorialDeal instance
         */
        RequestTutorialDeal.create = function create(properties) {
            return new RequestTutorialDeal(properties);
        };

        /**
         * Encodes the specified RequestTutorialDeal message. Does not implicitly {@link CVP.RequestTutorialDeal.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTutorialDeal
         * @static
         * @param {CVP.IRequestTutorialDeal} message RequestTutorialDeal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialDeal.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.curBetIdx);
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.creditAmountIdx);
            if (message.hand != null && message.hasOwnProperty("hand"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.hand);
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestTutorialDeal message, length delimited. Does not implicitly {@link CVP.RequestTutorialDeal.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTutorialDeal
         * @static
         * @param {CVP.IRequestTutorialDeal} message RequestTutorialDeal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialDeal.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTutorialDeal message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTutorialDeal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTutorialDeal} RequestTutorialDeal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialDeal.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTutorialDeal();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.curBetIdx = reader.int32();
                    break;
                case 2:
                    message.creditAmountIdx = reader.int32();
                    break;
                case 3:
                    message.hand = reader.int32();
                    break;
                case 4:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTutorialDeal message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTutorialDeal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTutorialDeal} RequestTutorialDeal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialDeal.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTutorialDeal message.
         * @function verify
         * @memberof CVP.RequestTutorialDeal
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTutorialDeal.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                if (!$util.isInteger(message.curBetIdx))
                    return "curBetIdx: integer expected";
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                if (!$util.isInteger(message.creditAmountIdx))
                    return "creditAmountIdx: integer expected";
            if (message.hand != null && message.hasOwnProperty("hand"))
                if (!$util.isInteger(message.hand))
                    return "hand: integer expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestTutorialDeal message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTutorialDeal
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTutorialDeal} RequestTutorialDeal
         */
        RequestTutorialDeal.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTutorialDeal)
                return object;
            var message = new $root.CVP.RequestTutorialDeal();
            if (object.curBetIdx != null)
                message.curBetIdx = object.curBetIdx | 0;
            if (object.creditAmountIdx != null)
                message.creditAmountIdx = object.creditAmountIdx | 0;
            if (object.hand != null)
                message.hand = object.hand | 0;
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestTutorialDeal.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestTutorialDeal message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTutorialDeal
         * @static
         * @param {CVP.RequestTutorialDeal} message RequestTutorialDeal
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTutorialDeal.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.curBetIdx = 0;
                object.creditAmountIdx = 0;
                object.hand = 0;
                object.commonParams = null;
            }
            if (message.curBetIdx != null && message.hasOwnProperty("curBetIdx"))
                object.curBetIdx = message.curBetIdx;
            if (message.creditAmountIdx != null && message.hasOwnProperty("creditAmountIdx"))
                object.creditAmountIdx = message.creditAmountIdx;
            if (message.hand != null && message.hasOwnProperty("hand"))
                object.hand = message.hand;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestTutorialDeal to JSON.
         * @function toJSON
         * @memberof CVP.RequestTutorialDeal
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTutorialDeal.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTutorialDeal;
    })();

    CVP.RequestTutorialDealResult = (function() {

        /**
         * Properties of a RequestTutorialDealResult.
         * @memberof CVP
         * @interface IRequestTutorialDealResult
         * @property {Array.<string>|null} [pokerList] RequestTutorialDealResult pokerList
         * @property {string|null} [winTypeName] RequestTutorialDealResult winTypeName
         * @property {number|null} [jackpot] RequestTutorialDealResult jackpot
         * @property {Array.<number>|null} [holdIdxList] RequestTutorialDealResult holdIdxList
         */

        /**
         * Constructs a new RequestTutorialDealResult.
         * @memberof CVP
         * @classdesc Represents a RequestTutorialDealResult.
         * @implements IRequestTutorialDealResult
         * @constructor
         * @param {CVP.IRequestTutorialDealResult=} [properties] Properties to set
         */
        function RequestTutorialDealResult(properties) {
            this.pokerList = [];
            this.holdIdxList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTutorialDealResult pokerList.
         * @member {Array.<string>} pokerList
         * @memberof CVP.RequestTutorialDealResult
         * @instance
         */
        RequestTutorialDealResult.prototype.pokerList = $util.emptyArray;

        /**
         * RequestTutorialDealResult winTypeName.
         * @member {string} winTypeName
         * @memberof CVP.RequestTutorialDealResult
         * @instance
         */
        RequestTutorialDealResult.prototype.winTypeName = "";

        /**
         * RequestTutorialDealResult jackpot.
         * @member {number} jackpot
         * @memberof CVP.RequestTutorialDealResult
         * @instance
         */
        RequestTutorialDealResult.prototype.jackpot = 0;

        /**
         * RequestTutorialDealResult holdIdxList.
         * @member {Array.<number>} holdIdxList
         * @memberof CVP.RequestTutorialDealResult
         * @instance
         */
        RequestTutorialDealResult.prototype.holdIdxList = $util.emptyArray;

        /**
         * Creates a new RequestTutorialDealResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTutorialDealResult
         * @static
         * @param {CVP.IRequestTutorialDealResult=} [properties] Properties to set
         * @returns {CVP.RequestTutorialDealResult} RequestTutorialDealResult instance
         */
        RequestTutorialDealResult.create = function create(properties) {
            return new RequestTutorialDealResult(properties);
        };

        /**
         * Encodes the specified RequestTutorialDealResult message. Does not implicitly {@link CVP.RequestTutorialDealResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTutorialDealResult
         * @static
         * @param {CVP.IRequestTutorialDealResult} message RequestTutorialDealResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialDealResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pokerList != null && message.pokerList.length)
                for (var i = 0; i < message.pokerList.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.pokerList[i]);
            if (message.winTypeName != null && message.hasOwnProperty("winTypeName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.winTypeName);
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                writer.uint32(/* id 3, wireType 1 =*/25).double(message.jackpot);
            if (message.holdIdxList != null && message.holdIdxList.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (var i = 0; i < message.holdIdxList.length; ++i)
                    writer.int32(message.holdIdxList[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified RequestTutorialDealResult message, length delimited. Does not implicitly {@link CVP.RequestTutorialDealResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTutorialDealResult
         * @static
         * @param {CVP.IRequestTutorialDealResult} message RequestTutorialDealResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialDealResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTutorialDealResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTutorialDealResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTutorialDealResult} RequestTutorialDealResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialDealResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTutorialDealResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.pokerList && message.pokerList.length))
                        message.pokerList = [];
                    message.pokerList.push(reader.string());
                    break;
                case 2:
                    message.winTypeName = reader.string();
                    break;
                case 3:
                    message.jackpot = reader.double();
                    break;
                case 4:
                    if (!(message.holdIdxList && message.holdIdxList.length))
                        message.holdIdxList = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.holdIdxList.push(reader.int32());
                    } else
                        message.holdIdxList.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTutorialDealResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTutorialDealResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTutorialDealResult} RequestTutorialDealResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialDealResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTutorialDealResult message.
         * @function verify
         * @memberof CVP.RequestTutorialDealResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTutorialDealResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pokerList != null && message.hasOwnProperty("pokerList")) {
                if (!Array.isArray(message.pokerList))
                    return "pokerList: array expected";
                for (var i = 0; i < message.pokerList.length; ++i)
                    if (!$util.isString(message.pokerList[i]))
                        return "pokerList: string[] expected";
            }
            if (message.winTypeName != null && message.hasOwnProperty("winTypeName"))
                if (!$util.isString(message.winTypeName))
                    return "winTypeName: string expected";
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                if (typeof message.jackpot !== "number")
                    return "jackpot: number expected";
            if (message.holdIdxList != null && message.hasOwnProperty("holdIdxList")) {
                if (!Array.isArray(message.holdIdxList))
                    return "holdIdxList: array expected";
                for (var i = 0; i < message.holdIdxList.length; ++i)
                    if (!$util.isInteger(message.holdIdxList[i]))
                        return "holdIdxList: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a RequestTutorialDealResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTutorialDealResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTutorialDealResult} RequestTutorialDealResult
         */
        RequestTutorialDealResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTutorialDealResult)
                return object;
            var message = new $root.CVP.RequestTutorialDealResult();
            if (object.pokerList) {
                if (!Array.isArray(object.pokerList))
                    throw TypeError(".CVP.RequestTutorialDealResult.pokerList: array expected");
                message.pokerList = [];
                for (var i = 0; i < object.pokerList.length; ++i)
                    message.pokerList[i] = String(object.pokerList[i]);
            }
            if (object.winTypeName != null)
                message.winTypeName = String(object.winTypeName);
            if (object.jackpot != null)
                message.jackpot = Number(object.jackpot);
            if (object.holdIdxList) {
                if (!Array.isArray(object.holdIdxList))
                    throw TypeError(".CVP.RequestTutorialDealResult.holdIdxList: array expected");
                message.holdIdxList = [];
                for (var i = 0; i < object.holdIdxList.length; ++i)
                    message.holdIdxList[i] = object.holdIdxList[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestTutorialDealResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTutorialDealResult
         * @static
         * @param {CVP.RequestTutorialDealResult} message RequestTutorialDealResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTutorialDealResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.pokerList = [];
                object.holdIdxList = [];
            }
            if (options.defaults) {
                object.winTypeName = "";
                object.jackpot = 0;
            }
            if (message.pokerList && message.pokerList.length) {
                object.pokerList = [];
                for (var j = 0; j < message.pokerList.length; ++j)
                    object.pokerList[j] = message.pokerList[j];
            }
            if (message.winTypeName != null && message.hasOwnProperty("winTypeName"))
                object.winTypeName = message.winTypeName;
            if (message.jackpot != null && message.hasOwnProperty("jackpot"))
                object.jackpot = options.json && !isFinite(message.jackpot) ? String(message.jackpot) : message.jackpot;
            if (message.holdIdxList && message.holdIdxList.length) {
                object.holdIdxList = [];
                for (var j = 0; j < message.holdIdxList.length; ++j)
                    object.holdIdxList[j] = message.holdIdxList[j];
            }
            return object;
        };

        /**
         * Converts this RequestTutorialDealResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestTutorialDealResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTutorialDealResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTutorialDealResult;
    })();

    CVP.RequestTutorialDraw = (function() {

        /**
         * Properties of a RequestTutorialDraw.
         * @memberof CVP
         * @interface IRequestTutorialDraw
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestTutorialDraw commonParams
         */

        /**
         * Constructs a new RequestTutorialDraw.
         * @memberof CVP
         * @classdesc Represents a RequestTutorialDraw.
         * @implements IRequestTutorialDraw
         * @constructor
         * @param {CVP.IRequestTutorialDraw=} [properties] Properties to set
         */
        function RequestTutorialDraw(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTutorialDraw commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestTutorialDraw
         * @instance
         */
        RequestTutorialDraw.prototype.commonParams = null;

        /**
         * Creates a new RequestTutorialDraw instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTutorialDraw
         * @static
         * @param {CVP.IRequestTutorialDraw=} [properties] Properties to set
         * @returns {CVP.RequestTutorialDraw} RequestTutorialDraw instance
         */
        RequestTutorialDraw.create = function create(properties) {
            return new RequestTutorialDraw(properties);
        };

        /**
         * Encodes the specified RequestTutorialDraw message. Does not implicitly {@link CVP.RequestTutorialDraw.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTutorialDraw
         * @static
         * @param {CVP.IRequestTutorialDraw} message RequestTutorialDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialDraw.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestTutorialDraw message, length delimited. Does not implicitly {@link CVP.RequestTutorialDraw.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTutorialDraw
         * @static
         * @param {CVP.IRequestTutorialDraw} message RequestTutorialDraw message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialDraw.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTutorialDraw message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTutorialDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTutorialDraw} RequestTutorialDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialDraw.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTutorialDraw();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTutorialDraw message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTutorialDraw
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTutorialDraw} RequestTutorialDraw
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialDraw.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTutorialDraw message.
         * @function verify
         * @memberof CVP.RequestTutorialDraw
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTutorialDraw.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestTutorialDraw message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTutorialDraw
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTutorialDraw} RequestTutorialDraw
         */
        RequestTutorialDraw.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTutorialDraw)
                return object;
            var message = new $root.CVP.RequestTutorialDraw();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestTutorialDraw.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestTutorialDraw message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTutorialDraw
         * @static
         * @param {CVP.RequestTutorialDraw} message RequestTutorialDraw
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTutorialDraw.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestTutorialDraw to JSON.
         * @function toJSON
         * @memberof CVP.RequestTutorialDraw
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTutorialDraw.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTutorialDraw;
    })();

    CVP.RequestTutorialDrawResult = (function() {

        /**
         * Properties of a RequestTutorialDrawResult.
         * @memberof CVP
         * @interface IRequestTutorialDrawResult
         * @property {number|null} [balance] RequestTutorialDrawResult balance
         * @property {Array.<CVP.IPokerData>|null} [pokerDataList] RequestTutorialDrawResult pokerDataList
         * @property {number|null} [jackpotAcc] RequestTutorialDrawResult jackpotAcc
         * @property {boolean|null} [isDoubleOrNothing] RequestTutorialDrawResult isDoubleOrNothing
         * @property {boolean|null} [isRewardRoulette] RequestTutorialDrawResult isRewardRoulette
         * @property {number|null} [upgrade] RequestTutorialDrawResult upgrade
         * @property {number|null} [curExp] RequestTutorialDrawResult curExp
         * @property {number|Long|null} [nextExp] RequestTutorialDrawResult nextExp
         * @property {CVP.ILevelUpReward|null} [levelUpReward] RequestTutorialDrawResult levelUpReward
         * @property {CVP.IPokerData|null} [bigWin] RequestTutorialDrawResult bigWin
         * @property {boolean|null} [isFlash] RequestTutorialDrawResult isFlash
         * @property {CVP.IPokerData|null} [jackPot] RequestTutorialDrawResult jackPot
         */

        /**
         * Constructs a new RequestTutorialDrawResult.
         * @memberof CVP
         * @classdesc Represents a RequestTutorialDrawResult.
         * @implements IRequestTutorialDrawResult
         * @constructor
         * @param {CVP.IRequestTutorialDrawResult=} [properties] Properties to set
         */
        function RequestTutorialDrawResult(properties) {
            this.pokerDataList = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTutorialDrawResult balance.
         * @member {number} balance
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.balance = 0;

        /**
         * RequestTutorialDrawResult pokerDataList.
         * @member {Array.<CVP.IPokerData>} pokerDataList
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.pokerDataList = $util.emptyArray;

        /**
         * RequestTutorialDrawResult jackpotAcc.
         * @member {number} jackpotAcc
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.jackpotAcc = 0;

        /**
         * RequestTutorialDrawResult isDoubleOrNothing.
         * @member {boolean} isDoubleOrNothing
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.isDoubleOrNothing = false;

        /**
         * RequestTutorialDrawResult isRewardRoulette.
         * @member {boolean} isRewardRoulette
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.isRewardRoulette = false;

        /**
         * RequestTutorialDrawResult upgrade.
         * @member {number} upgrade
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.upgrade = 0;

        /**
         * RequestTutorialDrawResult curExp.
         * @member {number} curExp
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.curExp = 0;

        /**
         * RequestTutorialDrawResult nextExp.
         * @member {number|Long} nextExp
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.nextExp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * RequestTutorialDrawResult levelUpReward.
         * @member {CVP.ILevelUpReward|null|undefined} levelUpReward
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.levelUpReward = null;

        /**
         * RequestTutorialDrawResult bigWin.
         * @member {CVP.IPokerData|null|undefined} bigWin
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.bigWin = null;

        /**
         * RequestTutorialDrawResult isFlash.
         * @member {boolean} isFlash
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.isFlash = false;

        /**
         * RequestTutorialDrawResult jackPot.
         * @member {CVP.IPokerData|null|undefined} jackPot
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         */
        RequestTutorialDrawResult.prototype.jackPot = null;

        /**
         * Creates a new RequestTutorialDrawResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTutorialDrawResult
         * @static
         * @param {CVP.IRequestTutorialDrawResult=} [properties] Properties to set
         * @returns {CVP.RequestTutorialDrawResult} RequestTutorialDrawResult instance
         */
        RequestTutorialDrawResult.create = function create(properties) {
            return new RequestTutorialDrawResult(properties);
        };

        /**
         * Encodes the specified RequestTutorialDrawResult message. Does not implicitly {@link CVP.RequestTutorialDrawResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTutorialDrawResult
         * @static
         * @param {CVP.IRequestTutorialDrawResult} message RequestTutorialDrawResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialDrawResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.balance != null && message.hasOwnProperty("balance"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.balance);
            if (message.pokerDataList != null && message.pokerDataList.length)
                for (var i = 0; i < message.pokerDataList.length; ++i)
                    $root.CVP.PokerData.encode(message.pokerDataList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.jackpotAcc);
            if (message.isDoubleOrNothing != null && message.hasOwnProperty("isDoubleOrNothing"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isDoubleOrNothing);
            if (message.isRewardRoulette != null && message.hasOwnProperty("isRewardRoulette"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isRewardRoulette);
            if (message.upgrade != null && message.hasOwnProperty("upgrade"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.upgrade);
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                writer.uint32(/* id 9, wireType 1 =*/73).double(message.curExp);
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.nextExp);
            if (message.levelUpReward != null && message.hasOwnProperty("levelUpReward"))
                $root.CVP.LevelUpReward.encode(message.levelUpReward, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.bigWin != null && message.hasOwnProperty("bigWin"))
                $root.CVP.PokerData.encode(message.bigWin, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.isFlash != null && message.hasOwnProperty("isFlash"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.isFlash);
            if (message.jackPot != null && message.hasOwnProperty("jackPot"))
                $root.CVP.PokerData.encode(message.jackPot, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestTutorialDrawResult message, length delimited. Does not implicitly {@link CVP.RequestTutorialDrawResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTutorialDrawResult
         * @static
         * @param {CVP.IRequestTutorialDrawResult} message RequestTutorialDrawResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialDrawResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTutorialDrawResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTutorialDrawResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTutorialDrawResult} RequestTutorialDrawResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialDrawResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTutorialDrawResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.balance = reader.double();
                    break;
                case 2:
                    if (!(message.pokerDataList && message.pokerDataList.length))
                        message.pokerDataList = [];
                    message.pokerDataList.push($root.CVP.PokerData.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.jackpotAcc = reader.int32();
                    break;
                case 6:
                    message.isDoubleOrNothing = reader.bool();
                    break;
                case 7:
                    message.isRewardRoulette = reader.bool();
                    break;
                case 8:
                    message.upgrade = reader.int32();
                    break;
                case 9:
                    message.curExp = reader.double();
                    break;
                case 10:
                    message.nextExp = reader.int64();
                    break;
                case 11:
                    message.levelUpReward = $root.CVP.LevelUpReward.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.bigWin = $root.CVP.PokerData.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.isFlash = reader.bool();
                    break;
                case 14:
                    message.jackPot = $root.CVP.PokerData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTutorialDrawResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTutorialDrawResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTutorialDrawResult} RequestTutorialDrawResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialDrawResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTutorialDrawResult message.
         * @function verify
         * @memberof CVP.RequestTutorialDrawResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTutorialDrawResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.balance != null && message.hasOwnProperty("balance"))
                if (typeof message.balance !== "number")
                    return "balance: number expected";
            if (message.pokerDataList != null && message.hasOwnProperty("pokerDataList")) {
                if (!Array.isArray(message.pokerDataList))
                    return "pokerDataList: array expected";
                for (var i = 0; i < message.pokerDataList.length; ++i) {
                    var error = $root.CVP.PokerData.verify(message.pokerDataList[i]);
                    if (error)
                        return "pokerDataList." + error;
                }
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                if (!$util.isInteger(message.jackpotAcc))
                    return "jackpotAcc: integer expected";
            if (message.isDoubleOrNothing != null && message.hasOwnProperty("isDoubleOrNothing"))
                if (typeof message.isDoubleOrNothing !== "boolean")
                    return "isDoubleOrNothing: boolean expected";
            if (message.isRewardRoulette != null && message.hasOwnProperty("isRewardRoulette"))
                if (typeof message.isRewardRoulette !== "boolean")
                    return "isRewardRoulette: boolean expected";
            if (message.upgrade != null && message.hasOwnProperty("upgrade"))
                if (!$util.isInteger(message.upgrade))
                    return "upgrade: integer expected";
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                if (typeof message.curExp !== "number")
                    return "curExp: number expected";
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                if (!$util.isInteger(message.nextExp) && !(message.nextExp && $util.isInteger(message.nextExp.low) && $util.isInteger(message.nextExp.high)))
                    return "nextExp: integer|Long expected";
            if (message.levelUpReward != null && message.hasOwnProperty("levelUpReward")) {
                var error = $root.CVP.LevelUpReward.verify(message.levelUpReward);
                if (error)
                    return "levelUpReward." + error;
            }
            if (message.bigWin != null && message.hasOwnProperty("bigWin")) {
                var error = $root.CVP.PokerData.verify(message.bigWin);
                if (error)
                    return "bigWin." + error;
            }
            if (message.isFlash != null && message.hasOwnProperty("isFlash"))
                if (typeof message.isFlash !== "boolean")
                    return "isFlash: boolean expected";
            if (message.jackPot != null && message.hasOwnProperty("jackPot")) {
                var error = $root.CVP.PokerData.verify(message.jackPot);
                if (error)
                    return "jackPot." + error;
            }
            return null;
        };

        /**
         * Creates a RequestTutorialDrawResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTutorialDrawResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTutorialDrawResult} RequestTutorialDrawResult
         */
        RequestTutorialDrawResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTutorialDrawResult)
                return object;
            var message = new $root.CVP.RequestTutorialDrawResult();
            if (object.balance != null)
                message.balance = Number(object.balance);
            if (object.pokerDataList) {
                if (!Array.isArray(object.pokerDataList))
                    throw TypeError(".CVP.RequestTutorialDrawResult.pokerDataList: array expected");
                message.pokerDataList = [];
                for (var i = 0; i < object.pokerDataList.length; ++i) {
                    if (typeof object.pokerDataList[i] !== "object")
                        throw TypeError(".CVP.RequestTutorialDrawResult.pokerDataList: object expected");
                    message.pokerDataList[i] = $root.CVP.PokerData.fromObject(object.pokerDataList[i]);
                }
            }
            if (object.jackpotAcc != null)
                message.jackpotAcc = object.jackpotAcc | 0;
            if (object.isDoubleOrNothing != null)
                message.isDoubleOrNothing = Boolean(object.isDoubleOrNothing);
            if (object.isRewardRoulette != null)
                message.isRewardRoulette = Boolean(object.isRewardRoulette);
            if (object.upgrade != null)
                message.upgrade = object.upgrade | 0;
            if (object.curExp != null)
                message.curExp = Number(object.curExp);
            if (object.nextExp != null)
                if ($util.Long)
                    (message.nextExp = $util.Long.fromValue(object.nextExp)).unsigned = false;
                else if (typeof object.nextExp === "string")
                    message.nextExp = parseInt(object.nextExp, 10);
                else if (typeof object.nextExp === "number")
                    message.nextExp = object.nextExp;
                else if (typeof object.nextExp === "object")
                    message.nextExp = new $util.LongBits(object.nextExp.low >>> 0, object.nextExp.high >>> 0).toNumber();
            if (object.levelUpReward != null) {
                if (typeof object.levelUpReward !== "object")
                    throw TypeError(".CVP.RequestTutorialDrawResult.levelUpReward: object expected");
                message.levelUpReward = $root.CVP.LevelUpReward.fromObject(object.levelUpReward);
            }
            if (object.bigWin != null) {
                if (typeof object.bigWin !== "object")
                    throw TypeError(".CVP.RequestTutorialDrawResult.bigWin: object expected");
                message.bigWin = $root.CVP.PokerData.fromObject(object.bigWin);
            }
            if (object.isFlash != null)
                message.isFlash = Boolean(object.isFlash);
            if (object.jackPot != null) {
                if (typeof object.jackPot !== "object")
                    throw TypeError(".CVP.RequestTutorialDrawResult.jackPot: object expected");
                message.jackPot = $root.CVP.PokerData.fromObject(object.jackPot);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestTutorialDrawResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTutorialDrawResult
         * @static
         * @param {CVP.RequestTutorialDrawResult} message RequestTutorialDrawResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTutorialDrawResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pokerDataList = [];
            if (options.defaults) {
                object.balance = 0;
                object.jackpotAcc = 0;
                object.isDoubleOrNothing = false;
                object.isRewardRoulette = false;
                object.upgrade = 0;
                object.curExp = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.nextExp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.nextExp = options.longs === String ? "0" : 0;
                object.levelUpReward = null;
                object.bigWin = null;
                object.isFlash = false;
                object.jackPot = null;
            }
            if (message.balance != null && message.hasOwnProperty("balance"))
                object.balance = options.json && !isFinite(message.balance) ? String(message.balance) : message.balance;
            if (message.pokerDataList && message.pokerDataList.length) {
                object.pokerDataList = [];
                for (var j = 0; j < message.pokerDataList.length; ++j)
                    object.pokerDataList[j] = $root.CVP.PokerData.toObject(message.pokerDataList[j], options);
            }
            if (message.jackpotAcc != null && message.hasOwnProperty("jackpotAcc"))
                object.jackpotAcc = message.jackpotAcc;
            if (message.isDoubleOrNothing != null && message.hasOwnProperty("isDoubleOrNothing"))
                object.isDoubleOrNothing = message.isDoubleOrNothing;
            if (message.isRewardRoulette != null && message.hasOwnProperty("isRewardRoulette"))
                object.isRewardRoulette = message.isRewardRoulette;
            if (message.upgrade != null && message.hasOwnProperty("upgrade"))
                object.upgrade = message.upgrade;
            if (message.curExp != null && message.hasOwnProperty("curExp"))
                object.curExp = options.json && !isFinite(message.curExp) ? String(message.curExp) : message.curExp;
            if (message.nextExp != null && message.hasOwnProperty("nextExp"))
                if (typeof message.nextExp === "number")
                    object.nextExp = options.longs === String ? String(message.nextExp) : message.nextExp;
                else
                    object.nextExp = options.longs === String ? $util.Long.prototype.toString.call(message.nextExp) : options.longs === Number ? new $util.LongBits(message.nextExp.low >>> 0, message.nextExp.high >>> 0).toNumber() : message.nextExp;
            if (message.levelUpReward != null && message.hasOwnProperty("levelUpReward"))
                object.levelUpReward = $root.CVP.LevelUpReward.toObject(message.levelUpReward, options);
            if (message.bigWin != null && message.hasOwnProperty("bigWin"))
                object.bigWin = $root.CVP.PokerData.toObject(message.bigWin, options);
            if (message.isFlash != null && message.hasOwnProperty("isFlash"))
                object.isFlash = message.isFlash;
            if (message.jackPot != null && message.hasOwnProperty("jackPot"))
                object.jackPot = $root.CVP.PokerData.toObject(message.jackPot, options);
            return object;
        };

        /**
         * Converts this RequestTutorialDrawResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestTutorialDrawResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTutorialDrawResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTutorialDrawResult;
    })();

    CVP.RequestTutorial = (function() {

        /**
         * Properties of a RequestTutorial.
         * @memberof CVP
         * @interface IRequestTutorial
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestTutorial commonParams
         */

        /**
         * Constructs a new RequestTutorial.
         * @memberof CVP
         * @classdesc Represents a RequestTutorial.
         * @implements IRequestTutorial
         * @constructor
         * @param {CVP.IRequestTutorial=} [properties] Properties to set
         */
        function RequestTutorial(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTutorial commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestTutorial
         * @instance
         */
        RequestTutorial.prototype.commonParams = null;

        /**
         * Creates a new RequestTutorial instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTutorial
         * @static
         * @param {CVP.IRequestTutorial=} [properties] Properties to set
         * @returns {CVP.RequestTutorial} RequestTutorial instance
         */
        RequestTutorial.create = function create(properties) {
            return new RequestTutorial(properties);
        };

        /**
         * Encodes the specified RequestTutorial message. Does not implicitly {@link CVP.RequestTutorial.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTutorial
         * @static
         * @param {CVP.IRequestTutorial} message RequestTutorial message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorial.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestTutorial message, length delimited. Does not implicitly {@link CVP.RequestTutorial.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTutorial
         * @static
         * @param {CVP.IRequestTutorial} message RequestTutorial message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorial.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTutorial message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTutorial
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTutorial} RequestTutorial
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorial.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTutorial();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTutorial message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTutorial
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTutorial} RequestTutorial
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorial.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTutorial message.
         * @function verify
         * @memberof CVP.RequestTutorial
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTutorial.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestTutorial message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTutorial
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTutorial} RequestTutorial
         */
        RequestTutorial.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTutorial)
                return object;
            var message = new $root.CVP.RequestTutorial();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestTutorial.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestTutorial message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTutorial
         * @static
         * @param {CVP.RequestTutorial} message RequestTutorial
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTutorial.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestTutorial to JSON.
         * @function toJSON
         * @memberof CVP.RequestTutorial
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTutorial.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTutorial;
    })();

    CVP.RequestTutorialResult = (function() {

        /**
         * Properties of a RequestTutorialResult.
         * @memberof CVP
         * @interface IRequestTutorialResult
         * @property {number|null} [coins] RequestTutorialResult coins
         */

        /**
         * Constructs a new RequestTutorialResult.
         * @memberof CVP
         * @classdesc Represents a RequestTutorialResult.
         * @implements IRequestTutorialResult
         * @constructor
         * @param {CVP.IRequestTutorialResult=} [properties] Properties to set
         */
        function RequestTutorialResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTutorialResult coins.
         * @member {number} coins
         * @memberof CVP.RequestTutorialResult
         * @instance
         */
        RequestTutorialResult.prototype.coins = 0;

        /**
         * Creates a new RequestTutorialResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTutorialResult
         * @static
         * @param {CVP.IRequestTutorialResult=} [properties] Properties to set
         * @returns {CVP.RequestTutorialResult} RequestTutorialResult instance
         */
        RequestTutorialResult.create = function create(properties) {
            return new RequestTutorialResult(properties);
        };

        /**
         * Encodes the specified RequestTutorialResult message. Does not implicitly {@link CVP.RequestTutorialResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTutorialResult
         * @static
         * @param {CVP.IRequestTutorialResult} message RequestTutorialResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            return writer;
        };

        /**
         * Encodes the specified RequestTutorialResult message, length delimited. Does not implicitly {@link CVP.RequestTutorialResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTutorialResult
         * @static
         * @param {CVP.IRequestTutorialResult} message RequestTutorialResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTutorialResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTutorialResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTutorialResult} RequestTutorialResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTutorialResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTutorialResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTutorialResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTutorialResult} RequestTutorialResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTutorialResult message.
         * @function verify
         * @memberof CVP.RequestTutorialResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTutorialResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            return null;
        };

        /**
         * Creates a RequestTutorialResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTutorialResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTutorialResult} RequestTutorialResult
         */
        RequestTutorialResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTutorialResult)
                return object;
            var message = new $root.CVP.RequestTutorialResult();
            if (object.coins != null)
                message.coins = Number(object.coins);
            return message;
        };

        /**
         * Creates a plain object from a RequestTutorialResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTutorialResult
         * @static
         * @param {CVP.RequestTutorialResult} message RequestTutorialResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTutorialResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.coins = 0;
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            return object;
        };

        /**
         * Converts this RequestTutorialResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestTutorialResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTutorialResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTutorialResult;
    })();

    CVP.RequestTutorialSkip = (function() {

        /**
         * Properties of a RequestTutorialSkip.
         * @memberof CVP
         * @interface IRequestTutorialSkip
         * @property {CVP.IMsgCommonParams|null} [commonParams] RequestTutorialSkip commonParams
         */

        /**
         * Constructs a new RequestTutorialSkip.
         * @memberof CVP
         * @classdesc Represents a RequestTutorialSkip.
         * @implements IRequestTutorialSkip
         * @constructor
         * @param {CVP.IRequestTutorialSkip=} [properties] Properties to set
         */
        function RequestTutorialSkip(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTutorialSkip commonParams.
         * @member {CVP.IMsgCommonParams|null|undefined} commonParams
         * @memberof CVP.RequestTutorialSkip
         * @instance
         */
        RequestTutorialSkip.prototype.commonParams = null;

        /**
         * Creates a new RequestTutorialSkip instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTutorialSkip
         * @static
         * @param {CVP.IRequestTutorialSkip=} [properties] Properties to set
         * @returns {CVP.RequestTutorialSkip} RequestTutorialSkip instance
         */
        RequestTutorialSkip.create = function create(properties) {
            return new RequestTutorialSkip(properties);
        };

        /**
         * Encodes the specified RequestTutorialSkip message. Does not implicitly {@link CVP.RequestTutorialSkip.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTutorialSkip
         * @static
         * @param {CVP.IRequestTutorialSkip} message RequestTutorialSkip message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialSkip.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                $root.CVP.MsgCommonParams.encode(message.commonParams, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestTutorialSkip message, length delimited. Does not implicitly {@link CVP.RequestTutorialSkip.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTutorialSkip
         * @static
         * @param {CVP.IRequestTutorialSkip} message RequestTutorialSkip message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialSkip.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTutorialSkip message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTutorialSkip
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTutorialSkip} RequestTutorialSkip
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialSkip.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTutorialSkip();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commonParams = $root.CVP.MsgCommonParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTutorialSkip message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTutorialSkip
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTutorialSkip} RequestTutorialSkip
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialSkip.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTutorialSkip message.
         * @function verify
         * @memberof CVP.RequestTutorialSkip
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTutorialSkip.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commonParams != null && message.hasOwnProperty("commonParams")) {
                var error = $root.CVP.MsgCommonParams.verify(message.commonParams);
                if (error)
                    return "commonParams." + error;
            }
            return null;
        };

        /**
         * Creates a RequestTutorialSkip message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTutorialSkip
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTutorialSkip} RequestTutorialSkip
         */
        RequestTutorialSkip.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTutorialSkip)
                return object;
            var message = new $root.CVP.RequestTutorialSkip();
            if (object.commonParams != null) {
                if (typeof object.commonParams !== "object")
                    throw TypeError(".CVP.RequestTutorialSkip.commonParams: object expected");
                message.commonParams = $root.CVP.MsgCommonParams.fromObject(object.commonParams);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestTutorialSkip message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTutorialSkip
         * @static
         * @param {CVP.RequestTutorialSkip} message RequestTutorialSkip
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTutorialSkip.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.commonParams = null;
            if (message.commonParams != null && message.hasOwnProperty("commonParams"))
                object.commonParams = $root.CVP.MsgCommonParams.toObject(message.commonParams, options);
            return object;
        };

        /**
         * Converts this RequestTutorialSkip to JSON.
         * @function toJSON
         * @memberof CVP.RequestTutorialSkip
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTutorialSkip.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTutorialSkip;
    })();

    CVP.RequestTutorialSkipResult = (function() {

        /**
         * Properties of a RequestTutorialSkipResult.
         * @memberof CVP
         * @interface IRequestTutorialSkipResult
         * @property {number|null} [coins] RequestTutorialSkipResult coins
         */

        /**
         * Constructs a new RequestTutorialSkipResult.
         * @memberof CVP
         * @classdesc Represents a RequestTutorialSkipResult.
         * @implements IRequestTutorialSkipResult
         * @constructor
         * @param {CVP.IRequestTutorialSkipResult=} [properties] Properties to set
         */
        function RequestTutorialSkipResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestTutorialSkipResult coins.
         * @member {number} coins
         * @memberof CVP.RequestTutorialSkipResult
         * @instance
         */
        RequestTutorialSkipResult.prototype.coins = 0;

        /**
         * Creates a new RequestTutorialSkipResult instance using the specified properties.
         * @function create
         * @memberof CVP.RequestTutorialSkipResult
         * @static
         * @param {CVP.IRequestTutorialSkipResult=} [properties] Properties to set
         * @returns {CVP.RequestTutorialSkipResult} RequestTutorialSkipResult instance
         */
        RequestTutorialSkipResult.create = function create(properties) {
            return new RequestTutorialSkipResult(properties);
        };

        /**
         * Encodes the specified RequestTutorialSkipResult message. Does not implicitly {@link CVP.RequestTutorialSkipResult.verify|verify} messages.
         * @function encode
         * @memberof CVP.RequestTutorialSkipResult
         * @static
         * @param {CVP.IRequestTutorialSkipResult} message RequestTutorialSkipResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialSkipResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.coins != null && message.hasOwnProperty("coins"))
                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coins);
            return writer;
        };

        /**
         * Encodes the specified RequestTutorialSkipResult message, length delimited. Does not implicitly {@link CVP.RequestTutorialSkipResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CVP.RequestTutorialSkipResult
         * @static
         * @param {CVP.IRequestTutorialSkipResult} message RequestTutorialSkipResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestTutorialSkipResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestTutorialSkipResult message from the specified reader or buffer.
         * @function decode
         * @memberof CVP.RequestTutorialSkipResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CVP.RequestTutorialSkipResult} RequestTutorialSkipResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialSkipResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CVP.RequestTutorialSkipResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.coins = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestTutorialSkipResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CVP.RequestTutorialSkipResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CVP.RequestTutorialSkipResult} RequestTutorialSkipResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestTutorialSkipResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestTutorialSkipResult message.
         * @function verify
         * @memberof CVP.RequestTutorialSkipResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestTutorialSkipResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.coins != null && message.hasOwnProperty("coins"))
                if (typeof message.coins !== "number")
                    return "coins: number expected";
            return null;
        };

        /**
         * Creates a RequestTutorialSkipResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CVP.RequestTutorialSkipResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CVP.RequestTutorialSkipResult} RequestTutorialSkipResult
         */
        RequestTutorialSkipResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CVP.RequestTutorialSkipResult)
                return object;
            var message = new $root.CVP.RequestTutorialSkipResult();
            if (object.coins != null)
                message.coins = Number(object.coins);
            return message;
        };

        /**
         * Creates a plain object from a RequestTutorialSkipResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CVP.RequestTutorialSkipResult
         * @static
         * @param {CVP.RequestTutorialSkipResult} message RequestTutorialSkipResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestTutorialSkipResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.coins = 0;
            if (message.coins != null && message.hasOwnProperty("coins"))
                object.coins = options.json && !isFinite(message.coins) ? String(message.coins) : message.coins;
            return object;
        };

        /**
         * Converts this RequestTutorialSkipResult to JSON.
         * @function toJSON
         * @memberof CVP.RequestTutorialSkipResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestTutorialSkipResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestTutorialSkipResult;
    })();

    return CVP;
})();

module.exports = $root;
